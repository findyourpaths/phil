// Code generated by goyacc -l -o parse_yacc.go -v parse_yacc.states.txt parse_yacc.y. DO NOT EDIT.
package datetime

import __yyfmt__ "fmt"

type yySymType struct {
	yys              int
	DateTimeTZRanges *DateTimeTZRanges
	DateTimeTZRange  *DateTimeTZRange
	DateTimeTZ       *DateTimeTZ
	Date             *Date
	Time             *Time
	TimeZone         *TimeZone
	string           string
	strings          []string
}

const ILLEGAL = 57346
const A = 57347
const ADD = 57348
const AM = 57349
const AMP = 57350
const AND = 57351
const AT = 57352
const BEGINNING = 57353
const CALENDAR = 57354
const COLON = 57355
const COMMA = 57356
const DATE = 57357
const DATES = 57358
const DEC = 57359
const FROM = 57360
const GOOGLE = 57361
const ICS = 57362
const IN = 57363
const LPAREN = 57364
const OF = 57365
const ON = 57366
const ORD_IND = 57367
const PART = 57368
const P = 57369
const PM = 57370
const PERIOD = 57371
const QUO = 57372
const RPAREN = 57373
const SAVE = 57374
const SEMICOLON = 57375
const SUB = 57376
const THROUGH = 57377
const T = 57378
const TH = 57379
const THE = 57380
const TILL = 57381
const TIME = 57382
const TO = 57383
const UNTIL = 57384
const WHEN = 57385
const Z = 57386
const IDENT = 57387
const INT = 57388
const MONTH_NAME = 57389
const TIME_NAME = 57390
const TIME_ZONE = 57391
const TIME_ZONE_ABBREV = 57392
const WEEKDAY_NAME = 57393
const YEAR = 57394

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ILLEGAL",
	"A",
	"ADD",
	"AM",
	"AMP",
	"AND",
	"AT",
	"BEGINNING",
	"CALENDAR",
	"COLON",
	"COMMA",
	"DATE",
	"DATES",
	"DEC",
	"FROM",
	"GOOGLE",
	"ICS",
	"IN",
	"LPAREN",
	"OF",
	"ON",
	"ORD_IND",
	"PART",
	"P",
	"PM",
	"PERIOD",
	"QUO",
	"RPAREN",
	"SAVE",
	"SEMICOLON",
	"SUB",
	"THROUGH",
	"T",
	"TH",
	"THE",
	"TILL",
	"TIME",
	"TO",
	"UNTIL",
	"WHEN",
	"Z",
	"IDENT",
	"INT",
	"MONTH_NAME",
	"TIME_NAME",
	"TIME_ZONE",
	"TIME_ZONE_ABBREV",
	"WEEKDAY_NAME",
	"YEAR",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 18,
	17, 144,
	34, 144,
	35, 144,
	39, 144,
	41, 144,
	42, 144,
	46, 144,
	47, 144,
	-2, 172,
	-1, 38,
	10, 181,
	18, 181,
	48, 181,
	-2, 131,
	-1, 39,
	10, 183,
	18, 183,
	48, 183,
	-2, 133,
	-1, 40,
	10, 184,
	18, 184,
	48, 184,
	-2, 134,
	-1, 89,
	27, 102,
	49, 102,
	50, 102,
	-2, 74,
	-1, 143,
	9, 140,
	14, 140,
	17, 140,
	29, 140,
	30, 140,
	46, 140,
	-2, 164,
	-1, 173,
	1, 48,
	9, 48,
	12, 48,
	14, 48,
	19, 48,
	20, 48,
	-2, 94,
	-1, 186,
	1, 80,
	9, 80,
	12, 80,
	14, 80,
	19, 80,
	20, 80,
	-2, 69,
	-1, 224,
	9, 141,
	14, 141,
	29, 141,
	30, 141,
	-2, 73,
	-1, 229,
	1, 49,
	9, 49,
	12, 49,
	14, 49,
	19, 49,
	20, 49,
	-2, 95,
}

const yyPrivate = 57344

const yyLast = 746

var yyAct = [...]int16{
	133, 6, 220, 194, 6, 98, 6, 141, 61, 63,
	230, 73, 114, 9, 80, 36, 113, 108, 92, 29,
	58, 62, 96, 65, 74, 84, 112, 81, 180, 163,
	131, 10, 66, 30, 10, 36, 10, 111, 222, 7,
	90, 91, 15, 17, 82, 76, 56, 83, 160, 80,
	60, 140, 85, 12, 60, 17, 36, 60, 155, 158,
	36, 49, 81, 37, 36, 312, 128, 60, 17, 129,
	62, 104, 65, 296, 295, 169, 172, 105, 165, 82,
	166, 17, 277, 177, 273, 272, 249, 168, 208, 248,
	207, 159, 14, 106, 176, 153, 74, 4, 19, 97,
	162, 25, 189, 199, 193, 124, 186, 182, 95, 125,
	151, 78, 44, 8, 148, 246, 139, 126, 236, 175,
	57, 46, 196, 192, 35, 191, 175, 181, 45, 47,
	174, 223, 198, 142, 160, 109, 34, 178, 171, 184,
	185, 144, 297, 276, 23, 197, 150, 202, 139, 205,
	50, 130, 200, 145, 146, 51, 149, 209, 79, 138,
	213, 127, 275, 250, 139, 195, 218, 219, 164, 173,
	60, 210, 211, 212, 156, 142, 179, 206, 215, 217,
	171, 11, 121, 144, 227, 53, 228, 204, 189, 188,
	201, 232, 24, 122, 233, 145, 146, 161, 244, 239,
	243, 221, 225, 77, 216, 123, 170, 107, 226, 159,
	240, 253, 245, 64, 1, 257, 202, 110, 52, 238,
	242, 139, 201, 215, 252, 234, 229, 256, 26, 65,
	62, 241, 259, 87, 261, 263, 270, 235, 16, 266,
	2, 86, 269, 139, 55, 237, 54, 13, 48, 216,
	254, 255, 262, 268, 5, 3, 265, 43, 260, 203,
	147, 274, 157, 286, 138, 221, 289, 280, 231, 31,
	167, 293, 283, 181, 189, 201, 287, 22, 214, 290,
	167, 0, 294, 226, 300, 0, 0, 167, 306, 307,
	278, 309, 310, 298, 288, 281, 282, 291, 301, 201,
	305, 0, 316, 308, 0, 0, 292, 0, 303, 189,
	0, 234, 0, 314, 302, 0, 0, 0, 67, 201,
	264, 0, 0, 251, 264, 324, 311, 327, 328, 170,
	271, 0, 247, 0, 0, 68, 69, 313, 0, 315,
	70, 331, 71, 72, 318, 319, 320, 321, 322, 323,
	0, 303, 0, 325, 285, 326, 0, 329, 0, 267,
	154, 27, 264, 167, 27, 264, 27, 59, 67, 0,
	332, 75, 0, 0, 27, 37, 0, 0, 38, 42,
	41, 0, 67, 104, 0, 68, 69, 132, 0, 39,
	70, 0, 71, 72, 0, 317, 0, 163, 0, 68,
	69, 0, 29, 36, 70, 40, 71, 72, 0, 27,
	304, 97, 17, 25, 100, 142, 30, 36, 0, 0,
	171, 258, 330, 144, 0, 167, 0, 101, 0, 167,
	67, 102, 0, 103, 0, 145, 146, 27, 134, 42,
	41, 59, 167, 75, 27, 132, 0, 68, 69, 135,
	29, 0, 70, 17, 71, 72, 279, 0, 0, 60,
	0, 0, 29, 284, 30, 136, 37, 32, 0, 38,
	42, 41, 17, 0, 33, 0, 30, 36, 0, 0,
	39, 0, 20, 0, 299, 0, 0, 0, 21, 0,
	142, 0, 75, 29, 59, 171, 40, 0, 144, 28,
	94, 93, 18, 17, 25, 0, 92, 30, 36, 0,
	145, 146, 0, 187, 0, 167, 50, 37, 32, 0,
	38, 152, 41, 88, 0, 33, 0, 163, 90, 91,
	0, 39, 0, 36, 37, 32, 0, 38, 42, 41,
	0, 0, 33, 132, 29, 0, 0, 40, 39, 0,
	0, 0, 0, 18, 17, 25, 0, 0, 30, 36,
	0, 29, 0, 0, 40, 0, 0, 28, 0, 142,
	18, 17, 25, 0, 143, 30, 36, 144, 37, 32,
	0, 38, 42, 41, 0, 0, 33, 0, 0, 145,
	146, 132, 39, 0, 137, 0, 0, 0, 0, 0,
	183, 42, 41, 0, 100, 29, 0, 0, 40, 0,
	0, 135, 0, 0, 18, 17, 25, 101, 67, 30,
	36, 102, 0, 103, 29, 142, 0, 136, 0, 132,
	171, 0, 0, 224, 17, 68, 69, 0, 30, 36,
	70, 0, 71, 72, 0, 145, 146, 60, 17, 67,
	68, 69, 0, 94, 93, 70, 0, 71, 72, 92,
	0, 115, 163, 116, 0, 0, 89, 69, 36, 119,
	0, 70, 37, 71, 72, 99, 88, 0, 0, 100,
	104, 90, 91, 117, 118, 190, 105, 67, 0, 0,
	0, 0, 101, 0, 0, 0, 102, 0, 103, 0,
	0, 0, 106, 0, 68, 69, 0, 0, 97, 70,
	25, 71, 72, 115, 0, 116, 60, 0, 142, 0,
	0, 119, 121, 143, 0, 0, 144, 0, 0, 0,
	0, 0, 0, 122, 0, 117, 118, 120, 145, 146,
	0, 0, 0, 0, 0, 123,
}

var yyPact = [...]int16{
	456, 109, 141, 456, -1000, 524, 4, 21, -4, 670,
	8, -1000, 301, 568, 632, 662, -1000, 121, 708, -1000,
	59, 71, -1000, -1000, 53, -1000, 425, 560, -1000, -1000,
	-1000, 78, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 109, -1000, -1000, -1000, -1000, 507, -1000,
	-1000, -1000, 109, -1000, 141, -1000, 12, 165, 601, 120,
	168, -17, -1000, 159, 11, -1000, 670, -1000, -1000, -1000,
	-1000, -1000, -1000, 11, 406, 34, 365, -1000, -1000, -1000,
	4, 301, 8, 365, 587, -1000, -9, -9, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 479, 662, 656, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 121, -1000, -1000,
	168, -1000, -1000, 58, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 152, 106, -1000, -1000, -1000, -1000,
	-1000, 8, 709, -37, -1000, -1000, -1000, 57, 124, 120,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 143, 44, -1000,
	-1000, -1000, -1000, 120, 120, 168, -4, 11, 11, 601,
	-1000, -1000, 120, -1000, 11, 21, -4, -1000, 616, 351,
	124, -1000, 11, 479, -1000, 662, 301, 11, -1000, 479,
	11, -1000, 587, -1000, 87, -1000, 301, -1000, 479, -1000,
	-1000, -1000, -1000, 656, -1000, -1000, 152, 406, 11, 81,
	166, -1000, -1000, -1000, -1000, 43, 40, 150, 120, 11,
	21, -17, -17, 11, -4, 11, 11, 301, 11, -17,
	11, 413, 120, 166, -1000, 413, 120, 166, -1000, -1000,
	587, 479, 351, 166, -1000, -1000, -1000, 53, 301, -1000,
	39, -1000, -1000, -1000, -17, -17, 38, 124, 149, 130,
	36, -17, 301, 11, 120, 120, -17, -17, 11, 301,
	120, 53, 21, -18, -1000, 21, -18, 481, 587, -1000,
	-4, 479, -1000, -1000, -1000, 28, 27, 129, 120, 11,
	301, 120, 120, -4, 11, 397, 11, -4, -4, 11,
	-4, -4, 120, 301, -1000, -1000, -1000, 19, -17, 11,
	-17, -4, 53, 397, -1000, -17, -17, -17, -17, -17,
	-17, 670, -1000, 120, -17, 120, -17, -1000, 120, 120,
	120, 120, 120, 120, 166, 120, 120, -4, 397, 53,
	479, -17, 120,
}

var yyPgo = [...]int16{
	0, 214, 240, 97, 53, 277, 42, 269, 92, 260,
	52, 10, 259, 13, 360, 0, 98, 30, 38, 113,
	39, 257, 255, 181, 3, 112, 254, 248, 203, 2,
	28, 238, 61, 247, 32, 245, 144, 22, 5, 241,
	237, 233, 228, 131, 124, 51, 217, 12, 207, 17,
	88, 7, 192, 37, 26, 16, 136,
}

var yyR1 = [...]int8{
	0, 1, 1, 1, 22, 22, 23, 23, 21, 21,
	25, 25, 25, 24, 24, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 26, 26, 31, 27, 27,
	32, 32, 19, 19, 20, 20, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 33, 33, 36, 36, 35,
	35, 34, 34, 28, 28, 28, 28, 28, 28, 4,
	4, 4, 4, 4, 4, 30, 30, 37, 37, 38,
	38, 38, 38, 38, 11, 11, 11, 11, 11, 39,
	40, 41, 41, 10, 10, 10, 5, 5, 5, 7,
	9, 12, 12, 12, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 42, 42, 44,
	44, 44, 44, 44, 44, 29, 29, 43, 43, 45,
	45, 45, 45, 45, 13, 13, 46, 46, 47, 47,
	47, 47, 15, 15, 48, 48, 49, 14, 14, 18,
	18, 18, 50, 50, 51, 17, 17, 16, 16, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 52, 52,
	56, 56, 56, 56, 56, 55, 55, 53, 53, 54,
	54,
}

var yyR2 = [...]int8{
	0, 1, 2, 2, 1, 2, 3, 4, 1, 2,
	1, 1, 1, 0, 1, 1, 2, 3, 2, 2,
	3, 6, 3, 6, 7, 7, 8, 8, 8, 8,
	9, 9, 4, 5, 8, 1, 2, 1, 1, 2,
	1, 1, 1, 1, 2, 2, 1, 2, 3, 4,
	3, 3, 4, 4, 5, 5, 6, 8, 8, 8,
	8, 8, 8, 14, 6, 1, 2, 1, 1, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 4, 3, 4, 1, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 0, 1, 3, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 3, 5,
	6, 1, 4, 4, 2, 4, 1, 3, 5, 1,
	2, 4, 4, 6, 3, 3, 4, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 1, 2, 1,
	1, 2, 1, 2, 1, 0, 1, 1, 1, 2,
	2, 2, 1, 3, 5, 4, 4, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -22, -3, -26, -15, -20, -19, -13,
	-17, -23, -4, -33, -8, -6, -31, 47, 46, -16,
	26, 32, -5, -36, -52, 48, -42, -14, 43, 37,
	51, -7, 11, 18, -56, -44, 52, 10, 13, 24,
	40, 15, 14, -21, -25, 19, 12, 20, -27, -32,
	9, 14, -1, -23, -2, -31, -20, -19, -13, -14,
	46, -15, -13, -15, -28, -13, -34, 17, 34, 35,
	39, 41, 42, -15, -13, -14, -34, -28, -3, -36,
	-15, -13, -17, -34, -11, -10, -39, -41, 44, 34,
	49, 50, 27, 22, 21, -8, -37, 46, -38, 13,
	17, 30, 34, 36, 18, 24, 40, -48, -49, 14,
	-46, -53, -54, -55, -47, 5, 7, 27, 28, 13,
	29, 14, 25, 37, 46, 38, -8, -56, 13, -6,
	-44, -17, -14, -15, 13, 24, 40, 34, -43, -50,
	-45, -51, 9, 14, 17, 29, 30, -9, 36, -25,
	-3, -32, 14, -18, -14, 46, 9, -28, -15, -34,
	14, 29, -18, 46, 9, -13, -13, -28, -13, -15,
	-43, 14, -15, -8, -4, -6, -13, -15, -4, -8,
	-30, -6, -37, 13, -10, -10, -11, 34, -8, -38,
	29, -49, -47, 46, -24, 13, 16, -13, -15, 46,
	-13, -45, -51, -12, 44, 6, 34, 46, -50, -15,
	-13, -13, -13, -15, -19, -13, -20, -13, -15, -15,
	-29, -34, -18, -43, 17, -34, -18, -13, -13, -10,
	-11, -8, -13, -13, -6, -40, 31, -35, -34, -11,
	-55, -53, -54, -24, -15, -13, 34, -43, 46, 46,
	13, -19, -13, -15, -18, -18, -13, -15, -28, -13,
	-18, -13, -17, -13, -16, -17, -13, -43, -37, -11,
	-29, -8, 46, 46, -13, 13, 13, 46, -18, -28,
	-13, -18, -18, -13, -28, -8, -15, -13, -17, -15,
	-13, -17, -18, -15, -11, 46, 46, 13, -13, -28,
	-15, -13, -30, -37, 13, -13, -15, -15, -13, -15,
	-15, -34, 46, -18, -13, -18, -15, -8, -18, -18,
	-18, -18, -18, -18, -13, -18, -18, -29, -15, -30,
	-8, -11, -18,
}

var yyDef = [...]int16{
	0, -2, 1, 0, 15, 0, 119, 0, 0, 42,
	0, 4, 46, 0, 94, 79, 35, 152, -2, 130,
	0, 0, 84, 65, 0, 177, 165, 116, 37, 167,
	168, 106, 67, 68, 178, 127, 157, 180, -2, -2,
	-2, 129, 132, 2, 8, 10, 11, 12, 0, 38,
	40, 41, 3, 4, 16, 35, 18, 0, 42, 120,
	144, 19, 45, 0, 71, 44, 0, 73, 74, 75,
	76, 77, 78, 0, 0, 0, 0, 71, 47, 65,
	119, 0, 0, 0, 85, 95, 0, 0, 98, -2,
	103, 104, 105, 99, 101, 94, 0, 172, 87, 89,
	90, 91, 92, 93, 182, 183, 184, 153, 154, 156,
	145, 170, 171, 0, 146, 187, 188, 189, 190, 185,
	150, 148, 149, 151, 13, 0, 169, 178, 181, 114,
	127, 0, 116, 119, 131, 133, 134, 0, 0, 158,
	137, 162, 139, -2, 141, 142, 143, 107, 0, 9,
	17, 39, 41, 20, 159, 144, 0, 71, 0, 0,
	164, 150, 22, 160, 0, 0, 0, 72, 124, 125,
	0, 140, 0, -2, 51, 79, 0, 0, 50, 94,
	0, 82, 86, 89, 0, 97, -2, 102, 94, 88,
	186, 155, 147, 173, 6, 14, 13, 0, 0, 0,
	117, 138, 163, 108, 111, 0, 0, 0, 161, 0,
	0, 32, 52, 0, 0, 42, 43, 0, 0, 53,
	0, 165, 121, 136, -2, 165, 122, 115, 126, -2,
	165, 94, 124, 135, 83, 96, 100, 0, 70, 81,
	0, 175, 176, 7, 125, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 33, 54, 0, 0, 0, 0,
	55, 0, 0, 165, 166, 0, 165, 0, 165, 80,
	0, 94, 174, 109, 118, 0, 0, 0, 21, 0,
	0, 56, 23, 0, 0, 85, 0, 0, 0, 0,
	0, 0, 123, 0, 64, 112, 113, 0, 24, 0,
	25, 0, 0, 86, 89, 0, 0, 0, 0, 0,
	0, 0, 110, 28, 26, 29, 27, 34, 57, 58,
	59, 60, 61, 62, 135, 30, 31, 0, 85, 0,
	94, 0, 63,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = yyDollar[1].DateTimeTZRanges
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = yyDollar[1].DateTimeTZRanges
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = yyDollar[2].DateTimeTZRanges
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = &DateTimeTZRanges{Items: []*DateTimeTZRange{yyDollar[1].DateTimeTZRange}}
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = yyDollar[2].DateTimeTZRanges
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = AppendDateTimeTZRanges(yyDollar[1].DateTimeTZRanges, yyDollar[3].DateTimeTZRange)
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewMDsYDates(yyDollar[1].string, yyDollar[2].strings, nil)...)
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewDsMYDates(yyDollar[1].strings, yyDollar[2].string, nil)...)
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewMDsYDates(yyDollar[1].string, yyDollar[2].strings, yyDollar[3].string)...)
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(append(NewMDsYDates(yyDollar[1].string, yyDollar[2].strings, yyDollar[6].string), NewMDsYDates(yyDollar[4].string, yyDollar[5].strings, yyDollar[6].string)...)...)
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewDsMYDates(yyDollar[1].strings, yyDollar[2].string, yyDollar[3].string)...)
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(append(NewDsMYDates(yyDollar[1].strings, yyDollar[2].string, yyDollar[6].string), NewDsMYDates(yyDollar[4].strings, yyDollar[5].string, yyDollar[6].string)...)...)
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[4].string, nil)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[5].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[7].string, nil)))
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[7].string, nil), NewDMYDate(yyDollar[3].string, yyDollar[7].string, nil)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[4].string, yyDollar[7].string, nil), NewDMYDate(yyDollar[6].string, yyDollar[7].string, nil)))
		}
	case 26:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[4].string, nil)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[5].string, yyDollar[6].string, nil), NewMDYDate(yyDollar[5].string, yyDollar[8].string, nil)))
		}
	case 27:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, nil), NewDMYDate(yyDollar[3].string, yyDollar[4].string, nil)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[5].string, yyDollar[8].string, nil), NewDMYDate(yyDollar[7].string, yyDollar[8].string, nil)))
		}
	case 28:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[8].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[8].string)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[5].string, yyDollar[8].string), NewMDYDate(yyDollar[1].string, yyDollar[7].string, yyDollar[8].string)))
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[7].string, yyDollar[8].string), NewDMYDate(yyDollar[3].string, yyDollar[7].string, yyDollar[8].string)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[4].string, yyDollar[7].string, yyDollar[8].string), NewDMYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string)))
		}
	case 30:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[9].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[9].string)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[5].string, yyDollar[6].string, yyDollar[9].string), NewMDYDate(yyDollar[5].string, yyDollar[8].string, yyDollar[9].string)))
		}
	case 31:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[9].string), NewDMYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[9].string)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[5].string, yyDollar[8].string, yyDollar[9].string), NewDMYDate(yyDollar[7].string, yyDollar[8].string, yyDollar[9].string)))
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStart(NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil)), NewRangeWithStart(NewMDYDate(yyDollar[3].string, yyDollar[4].string, nil)))
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStart(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string)), NewRangeWithStart(NewMDYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[5].string)))
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRange(NewDateTimeTZ(NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, nil), yyDollar[6].Time, nil), NewDateTimeTZ(NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, nil), yyDollar[8].Time, nil)), NewRange(NewDateTimeTZ(NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string, nil), yyDollar[6].Time, nil), NewDateTimeTZ(NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string, nil), yyDollar[8].Time, nil)))
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.strings = []string{yyDollar[1].string}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.strings = []string{yyDollar[1].string, yyDollar[2].string}
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.strings = append(yyDollar[1].strings, yyDollar[2].string)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZRange = &DateTimeTZRange{Start: yyDollar[1].DateTimeTZ}
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRange = yyDollar[2].DateTimeTZRange
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRange(yyDollar[1].DateTimeTZ, NewDateTimeTZ(yyDollar[1].DateTimeTZ.Date, yyDollar[3].Time, yyDollar[1].DateTimeTZ.TimeZone))
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRange(NewDateTimeTZ(yyDollar[1].DateTimeTZ.Date, yyDollar[1].DateTimeTZ.Time, yyDollar[4].TimeZone), NewDateTimeTZ(yyDollar[1].DateTimeTZ.Date, yyDollar[3].Time, yyDollar[4].TimeZone))
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRange(NewDateTimeTZ(yyDollar[3].DateTimeTZ.Date, yyDollar[1].Time, yyDollar[3].DateTimeTZ.TimeZone), yyDollar[3].DateTimeTZ)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRange = &DateTimeTZRange{Start: yyDollar[1].DateTimeTZ, End: yyDollar[3].DateTimeTZ}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[4].string, nil))
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, nil), NewDMYDate(yyDollar[3].string, yyDollar[4].string, nil))
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[5].string))
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[5].string), NewDMYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[5].string))
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[6].string), NewMDYDate(yyDollar[4].string, yyDollar[5].string, yyDollar[6].string))
		}
	case 57:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewWMDYDate(yyDollar[5].string, yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 58:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewWDMYDate(yyDollar[5].string, yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewWDMYDate(yyDollar[6].string, yyDollar[5].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewWDMYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewWMDYDate(yyDollar[5].string, yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 61:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewWDMYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewWDMYDate(yyDollar[5].string, yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 62:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewWDMYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewWDMYDate(yyDollar[6].string, yyDollar[5].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 63:
		yyDollar = yyS[yypt-14 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRange(NewDateTimeTZ(NewDMYDate(yyDollar[4].string, yyDollar[6].string, yyDollar[14].string), yyDollar[1].Time, yyDollar[2].TimeZone), NewDateTimeTZ(NewDMYDate(yyDollar[8].string, yyDollar[10].string, yyDollar[14].string), yyDollar[12].Time, yyDollar[13].TimeZone))
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRange(NewDateTimeTZ(yyDollar[1].Date, yyDollar[2].Time, yyDollar[3].TimeZone), NewDateTimeTZ(yyDollar[1].Date, yyDollar[5].Time, yyDollar[6].TimeZone))
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeTZWithDate(yyDollar[1].Date, nil)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeTZ(yyDollar[1].Date, yyDollar[2].Time, yyDollar[3].TimeZone)
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeTZ(yyDollar[1].Date, yyDollar[3].Time, yyDollar[4].TimeZone)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeTZ(yyDollar[3].Date, yyDollar[1].Time, yyDollar[2].TimeZone)
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeTZ(yyDollar[4].Date, yyDollar[1].Time, yyDollar[2].TimeZone)
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.TimeZone = nil
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.TimeZone = yyDollar[2].TimeZone
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.TimeZone = yyDollar[2].TimeZone
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = nil
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(yyDollar[1].string, nil, nil)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(nil, yyDollar[1].string, nil)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(nil, "P", nil)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeTZWithDate(yyDollar[1].Date, nil)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeTZ(yyDollar[1].Date, yyDollar[2].Time, nil)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeTZ(yyDollar[1].Date, yyDollar[2].Time, yyDollar[3].TimeZone)
		}
	case 109:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[5].string, yyDollar[3].string, yyDollar[1].string)
		}
	case 110:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[2].string, yyDollar[4].string, yyDollar[6].string, nil)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = nil
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(nil, nil, "+"+yyDollar[2].string+":"+yyDollar[4].string)
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(nil, nil, "-"+yyDollar[2].string+":"+yyDollar[4].string)
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = yyDollar[2].Date
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Date = NewAmbiguousDate(yyDollar[1].string, yyDollar[2].string, yyDollar[4].string, nil)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(nil, nil, yyDollar[1].string)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(nil, yyDollar[3].string, yyDollar[1].string)
		}
	case 118:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[5].string, yyDollar[3].string, yyDollar[1].string)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, nil, nil)
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, nil, yyDollar[2].string)
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Date = NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[4].string)
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Date = NewWDMYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[4].string)
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.Date = NewAmbiguousDate(yyDollar[1].string, yyDollar[2].string, yyDollar[4].string, yyDollar[6].string)
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, nil)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewWDMYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, nil)
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Date = NewWDMYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[3].string, yyDollar[2].string)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = ""
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = "TH"
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = yyDollar[2].Time
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = NewAMTime(yyDollar[1].string, nil, nil, nil)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = NewPMTime(yyDollar[1].string, nil, nil, nil)
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, nil, nil, nil)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, yyDollar[3].string, nil, nil)
		}
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, yyDollar[3].string, yyDollar[5].string, nil)
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Time = NewAMTime(yyDollar[1].string, yyDollar[3].string, nil, nil)
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Time = NewPMTime(yyDollar[1].string, yyDollar[3].string, nil, nil)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, nil, nil, nil)
		}
	}
	goto yystack /* stack new state and value */
}
