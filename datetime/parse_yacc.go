// Code generated by goyacc -l -o parse_yacc.go -v parse_yacc.states.txt parse_yacc.y. DO NOT EDIT.
package datetime

import __yyfmt__ "fmt"

type yySymType struct {
	yys              int
	DateTimeTZRanges *DateTimeTZRanges
	DateTimeTZRange  *DateTimeTZRange
	DateTimeTZ       *DateTimeTZ
	Date             *Date
	Time             *Time
	TimeZone         *TimeZone
	string           string
	strings          []string
}

const ILLEGAL = 57346
const ADD = 57347
const AM = 57348
const AMP = 57349
const AND = 57350
const AT = 57351
const BEGINNING = 57352
const CALENDAR = 57353
const COLON = 57354
const COMMA = 57355
const DATE = 57356
const DEC = 57357
const FROM = 57358
const GOOGLE = 57359
const ICS = 57360
const IN = 57361
const LPAREN = 57362
const OF = 57363
const ON = 57364
const ORD_IND = 57365
const PM = 57366
const PERIOD = 57367
const QUO = 57368
const RPAREN = 57369
const SEMICOLON = 57370
const SUB = 57371
const THROUGH = 57372
const T = 57373
const TH = 57374
const TILL = 57375
const TIME = 57376
const TO = 57377
const UNTIL = 57378
const WHEN = 57379
const Z = 57380
const IDENT = 57381
const INT = 57382
const MONTH_NAME = 57383
const TIME_NAME = 57384
const TIME_ZONE = 57385
const TIME_ZONE_ABBREV = 57386
const WEEKDAY_NAME = 57387
const YEAR = 57388

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ILLEGAL",
	"ADD",
	"AM",
	"AMP",
	"AND",
	"AT",
	"BEGINNING",
	"CALENDAR",
	"COLON",
	"COMMA",
	"DATE",
	"DEC",
	"FROM",
	"GOOGLE",
	"ICS",
	"IN",
	"LPAREN",
	"OF",
	"ON",
	"ORD_IND",
	"PM",
	"PERIOD",
	"QUO",
	"RPAREN",
	"SEMICOLON",
	"SUB",
	"THROUGH",
	"T",
	"TH",
	"TILL",
	"TIME",
	"TO",
	"UNTIL",
	"WHEN",
	"Z",
	"IDENT",
	"INT",
	"MONTH_NAME",
	"TIME_NAME",
	"TIME_ZONE",
	"TIME_ZONE_ABBREV",
	"WEEKDAY_NAME",
	"YEAR",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 16,
	15, 133,
	29, 133,
	30, 133,
	33, 133,
	35, 133,
	36, 133,
	40, 133,
	41, 133,
	-2, 161,
	-1, 34,
	9, 170,
	16, 170,
	42, 170,
	-2, 120,
	-1, 35,
	9, 172,
	16, 172,
	42, 172,
	-2, 122,
	-1, 36,
	9, 173,
	16, 173,
	42, 173,
	-2, 123,
	-1, 75,
	43, 92,
	44, 92,
	-2, 66,
	-1, 122,
	13, 128,
	15, 128,
	25, 128,
	26, 128,
	29, 128,
	40, 128,
	-2, 153,
	-1, 147,
	15, 84,
	31, 84,
	-2, 40,
	-1, 164,
	9, 61,
	12, 61,
	16, 61,
	22, 61,
	34, 61,
	40, 61,
	42, 61,
	-2, 72,
	-1, 200,
	15, 85,
	29, 85,
	31, 85,
	-2, 41,
}

const yyPrivate = 57344

const yyLast = 681

var yyAct = [...]int16{
	113, 5, 201, 11, 208, 5, 84, 51, 53, 86,
	153, 67, 239, 80, 70, 184, 95, 83, 100, 71,
	188, 121, 101, 107, 32, 120, 6, 118, 7, 15,
	50, 15, 46, 21, 47, 9, 32, 142, 139, 50,
	5, 67, 29, 32, 119, 32, 134, 56, 161, 137,
	123, 132, 32, 50, 15, 30, 141, 63, 50, 69,
	124, 125, 76, 77, 162, 3, 15, 147, 284, 41,
	119, 271, 270, 152, 253, 142, 65, 155, 249, 248,
	224, 32, 159, 163, 111, 12, 164, 223, 166, 12,
	182, 174, 156, 157, 167, 12, 138, 171, 127, 148,
	221, 57, 2, 119, 206, 151, 129, 44, 42, 160,
	130, 169, 173, 43, 64, 58, 59, 13, 29, 60,
	170, 61, 62, 54, 12, 12, 50, 114, 38, 37,
	139, 30, 31, 119, 96, 272, 189, 115, 104, 193,
	109, 177, 128, 252, 176, 198, 199, 29, 105, 116,
	140, 143, 180, 202, 119, 110, 15, 106, 79, 78,
	30, 32, 251, 136, 210, 167, 225, 200, 165, 215,
	196, 146, 194, 219, 217, 135, 181, 74, 146, 19,
	102, 149, 76, 77, 146, 179, 176, 149, 154, 28,
	216, 229, 218, 168, 94, 233, 230, 231, 138, 226,
	160, 97, 18, 222, 236, 238, 207, 209, 237, 108,
	177, 22, 214, 66, 8, 57, 196, 247, 227, 73,
	48, 52, 205, 55, 210, 68, 72, 81, 213, 58,
	59, 240, 254, 60, 10, 61, 62, 257, 258, 246,
	261, 243, 262, 243, 40, 265, 4, 167, 176, 42,
	269, 268, 186, 146, 43, 68, 98, 183, 185, 187,
	275, 52, 102, 55, 279, 280, 176, 282, 283, 144,
	39, 145, 176, 204, 99, 168, 243, 288, 285, 243,
	287, 178, 150, 290, 291, 292, 293, 294, 295, 126,
	186, 296, 241, 297, 244, 158, 185, 187, 14, 299,
	57, 25, 298, 45, 302, 303, 301, 17, 304, 277,
	300, 167, 234, 1, 58, 59, 0, 240, 60, 154,
	61, 62, 146, 87, 146, 142, 172, 264, 0, 146,
	267, 32, 0, 175, 0, 0, 0, 88, 0, 89,
	0, 33, 0, 255, 90, 0, 0, 0, 91, 0,
	260, 190, 191, 192, 92, 204, 0, 0, 195, 197,
	114, 38, 37, 87, 0, 0, 93, 0, 203, 0,
	115, 274, 85, 0, 20, 211, 0, 88, 212, 89,
	29, 57, 116, 0, 0, 0, 0, 0, 220, 15,
	0, 0, 146, 30, 32, 58, 59, 0, 0, 60,
	0, 61, 62, 0, 195, 228, 50, 15, 232, 0,
	55, 52, 0, 235, 57, 0, 0, 0, 0, 0,
	133, 23, 242, 0, 245, 23, 49, 0, 58, 59,
	0, 23, 60, 82, 61, 62, 0, 250, 161, 50,
	123, 0, 0, 112, 256, 0, 0, 0, 0, 259,
	124, 125, 0, 57, 162, 0, 263, 79, 78, 266,
	23, 23, 0, 0, 0, 0, 15, 75, 59, 0,
	273, 60, 0, 61, 62, 276, 74, 278, 0, 0,
	281, 76, 77, 0, 23, 0, 0, 0, 49, 286,
	23, 112, 289, 33, 0, 0, 34, 38, 37, 57,
	91, 0, 0, 0, 0, 0, 35, 0, 0, 0,
	0, 0, 0, 58, 59, 0, 29, 60, 36, 61,
	62, 0, 0, 0, 85, 15, 20, 0, 0, 30,
	32, 0, 82, 0, 49, 42, 33, 26, 0, 34,
	131, 37, 0, 27, 161, 0, 123, 0, 0, 35,
	161, 0, 123, 0, 0, 0, 124, 125, 0, 29,
	162, 36, 124, 125, 0, 0, 162, 16, 15, 20,
	0, 50, 30, 32, 33, 26, 112, 34, 38, 37,
	122, 27, 123, 0, 0, 0, 0, 35, 122, 0,
	123, 0, 124, 125, 0, 0, 162, 29, 0, 36,
	124, 125, 24, 0, 117, 16, 15, 20, 0, 0,
	30, 32, 33, 26, 98, 34, 38, 37, 0, 27,
	102, 104, 112, 0, 0, 35, 0, 0, 0, 0,
	0, 105, 99, 103, 0, 29, 0, 36, 0, 0,
	106, 0, 0, 16, 15, 20, 0, 33, 30, 32,
	90, 0, 0, 87, 91, 0, 0, 0, 112, 0,
	92, 0, 0, 0, 0, 0, 0, 88, 0, 89,
	0, 0, 93, 0, 0, 0, 0, 0, 85, 0,
	20,
}

var yyPact = [...]int16{
	565, -1000, 100, -1000, 565, -1, 13, -12, 399, 200,
	603, 438, -10, 638, -1000, 121, 608, -1000, -1000, 332,
	-1000, -1000, 115, 575, -1000, 67, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 565,
	527, -1000, -1000, -1000, 100, -1000, 6, 167, 366, 117,
	125, -3, -1000, 143, 18, -1000, 399, -1000, -1000, -1000,
	-1000, -1000, -1000, 484, -1000, -1000, -1000, -1, 200, 484,
	348, -1000, 19, 19, -1000, -1000, -1000, -1000, -1000, -1000,
	18, 425, 25, 139, 638, 250, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 121, -1000, -1000, 125, -1000, -1000,
	57, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -10, 567, -22, -1000, -1000, -1000, 51, 531, 117,
	-1000, -1000, -1000, -1000, -1000, -1000, 147, 50, 241, -1000,
	-1000, -1000, 117, 117, 125, -12, 18, 18, 366, -1000,
	-1000, 117, -1000, 18, 13, -12, -1000, 139, -1000, 638,
	200, -1000, 139, 18, -1000, 348, 77, -1000, 285, 285,
	531, -1000, -1000, 18, 200, -1000, 139, -1000, -1000, -1000,
	-1000, 168, 425, 18, 71, 537, -1000, -1000, -1000, -1000,
	47, 40, 154, 279, -1000, -1000, -1000, -1000, 117, 18,
	13, -3, -3, 18, -12, 18, 18, 200, 18, -3,
	-1000, 348, 139, 537, -1000, -1000, -1000, 86, 117, 86,
	117, 537, -1000, 332, 200, -1000, 39, -1000, -1000, -3,
	-3, 38, 531, 150, 131, 34, -1000, -3, 200, 18,
	117, 117, -3, -3, 18, 200, 117, 348, -1000, -12,
	537, 13, 10, -1000, 13, 10, 35, 139, -1000, -1000,
	-1000, 32, 31, 123, 117, 18, 200, 117, 117, -12,
	18, 200, 18, -12, -12, 18, -12, -12, 117, -1000,
	-1000, -1000, 28, -3, 18, -3, -12, 399, -3, -3,
	-3, -3, -3, -3, -1000, 117, -3, 117, -3, 537,
	117, 117, 117, 117, 117, 117, 117, 117, -12, 308,
	332, 308, 139, -3, 117,
}

var yyPgo = [...]int16{
	0, 313, 102, 65, 35, 307, 117, 301, 3, 289,
	19, 2, 281, 214, 420, 0, 33, 84, 4, 28,
	26, 270, 257, 15, 246, 244, 114, 298, 69, 234,
	47, 10, 12, 228, 202, 6, 9, 226, 222, 219,
	211, 27, 132, 25, 201, 22, 194, 16, 20, 21,
	179, 18, 189,
}

var yyR1 = [...]int8{
	0, 21, 1, 22, 22, 23, 23, 23, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 24, 24, 27,
	25, 25, 28, 28, 19, 19, 20, 20, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 29, 29, 34,
	34, 33, 33, 30, 30, 26, 26, 26, 26, 26,
	26, 4, 4, 4, 4, 4, 4, 31, 31, 35,
	35, 36, 36, 36, 11, 11, 11, 11, 11, 37,
	38, 39, 39, 10, 10, 5, 5, 5, 7, 9,
	12, 12, 12, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 40, 40, 42, 42,
	42, 42, 42, 42, 32, 32, 41, 41, 43, 43,
	43, 43, 43, 13, 13, 44, 44, 45, 45, 45,
	45, 15, 15, 46, 46, 47, 14, 14, 18, 18,
	18, 48, 48, 49, 17, 17, 16, 16, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 50, 50, 52,
	52, 52, 52, 52, 51, 51,
}

var yyR2 = [...]int8{
	0, 0, 4, 1, 2, 1, 1, 1, 1, 2,
	3, 2, 2, 3, 6, 3, 6, 7, 7, 8,
	8, 8, 8, 9, 9, 4, 5, 1, 2, 1,
	1, 2, 1, 1, 1, 1, 2, 2, 1, 2,
	3, 4, 3, 3, 4, 4, 5, 5, 6, 8,
	8, 8, 8, 8, 8, 14, 6, 1, 2, 1,
	1, 0, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 4, 3, 4, 1, 0, 1, 1,
	2, 1, 1, 1, 0, 1, 3, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 3, 5, 6,
	1, 4, 4, 2, 4, 1, 3, 5, 1, 2,
	4, 4, 6, 3, 3, 4, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 1,
	2, 1, 2, 1, 0, 1, 1, 1, 2, 2,
	2, 1, 3, 5, 4, 4, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -24, -15, -20, -19, -13, -4,
	-29, -8, -17, -6, -27, 41, 40, -5, -34, -50,
	42, -16, -40, -14, 37, -7, 10, 16, -52, 32,
	45, -42, 46, 9, 12, 22, 34, 14, 13, -21,
	-25, -28, 8, 13, -2, -27, -20, -19, -13, -14,
	40, -15, -13, -15, -26, -13, -30, 15, 29, 30,
	33, 35, 36, -30, -26, -3, -34, -15, -13, -30,
	-11, -10, -37, -39, 38, 29, 43, 44, 20, 19,
	-15, -13, -14, -8, -35, 40, -36, 15, 29, 31,
	12, 16, 22, 34, -46, -47, 13, -44, 6, 24,
	-51, -45, 12, 25, 13, 23, 32, -8, -52, -6,
	-42, -17, -14, -15, 12, 22, 34, 29, -41, -48,
	-43, -49, 13, 15, 25, 26, -9, 31, -2, -3,
	-28, 13, -18, -14, 40, 8, -26, -15, -30, 13,
	25, -18, 40, 8, -13, -13, -26, -8, -4, -6,
	-13, -4, -8, -31, -6, -35, -10, -10, -13, -15,
	-41, 13, 29, -15, -11, 29, -8, -36, 25, -47,
	-45, 40, -13, -15, 40, -13, -43, -49, -12, 38,
	5, 29, 40, -22, -23, 17, 11, 18, -48, -15,
	-13, -13, -13, -15, -19, -13, -20, -13, -15, -15,
	-10, -11, -8, -13, -6, -38, 27, -30, -18, -30,
	-18, -13, -13, -33, -30, -11, -51, 6, 24, -15,
	-13, 29, -41, 40, 40, 12, -23, -19, -13, -15,
	-18, -18, -13, -15, -26, -13, -18, -35, -11, -32,
	-41, -17, -13, -16, -17, -13, -41, -8, 40, 40,
	-13, 12, 12, 40, -18, -26, -13, -18, -18, -13,
	-26, -15, -15, -13, -17, -15, -13, -17, -18, -11,
	40, 40, 12, -13, -26, -15, -13, -30, -13, -15,
	-15, -13, -15, -15, 40, -18, -13, -18, -15, -13,
	-18, -18, -18, -18, -18, -18, -18, -18, -32, -15,
	-31, -35, -8, -11, -18,
}

var yyDef = [...]int16{
	0, -2, 1, 8, 0, 108, 0, 0, 34, 38,
	0, 84, 0, 71, 27, 141, -2, 76, 57, 0,
	166, 119, 154, 105, 29, 95, 59, 60, 167, 156,
	157, 116, 146, 169, -2, -2, -2, 118, 121, 0,
	0, 30, 32, 33, 9, 27, 11, 0, 34, 109,
	133, 12, 37, 0, 63, 36, 0, 65, 66, 67,
	68, 69, 70, 0, 63, 39, 57, 108, 0, 0,
	77, 85, 0, 0, 88, -2, 93, 94, 89, 91,
	0, 0, 0, 84, 0, 161, 79, 81, 82, 83,
	170, 171, 172, 173, 142, 143, 145, 134, 159, 160,
	0, 135, 174, 139, 137, 138, 140, 158, 167, 103,
	116, 0, 105, 108, 120, 122, 123, 131, 0, 147,
	126, 151, -2, 129, 130, 132, 96, 0, 0, 10,
	31, 33, 13, 148, 133, 0, 63, 0, 0, 153,
	139, 15, 149, 0, 0, 0, 64, -2, 43, 71,
	0, 42, 84, 0, 74, 78, 0, 87, 113, 114,
	0, 128, 131, 0, -2, 92, 84, 80, 175, 144,
	136, 162, 0, 0, 0, 106, 127, 152, 97, 100,
	0, 0, 0, 2, 3, 5, 6, 7, 150, 0,
	0, 25, 44, 0, 0, 34, 35, 0, 0, 45,
	-2, 154, 84, 124, 75, 86, 90, 154, 110, 154,
	111, 104, 115, 0, 62, 73, 0, 164, 165, 114,
	113, 0, 0, 0, 0, 0, 4, 0, 0, 0,
	26, 46, 0, 0, 0, 0, 47, 154, 72, 0,
	125, 0, 154, 155, 0, 154, 0, 84, 163, 98,
	107, 0, 0, 0, 14, 0, 0, 48, 16, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 56,
	101, 102, 0, 17, 0, 18, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 21, 19, 22, 20, 124,
	49, 50, 51, 52, 53, 54, 23, 24, 0, 77,
	0, 78, 84, 0, 55,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = yyDollar[1].DateTimeTZRanges
		}
	case 2:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = yyDollar[1].DateTimeTZRanges
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = &DateTimeTZRanges{Items: []*DateTimeTZRange{yyDollar[1].DateTimeTZRange}}
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = yyDollar[2].DateTimeTZRanges
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = AppendDateTimeTZRanges(yyDollar[1].DateTimeTZRanges, yyDollar[3].DateTimeTZRange)
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewMDsYDates(yyDollar[1].string, yyDollar[2].strings, nil)...)
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewDsMYDates(yyDollar[1].strings, yyDollar[2].string, nil)...)
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewMDsYDates(yyDollar[1].string, yyDollar[2].strings, yyDollar[3].string)...)
		}
	case 14:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(append(NewMDsYDates(yyDollar[1].string, yyDollar[2].strings, yyDollar[6].string), NewMDsYDates(yyDollar[4].string, yyDollar[5].strings, yyDollar[6].string)...)...)
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewDsMYDates(yyDollar[1].strings, yyDollar[2].string, yyDollar[3].string)...)
		}
	case 16:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(append(NewDsMYDates(yyDollar[1].strings, yyDollar[2].string, yyDollar[6].string), NewDsMYDates(yyDollar[4].strings, yyDollar[5].string, yyDollar[6].string)...)...)
		}
	case 17:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[4].string, nil)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[5].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[7].string, nil)))
		}
	case 18:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[7].string, nil), NewDMYDate(yyDollar[3].string, yyDollar[7].string, nil)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[4].string, yyDollar[7].string, nil), NewDMYDate(yyDollar[6].string, yyDollar[7].string, nil)))
		}
	case 19:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[4].string, nil)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[5].string, yyDollar[6].string, nil), NewMDYDate(yyDollar[5].string, yyDollar[8].string, nil)))
		}
	case 20:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, nil), NewDMYDate(yyDollar[3].string, yyDollar[4].string, nil)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[5].string, yyDollar[8].string, nil), NewDMYDate(yyDollar[7].string, yyDollar[8].string, nil)))
		}
	case 21:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[8].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[8].string)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[5].string, yyDollar[8].string), NewMDYDate(yyDollar[1].string, yyDollar[7].string, yyDollar[8].string)))
		}
	case 22:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[7].string, yyDollar[8].string), NewDMYDate(yyDollar[3].string, yyDollar[7].string, yyDollar[8].string)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[4].string, yyDollar[7].string, yyDollar[8].string), NewDMYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string)))
		}
	case 23:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[9].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[9].string)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[5].string, yyDollar[6].string, yyDollar[9].string), NewMDYDate(yyDollar[5].string, yyDollar[8].string, yyDollar[9].string)))
		}
	case 24:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[9].string), NewDMYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[9].string)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[5].string, yyDollar[8].string, yyDollar[9].string), NewDMYDate(yyDollar[7].string, yyDollar[8].string, yyDollar[9].string)))
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStart(NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil)), NewRangeWithStart(NewMDYDate(yyDollar[3].string, yyDollar[4].string, nil)))
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStart(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string)), NewRangeWithStart(NewMDYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[5].string)))
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.strings = []string{yyDollar[1].string}
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.strings = []string{yyDollar[1].string, yyDollar[2].string}
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.strings = append(yyDollar[1].strings, yyDollar[2].string)
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZRange = &DateTimeTZRange{Start: yyDollar[1].DateTimeTZ}
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRange = yyDollar[2].DateTimeTZRange
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(yyDollar[1].DateTimeTZ, NewDateTimeTZ(yyDollar[1].DateTimeTZ.Date, yyDollar[3].Time, yyDollar[1].DateTimeTZ.TimeZone))
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(NewDateTimeTZ(yyDollar[1].DateTimeTZ.Date, yyDollar[1].DateTimeTZ.Time, yyDollar[4].TimeZone), NewDateTimeTZ(yyDollar[1].DateTimeTZ.Date, yyDollar[3].Time, yyDollar[4].TimeZone))
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(NewDateTimeTZ(yyDollar[3].DateTimeTZ.Date, yyDollar[1].Time, yyDollar[3].DateTimeTZ.TimeZone), yyDollar[3].DateTimeTZ)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRange = &DateTimeTZRange{Start: yyDollar[1].DateTimeTZ, End: yyDollar[3].DateTimeTZ}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[4].string, nil))
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, nil), NewDMYDate(yyDollar[3].string, yyDollar[4].string, nil))
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[5].string))
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[5].string), NewDMYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[5].string))
		}
	case 48:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[6].string), NewMDYDate(yyDollar[4].string, yyDollar[5].string, yyDollar[6].string))
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewWMDYDate(yyDollar[5].string, yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewWDMYDate(yyDollar[5].string, yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 51:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewWDMYDate(yyDollar[6].string, yyDollar[5].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewWDMYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewWMDYDate(yyDollar[5].string, yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 53:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewWDMYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewWDMYDate(yyDollar[5].string, yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 54:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewWDMYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewWDMYDate(yyDollar[6].string, yyDollar[5].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 55:
		yyDollar = yyS[yypt-14 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(NewDateTimeTZ(NewDMYDate(yyDollar[4].string, yyDollar[6].string, yyDollar[14].string), yyDollar[1].Time, yyDollar[2].TimeZone), NewDateTimeTZ(NewDMYDate(yyDollar[8].string, yyDollar[10].string, yyDollar[14].string), yyDollar[12].Time, yyDollar[13].TimeZone))
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(NewDateTimeTZ(yyDollar[1].Date, yyDollar[2].Time, yyDollar[3].TimeZone), NewDateTimeTZ(yyDollar[1].Date, yyDollar[5].Time, yyDollar[6].TimeZone))
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeTZWithDate(yyDollar[1].Date, nil)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeTZ(yyDollar[1].Date, yyDollar[2].Time, yyDollar[3].TimeZone)
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeTZ(yyDollar[1].Date, yyDollar[3].Time, yyDollar[4].TimeZone)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeTZ(yyDollar[3].Date, yyDollar[1].Time, yyDollar[2].TimeZone)
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeTZ(yyDollar[4].Date, yyDollar[1].Time, yyDollar[2].TimeZone)
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.TimeZone = nil
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.TimeZone = yyDollar[2].TimeZone
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.TimeZone = yyDollar[2].TimeZone
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = nil
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(yyDollar[1].string, nil, nil)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(nil, yyDollar[1].string, nil)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeTZWithDate(yyDollar[1].Date, nil)
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeTZ(yyDollar[1].Date, yyDollar[2].Time, nil)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeTZ(yyDollar[1].Date, yyDollar[2].Time, yyDollar[3].TimeZone)
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[5].string, yyDollar[3].string, yyDollar[1].string)
		}
	case 99:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[2].string, yyDollar[4].string, yyDollar[6].string, nil)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = nil
		}
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(nil, nil, "+"+yyDollar[2].string+":"+yyDollar[4].string)
		}
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(nil, nil, "-"+yyDollar[2].string+":"+yyDollar[4].string)
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = yyDollar[2].Date
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Date = NewAmbiguousDate(yyDollar[1].string, yyDollar[2].string, yyDollar[4].string, nil)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(nil, nil, yyDollar[1].string)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(nil, yyDollar[3].string, yyDollar[1].string)
		}
	case 107:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[5].string, yyDollar[3].string, yyDollar[1].string)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, nil, nil)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, nil, yyDollar[2].string)
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Date = NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[4].string)
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Date = NewWDMYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[4].string)
		}
	case 112:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.Date = NewAmbiguousDate(yyDollar[1].string, yyDollar[2].string, yyDollar[4].string, yyDollar[6].string)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, nil)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewWDMYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, nil)
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Date = NewWDMYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[3].string, yyDollar[2].string)
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = ""
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = "TH"
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = yyDollar[2].Time
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = NewAMTime(yyDollar[1].string, nil, nil, nil)
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = NewPMTime(yyDollar[1].string, nil, nil, nil)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, nil, nil, nil)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, yyDollar[3].string, nil, nil)
		}
	case 163:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, yyDollar[3].string, yyDollar[5].string, nil)
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Time = NewAMTime(yyDollar[1].string, yyDollar[3].string, nil, nil)
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Time = NewPMTime(yyDollar[1].string, yyDollar[3].string, nil, nil)
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, nil, nil, nil)
		}
	}
	goto yystack /* stack new state and value */
}
