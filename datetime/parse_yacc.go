// Code generated by goyacc -l -o parse_yacc.go -v parse_yacc.states.txt parse_yacc.y. DO NOT EDIT.
package datetime

import __yyfmt__ "fmt"

type yySymType struct {
	yys            int
	DateTimeRanges *DateTimeRanges
	DateTimeRange  *DateTimeRange
	DateTime       *DateTime
	Date           *Date
	Time           *Time
	TimeZone       *TimeZone
	string         string
	strings        []string
}

const ILLEGAL = 57346
const A = 57347
const ADD = 57348
const AM = 57349
const AMP = 57350
const AND = 57351
const AT = 57352
const BEGINNING = 57353
const CALENDAR = 57354
const COLON = 57355
const COMMA = 57356
const DATE = 57357
const DATES = 57358
const DEC = 57359
const FROM = 57360
const GOOGLE = 57361
const ICS = 57362
const IN = 57363
const LPAREN = 57364
const OF = 57365
const ON = 57366
const ORD_IND = 57367
const PART = 57368
const P = 57369
const PM = 57370
const PERIOD = 57371
const QUO = 57372
const RPAREN = 57373
const SAVE = 57374
const SEMICOLON = 57375
const SUB = 57376
const THROUGH = 57377
const T = 57378
const TH = 57379
const THE = 57380
const TILL = 57381
const TIME = 57382
const TO = 57383
const UNTIL = 57384
const WHEN = 57385
const Z = 57386
const IDENT = 57387
const INT = 57388
const MONTH_NAME = 57389
const TIME_NAME = 57390
const TIME_ZONE = 57391
const TIME_ZONE_ABBREV = 57392
const RELATIVE_DAY = 57393
const WEEKDAY_NAME = 57394
const YEAR = 57395

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ILLEGAL",
	"A",
	"ADD",
	"AM",
	"AMP",
	"AND",
	"AT",
	"BEGINNING",
	"CALENDAR",
	"COLON",
	"COMMA",
	"DATE",
	"DATES",
	"DEC",
	"FROM",
	"GOOGLE",
	"ICS",
	"IN",
	"LPAREN",
	"OF",
	"ON",
	"ORD_IND",
	"PART",
	"P",
	"PM",
	"PERIOD",
	"QUO",
	"RPAREN",
	"SAVE",
	"SEMICOLON",
	"SUB",
	"THROUGH",
	"T",
	"TH",
	"THE",
	"TILL",
	"TIME",
	"TO",
	"UNTIL",
	"WHEN",
	"Z",
	"IDENT",
	"INT",
	"MONTH_NAME",
	"TIME_NAME",
	"TIME_ZONE",
	"TIME_ZONE_ABBREV",
	"RELATIVE_DAY",
	"WEEKDAY_NAME",
	"YEAR",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 18,
	17, 148,
	34, 148,
	35, 148,
	39, 148,
	41, 148,
	42, 148,
	46, 148,
	47, 148,
	-2, 173,
	-1, 19,
	13, 134,
	14, 134,
	15, 134,
	24, 134,
	37, 134,
	40, 134,
	46, 134,
	47, 134,
	51, 134,
	52, 134,
	53, 134,
	-2, 167,
	-1, 39,
	10, 185,
	18, 185,
	48, 185,
	-2, 138,
	-1, 40,
	10, 184,
	18, 184,
	48, 184,
	-2, 137,
	-1, 90,
	27, 103,
	49, 103,
	50, 103,
	-2, 74,
	-1, 144,
	9, 144,
	14, 144,
	17, 144,
	29, 144,
	30, 144,
	46, 144,
	-2, 165,
	-1, 172,
	1, 48,
	9, 48,
	12, 48,
	14, 48,
	19, 48,
	20, 48,
	-2, 95,
	-1, 188,
	10, 69,
	18, 69,
	24, 69,
	40, 69,
	46, 69,
	48, 69,
	-2, 80,
	-1, 225,
	9, 145,
	14, 145,
	29, 145,
	30, 145,
	-2, 73,
	-1, 230,
	1, 49,
	9, 49,
	12, 49,
	14, 49,
	19, 49,
	20, 49,
	-2, 100,
}

const yyPrivate = 57344

const yyLast = 761

var yyAct = [...]int16{
	28, 221, 179, 196, 231, 142, 109, 60, 114, 14,
	15, 76, 96, 141, 86, 98, 7, 8, 115, 85,
	113, 37, 17, 57, 58, 95, 12, 132, 132, 61,
	17, 30, 61, 112, 127, 61, 37, 129, 137, 143,
	160, 67, 37, 93, 170, 311, 31, 145, 296, 50,
	295, 182, 183, 41, 77, 101, 84, 4, 155, 146,
	147, 277, 134, 162, 273, 91, 92, 272, 102, 61,
	17, 79, 103, 17, 104, 30, 185, 249, 135, 248,
	209, 207, 60, 37, 76, 17, 132, 172, 174, 27,
	31, 37, 201, 195, 178, 174, 180, 19, 181, 153,
	188, 159, 186, 187, 173, 125, 190, 152, 126, 208,
	45, 177, 191, 149, 246, 193, 236, 133, 6, 206,
	35, 6, 198, 6, 36, 62, 64, 160, 74, 110,
	194, 81, 76, 51, 60, 131, 10, 76, 52, 10,
	78, 10, 23, 99, 100, 128, 204, 101, 297, 83,
	65, 130, 276, 203, 68, 151, 80, 224, 275, 250,
	102, 197, 150, 136, 103, 163, 104, 81, 223, 227,
	156, 69, 70, 24, 140, 108, 71, 158, 72, 73,
	217, 215, 132, 203, 232, 83, 139, 230, 122, 111,
	37, 26, 235, 168, 171, 239, 88, 191, 47, 123,
	157, 176, 243, 161, 240, 46, 48, 184, 166, 222,
	226, 124, 9, 254, 255, 237, 242, 159, 166, 59,
	63, 260, 66, 75, 13, 166, 82, 217, 251, 241,
	238, 49, 132, 169, 223, 143, 270, 269, 203, 5,
	144, 3, 180, 145, 268, 227, 223, 271, 44, 200,
	205, 148, 278, 32, 200, 146, 147, 281, 282, 38,
	138, 203, 82, 22, 0, 0, 0, 106, 292, 132,
	63, 285, 66, 107, 210, 222, 294, 214, 164, 235,
	165, 203, 219, 220, 191, 16, 2, 167, 302, 105,
	139, 56, 55, 0, 175, 97, 75, 25, 303, 312,
	166, 314, 0, 0, 0, 317, 318, 319, 320, 321,
	322, 11, 316, 0, 324, 54, 325, 244, 1, 191,
	264, 0, 53, 0, 264, 326, 0, 0, 0, 253,
	328, 331, 0, 257, 330, 310, 0, 0, 329, 0,
	303, 0, 0, 0, 199, 143, 0, 0, 0, 199,
	170, 0, 202, 145, 0, 0, 0, 169, 262, 258,
	247, 264, 265, 166, 264, 146, 147, 166, 94, 87,
	211, 212, 213, 0, 93, 0, 216, 218, 0, 166,
	286, 189, 228, 289, 229, 0, 267, 0, 293, 233,
	143, 89, 234, 279, 0, 170, 91, 92, 145, 288,
	284, 300, 291, 0, 0, 305, 306, 0, 308, 309,
	146, 147, 0, 245, 0, 0, 0, 143, 0, 315,
	0, 299, 170, 216, 252, 225, 0, 256, 17, 66,
	63, 0, 259, 0, 261, 263, 0, 146, 147, 266,
	0, 0, 69, 70, 327, 68, 0, 71, 0, 72,
	73, 166, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 37, 69, 70, 0, 30, 280, 71, 143, 72,
	73, 283, 0, 170, 61, 287, 145, 0, 290, 38,
	31, 0, 42, 43, 41, 0, 68, 106, 146, 147,
	0, 0, 298, 40, 0, 0, 0, 301, 0, 304,
	0, 0, 307, 69, 70, 61, 30, 0, 71, 39,
	72, 73, 313, 0, 0, 97, 17, 25, 0, 0,
	27, 31, 37, 323, 38, 33, 0, 42, 43, 41,
	0, 0, 34, 0, 0, 0, 0, 0, 40, 0,
	20, 0, 0, 51, 38, 33, 21, 42, 154, 41,
	0, 30, 34, 0, 39, 0, 0, 29, 40, 0,
	18, 17, 25, 0, 0, 27, 31, 37, 0, 0,
	0, 30, 0, 0, 39, 116, 0, 117, 0, 0,
	18, 17, 25, 120, 122, 27, 31, 37, 38, 33,
	0, 42, 43, 41, 0, 123, 34, 118, 119, 121,
	0, 0, 40, 0, 0, 38, 33, 124, 42, 43,
	41, 0, 0, 34, 0, 30, 0, 0, 39, 40,
	0, 29, 0, 0, 18, 17, 25, 0, 0, 27,
	31, 37, 30, 68, 0, 39, 0, 0, 42, 43,
	41, 18, 17, 25, 0, 0, 27, 31, 37, 134,
	69, 70, 0, 0, 0, 71, 0, 72, 73, 0,
	0, 0, 30, 68, 0, 135, 0, 94, 87, 0,
	0, 0, 17, 93, 0, 0, 27, 31, 37, 0,
	90, 70, 68, 0, 0, 71, 0, 72, 73, 0,
	89, 0, 0, 0, 38, 91, 92, 99, 100, 69,
	70, 101, 106, 0, 71, 0, 72, 73, 107, 68,
	0, 61, 17, 116, 102, 117, 0, 0, 103, 0,
	104, 120, 0, 0, 105, 0, 69, 70, 0, 0,
	97, 71, 25, 72, 73, 118, 119, 192, 61, 143,
	0, 0, 0, 0, 144, 0, 0, 145, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	147,
}

var yyPact = [...]int16{
	514, 186, 124, 514, -1000, 578, -11, 23, -25, 692,
	-17, -1000, 616, 595, 646, 684, -1000, 115, 570, -1000,
	59, 70, -1000, -1000, 249, -1000, 625, 625, 226, -1000,
	-1000, -1000, 77, -1000, -1000, -1000, -1000, -1000, -1000, 149,
	-1000, -1000, -1000, -1000, 186, -1000, -1000, -1000, -1000, 534,
	-1000, -1000, -1000, 186, -1000, 124, -1000, -11, 161, 665,
	113, 174, -32, -1000, 156, -14, -1000, 692, -1000, -1000,
	-1000, -1000, -1000, -1000, -14, 381, 26, 469, -1000, -1000,
	-1000, -11, 616, -17, 469, 38, 36, 16, 16, -1000,
	-1000, -1000, -1000, -1000, -1000, 347, 684, 708, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 149, -1000, -1000, 115, -1000,
	-1000, 174, -1000, -1000, 47, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 148, 106, -1000, -1000, -1000,
	-1000, -17, 730, -32, -1000, -1000, -17, -1000, 46, 459,
	113, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 75, 34,
	-1000, -1000, -1000, -1000, -1000, 113, -25, -14, -14, 665,
	-1000, -1000, 113, -14, 23, -25, -1000, 408, 137, 459,
	-1000, -14, 347, -1000, 684, 616, -14, -1000, 347, -14,
	-1000, 38, -1000, -1000, -1000, -1000, 85, -1000, 616, -1000,
	347, -1000, -1000, -1000, -1000, 708, -1000, -1000, 148, 381,
	-14, 80, 336, -1000, -1000, -1000, -1000, 33, 31, 146,
	-14, 23, -32, -32, -14, -25, -14, -14, 616, -14,
	-32, -14, 428, 113, 336, -1000, 428, 113, 336, -1000,
	36, 38, 347, 137, 336, -1000, -1000, 249, 616, -1000,
	21, -1000, -1000, -1000, -32, -32, 18, 459, 145, 139,
	15, -32, 616, -14, 113, 113, -32, -32, -14, 616,
	113, 249, 23, -6, -1000, 23, -6, 30, 38, -1000,
	-25, 347, -1000, -1000, -1000, 4, 2, 135, 113, -14,
	616, 113, 113, -25, -14, 130, -14, -25, -25, -14,
	-25, -25, 113, 616, -1000, -1000, -1000, -1, -32, -14,
	-32, -25, 249, 130, -32, -32, -32, -32, -32, -32,
	692, -1000, 113, -32, 113, -32, -1000, 113, 113, 113,
	113, 113, 113, 336, 113, 113, -25, 130, 249, 347,
	-32, 113,
}

var yyPgo = [...]int16{
	0, 318, 286, 57, 26, 263, 10, 253, 9, 251,
	14, 4, 250, 212, 117, 97, 135, 0, 17, 16,
	248, 241, 311, 3, 110, 239, 231, 140, 1, 2,
	285, 49, 224, 41, 215, 142, 12, 15, 207, 196,
	191, 157, 124, 13, 189, 18, 175, 6, 174, 5,
	173, 33, 20, 8, 120,
}

var yyR1 = [...]int8{
	0, 1, 1, 1, 21, 21, 22, 22, 20, 20,
	24, 24, 24, 23, 23, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 25, 25, 30, 26, 26,
	31, 31, 18, 18, 19, 19, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 32, 32, 35, 35, 34,
	34, 33, 33, 27, 27, 27, 27, 27, 27, 4,
	4, 4, 4, 4, 4, 29, 29, 36, 36, 37,
	37, 37, 37, 37, 37, 11, 11, 11, 11, 11,
	38, 38, 39, 39, 10, 10, 10, 5, 5, 5,
	7, 9, 12, 12, 12, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 40, 40, 42, 42, 42, 42, 42, 42, 28,
	28, 41, 41, 43, 43, 43, 43, 43, 13, 13,
	44, 44, 45, 45, 45, 45, 14, 14, 46, 46,
	47, 17, 17, 48, 48, 49, 16, 16, 15, 15,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 50,
	50, 54, 54, 54, 54, 54, 53, 53, 51, 51,
	52, 52,
}

var yyR2 = [...]int8{
	0, 1, 2, 2, 1, 2, 3, 4, 1, 2,
	1, 1, 1, 0, 1, 1, 2, 3, 2, 2,
	3, 6, 3, 6, 7, 7, 8, 8, 8, 8,
	9, 9, 4, 5, 8, 1, 2, 1, 1, 2,
	1, 1, 1, 1, 2, 2, 1, 2, 3, 4,
	3, 3, 4, 4, 5, 5, 6, 8, 8, 8,
	8, 8, 8, 14, 6, 1, 2, 1, 1, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 4, 3, 4, 1, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 3, 2, 1,
	0, 1, 1, 1, 1, 1, 1, 1, 2, 3,
	5, 6, 1, 4, 4, 2, 1, 2, 2, 4,
	1, 3, 5, 1, 2, 4, 4, 6, 3, 3,
	4, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 0, 1, 1, 1,
	2, 2, 2, 1, 3, 5, 4, 4, 1, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -21, -3, -25, -14, -19, -18, -13,
	-16, -22, -4, -32, -8, -6, -30, 47, 46, -15,
	26, 32, -5, -35, -50, 48, -40, 51, -17, 43,
	37, 52, -7, 11, 18, -54, -42, 53, 10, 40,
	24, 15, 13, 14, -20, -24, 19, 12, 20, -26,
	-31, 9, 14, -1, -22, -2, -30, -19, -18, -13,
	-17, 46, -14, -13, -14, -27, -13, -33, 17, 34,
	35, 39, 41, 42, -14, -13, -17, -33, -27, -3,
	-35, -14, -13, -16, -33, -11, -10, 22, -39, 44,
	34, 49, 50, 27, 21, -8, -36, 46, -37, 13,
	14, 17, 30, 34, 36, 40, 18, 24, -46, -47,
	14, -44, -51, -52, -53, -45, 5, 7, 27, 28,
	13, 29, 14, 25, 37, 46, 38, -8, -54, -6,
	-42, -16, -17, -14, 24, 40, -16, -6, 34, -41,
	-48, -43, -49, 9, 14, 17, 29, 30, -9, 36,
	13, -24, -3, -31, 14, -17, 9, -27, -14, -33,
	14, 29, -17, 9, -13, -13, -27, -13, -14, -41,
	14, -14, -8, -4, -6, -13, -14, -4, -8, -29,
	-6, -36, 13, 14, -38, 40, -10, -10, -11, 34,
	-8, -37, 29, -47, -45, 46, -23, 13, 16, -13,
	-14, 46, -13, -43, -49, -12, 44, 6, 34, 46,
	-14, -13, -13, -13, -14, -18, -13, -19, -13, -14,
	-14, -28, -33, -17, -41, 17, -33, -17, -13, -13,
	-10, -11, -8, -13, -13, -6, 31, -34, -33, -11,
	-53, -51, -52, -23, -14, -13, 34, -41, 46, 46,
	13, -18, -13, -14, -17, -17, -13, -14, -27, -13,
	-17, -13, -16, -13, -15, -16, -13, -41, -36, -11,
	-28, -8, 46, 46, -13, 13, 13, 46, -17, -27,
	-13, -17, -17, -13, -27, -8, -14, -13, -16, -14,
	-13, -16, -17, -14, -11, 46, 46, 13, -13, -27,
	-14, -13, -29, -36, -13, -14, -14, -13, -14, -14,
	-33, 46, -17, -13, -17, -14, -8, -17, -17, -17,
	-17, -17, -17, -13, -17, -17, -28, -14, -29, -8,
	-11, -17,
}

var yyDef = [...]int16{
	0, -2, 1, 0, 15, 0, 123, 0, 0, 42,
	0, 4, 46, 0, 95, 79, 35, 156, -2, -2,
	0, 0, 84, 65, 0, 178, 166, 116, 120, 37,
	168, 169, 107, 67, 68, 179, 131, 161, 181, -2,
	-2, 133, 135, 136, 2, 8, 10, 11, 12, 0,
	38, 40, 41, 3, 4, 16, 35, 18, 0, 42,
	124, 148, 19, 45, 0, 71, 44, 0, 73, 74,
	75, 76, 77, 78, 0, 0, 0, 0, 71, 47,
	65, 123, 0, 0, 0, 85, 100, 0, 0, 99,
	-2, 104, 105, 106, 102, 95, 0, 173, 87, 89,
	90, 91, 92, 93, 94, 185, 183, 184, 157, 158,
	160, 149, 171, 172, 0, 150, 188, 189, 190, 191,
	186, 154, 152, 153, 155, 13, 0, 170, 179, 115,
	131, 0, 120, 123, 137, 138, 117, 118, 0, 0,
	162, 141, 163, 143, -2, 145, 146, 147, 108, 0,
	182, 9, 17, 39, 41, 20, 0, 71, 0, 0,
	165, 154, 22, 0, 0, 0, 72, 128, 129, 0,
	144, 0, -2, 51, 79, 0, 0, 50, 95, 0,
	82, 86, 89, 90, 96, 101, 0, 98, -2, 103,
	95, 88, 187, 159, 151, 174, 6, 14, 13, 0,
	0, 0, 121, 142, 164, 109, 112, 0, 0, 0,
	0, 0, 32, 52, 0, 0, 42, 43, 0, 0,
	53, 0, 166, 125, 140, -2, 166, 126, 119, 130,
	-2, 166, 95, 128, 139, 83, 97, 0, 70, 81,
	0, 176, 177, 7, 129, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 33, 54, 0, 0, 0, 0,
	55, 0, 0, 166, 167, 0, 166, 0, 166, 80,
	0, 95, 175, 110, 122, 0, 0, 0, 21, 0,
	0, 56, 23, 0, 0, 85, 0, 0, 0, 0,
	0, 0, 127, 0, 64, 113, 114, 0, 24, 0,
	25, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 111, 28, 26, 29, 27, 34, 57, 58, 59,
	60, 61, 62, 139, 30, 31, 0, 85, 0, 95,
	0, 63,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeRanges = yyDollar[1].DateTimeRanges
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeRanges = yyDollar[1].DateTimeRanges
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeRanges = yyDollar[2].DateTimeRanges
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeRanges = &DateTimeRanges{Items: []*DateTimeRange{yyDollar[1].DateTimeRange}}
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeRanges = yyDollar[2].DateTimeRanges
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeRanges = AppendDateTimeRanges(yyDollar[1].DateTimeRanges, yyDollar[3].DateTimeRange)
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRangesWithStartDates(NewMDsYDates(yyDollar[1].string, yyDollar[2].strings, nil)...)
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRangesWithStartDates(NewDsMYDates(yyDollar[1].strings, yyDollar[2].string, nil)...)
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRangesWithStartDates(NewMDsYDates(yyDollar[1].string, yyDollar[2].strings, yyDollar[3].string)...)
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRangesWithStartDates(append(NewMDsYDates(yyDollar[1].string, yyDollar[2].strings, yyDollar[6].string), NewMDsYDates(yyDollar[4].string, yyDollar[5].strings, yyDollar[6].string)...)...)
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRangesWithStartDates(NewDsMYDates(yyDollar[1].strings, yyDollar[2].string, yyDollar[3].string)...)
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRangesWithStartDates(append(NewDsMYDates(yyDollar[1].strings, yyDollar[2].string, yyDollar[6].string), NewDsMYDates(yyDollar[4].strings, yyDollar[5].string, yyDollar[6].string)...)...)
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[4].string, nil)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[5].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[7].string, nil)))
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[7].string, nil), NewDMYDate(yyDollar[3].string, yyDollar[7].string, nil)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[4].string, yyDollar[7].string, nil), NewDMYDate(yyDollar[6].string, yyDollar[7].string, nil)))
		}
	case 26:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[4].string, nil)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[5].string, yyDollar[6].string, nil), NewMDYDate(yyDollar[5].string, yyDollar[8].string, nil)))
		}
	case 27:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, nil), NewDMYDate(yyDollar[3].string, yyDollar[4].string, nil)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[5].string, yyDollar[8].string, nil), NewDMYDate(yyDollar[7].string, yyDollar[8].string, nil)))
		}
	case 28:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[8].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[8].string)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[5].string, yyDollar[8].string), NewMDYDate(yyDollar[1].string, yyDollar[7].string, yyDollar[8].string)))
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[7].string, yyDollar[8].string), NewDMYDate(yyDollar[3].string, yyDollar[7].string, yyDollar[8].string)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[4].string, yyDollar[7].string, yyDollar[8].string), NewDMYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string)))
		}
	case 30:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[9].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[9].string)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[5].string, yyDollar[6].string, yyDollar[9].string), NewMDYDate(yyDollar[5].string, yyDollar[8].string, yyDollar[9].string)))
		}
	case 31:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[9].string), NewDMYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[9].string)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[5].string, yyDollar[8].string, yyDollar[9].string), NewDMYDate(yyDollar[7].string, yyDollar[8].string, yyDollar[9].string)))
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStart(NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil)), NewRangeWithStart(NewMDYDate(yyDollar[3].string, yyDollar[4].string, nil)))
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStart(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string)), NewRangeWithStart(NewMDYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[5].string)))
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRange(NewDateTime(NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, nil), yyDollar[6].Time, nil), NewDateTime(NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, nil), yyDollar[8].Time, nil)), NewRange(NewDateTime(NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string, nil), yyDollar[6].Time, nil), NewDateTime(NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string, nil), yyDollar[8].Time, nil)))
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.strings = []string{yyDollar[1].string}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.strings = []string{yyDollar[1].string, yyDollar[2].string}
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.strings = append(yyDollar[1].strings, yyDollar[2].string)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeRange = &DateTimeRange{Start: yyDollar[1].DateTime}
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeRange = yyDollar[2].DateTimeRange
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRange(yyDollar[1].DateTime, NewDateTime(yyDollar[1].DateTime.Date, yyDollar[3].Time, yyDollar[1].DateTime.TimeZone))
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRange(NewDateTime(yyDollar[1].DateTime.Date, yyDollar[1].DateTime.Time, yyDollar[4].TimeZone), NewDateTime(yyDollar[1].DateTime.Date, yyDollar[3].Time, yyDollar[4].TimeZone))
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRange(NewDateTime(yyDollar[3].DateTime.Date, yyDollar[1].Time, yyDollar[3].DateTime.TimeZone), yyDollar[3].DateTime)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeRange = &DateTimeRange{Start: yyDollar[1].DateTime, End: yyDollar[3].DateTime}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[4].string, nil))
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, nil), NewDMYDate(yyDollar[3].string, yyDollar[4].string, nil))
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[5].string))
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[5].string), NewDMYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[5].string))
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[6].string), NewMDYDate(yyDollar[4].string, yyDollar[5].string, yyDollar[6].string))
		}
	case 57:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRangeWithStartEndDates(NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewWMDYDate(yyDollar[5].string, yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 58:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRangeWithStartEndDates(NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewWDMYDate(yyDollar[5].string, yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRangeWithStartEndDates(NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewWDMYDate(yyDollar[6].string, yyDollar[5].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRangeWithStartEndDates(NewWDMYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewWMDYDate(yyDollar[5].string, yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 61:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRangeWithStartEndDates(NewWDMYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewWDMYDate(yyDollar[5].string, yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 62:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRangeWithStartEndDates(NewWDMYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewWDMYDate(yyDollar[6].string, yyDollar[5].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 63:
		yyDollar = yyS[yypt-14 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRange(NewDateTime(NewDMYDate(yyDollar[4].string, yyDollar[6].string, yyDollar[14].string), yyDollar[1].Time, yyDollar[2].TimeZone), NewDateTime(NewDMYDate(yyDollar[8].string, yyDollar[10].string, yyDollar[14].string), yyDollar[12].Time, yyDollar[13].TimeZone))
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRange(NewDateTime(yyDollar[1].Date, yyDollar[2].Time, yyDollar[3].TimeZone), NewDateTime(yyDollar[1].Date, yyDollar[5].Time, yyDollar[6].TimeZone))
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTime = NewDateTimeWithDate(yyDollar[1].Date, nil)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTime = NewDateTime(yyDollar[1].Date, yyDollar[2].Time, yyDollar[3].TimeZone)
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTime = NewDateTime(yyDollar[1].Date, yyDollar[3].Time, yyDollar[4].TimeZone)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTime = NewDateTime(yyDollar[3].Date, yyDollar[1].Time, yyDollar[2].TimeZone)
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTime = NewDateTime(yyDollar[4].Date, yyDollar[1].Time, yyDollar[2].TimeZone)
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.TimeZone = nil
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.TimeZone = yyDollar[1].TimeZone
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.TimeZone = yyDollar[2].TimeZone
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.TimeZone = yyDollar[2].TimeZone
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = nil
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(yyDollar[1].string, nil, nil)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(nil, yyDollar[1].string, nil)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(nil, "P", nil)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTime = NewDateTimeWithDate(yyDollar[1].Date, nil)
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTime = NewDateTime(yyDollar[1].Date, yyDollar[2].Time, nil)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTime = NewDateTime(yyDollar[1].Date, yyDollar[2].Time, yyDollar[3].TimeZone)
		}
	case 110:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[5].string, yyDollar[3].string, yyDollar[1].string)
		}
	case 111:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[2].string, yyDollar[4].string, yyDollar[6].string, nil)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = nil
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(nil, nil, "+"+yyDollar[2].string+":"+yyDollar[4].string)
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(nil, nil, "-"+yyDollar[2].string+":"+yyDollar[4].string)
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = yyDollar[2].Date
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewRelativeDate(yyDollar[1].string)
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = NewRelativeDate(yyDollar[1].string)
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = yyDollar[2].Date
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Date = NewAmbiguousDate(yyDollar[1].string, yyDollar[2].string, yyDollar[4].string, nil)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(nil, nil, yyDollar[1].string)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(nil, yyDollar[3].string, yyDollar[1].string)
		}
	case 122:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[5].string, yyDollar[3].string, yyDollar[1].string)
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, nil, nil)
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, nil, yyDollar[2].string)
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Date = NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[4].string)
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Date = NewWDMYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[4].string)
		}
	case 127:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.Date = NewAmbiguousDate(yyDollar[1].string, yyDollar[2].string, yyDollar[4].string, yyDollar[6].string)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, nil)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewWDMYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, nil)
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Date = NewWDMYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[3].string, yyDollar[2].string)
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = ""
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = "TH"
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = yyDollar[2].Time
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = NewAMTime(yyDollar[1].string, nil, nil, nil)
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = NewPMTime(yyDollar[1].string, nil, nil, nil)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, nil, nil, nil)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, yyDollar[3].string, nil, nil)
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, yyDollar[3].string, yyDollar[5].string, nil)
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Time = NewAMTime(yyDollar[1].string, yyDollar[3].string, nil, nil)
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Time = NewPMTime(yyDollar[1].string, yyDollar[3].string, nil, nil)
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, nil, nil, nil)
		}
	}
	goto yystack /* stack new state and value */
}
