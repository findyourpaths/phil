// Code generated by goyacc -l -o parse_yacc.go -v parse_yacc.states.txt parse_yacc.y. DO NOT EDIT.
package datetime

import __yyfmt__ "fmt"

type yySymType struct {
	yys              int
	DateTimeTZRanges *DateTimeTZRanges
	DateTimeTZRange  *DateTimeTZRange
	DateTimeTZ       *DateTimeTZ
	Date             *Date
	Time             *Time
	TimeZone         *TimeZone
	string           string
	strings          []string
}

const ILLEGAL = 57346
const ADD = 57347
const AM = 57348
const AMP = 57349
const AND = 57350
const AT = 57351
const BEGINNING = 57352
const CALENDAR = 57353
const COLON = 57354
const COMMA = 57355
const DATE = 57356
const DATES = 57357
const DEC = 57358
const FROM = 57359
const GOOGLE = 57360
const ICS = 57361
const IN = 57362
const LPAREN = 57363
const OF = 57364
const ON = 57365
const ORD_IND = 57366
const PART = 57367
const PM = 57368
const PERIOD = 57369
const QUO = 57370
const RPAREN = 57371
const SAVE = 57372
const SEMICOLON = 57373
const SUB = 57374
const THROUGH = 57375
const T = 57376
const TH = 57377
const THE = 57378
const TILL = 57379
const TIME = 57380
const TO = 57381
const UNTIL = 57382
const WHEN = 57383
const Z = 57384
const IDENT = 57385
const INT = 57386
const MONTH_NAME = 57387
const TIME_NAME = 57388
const TIME_ZONE = 57389
const TIME_ZONE_ABBREV = 57390
const WEEKDAY_NAME = 57391
const YEAR = 57392

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ILLEGAL",
	"ADD",
	"AM",
	"AMP",
	"AND",
	"AT",
	"BEGINNING",
	"CALENDAR",
	"COLON",
	"COMMA",
	"DATE",
	"DATES",
	"DEC",
	"FROM",
	"GOOGLE",
	"ICS",
	"IN",
	"LPAREN",
	"OF",
	"ON",
	"ORD_IND",
	"PART",
	"PM",
	"PERIOD",
	"QUO",
	"RPAREN",
	"SAVE",
	"SEMICOLON",
	"SUB",
	"THROUGH",
	"T",
	"TH",
	"THE",
	"TILL",
	"TIME",
	"TO",
	"UNTIL",
	"WHEN",
	"Z",
	"IDENT",
	"INT",
	"MONTH_NAME",
	"TIME_NAME",
	"TIME_ZONE",
	"TIME_ZONE_ABBREV",
	"WEEKDAY_NAME",
	"YEAR",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 18,
	16, 142,
	32, 142,
	33, 142,
	37, 142,
	39, 142,
	40, 142,
	44, 142,
	45, 142,
	-2, 170,
	-1, 38,
	9, 179,
	17, 179,
	46, 179,
	-2, 129,
	-1, 39,
	9, 181,
	17, 181,
	46, 181,
	-2, 131,
	-1, 40,
	9, 182,
	17, 182,
	46, 182,
	-2, 132,
	-1, 85,
	47, 101,
	48, 101,
	-2, 73,
	-1, 136,
	13, 137,
	16, 137,
	27, 137,
	28, 137,
	32, 137,
	44, 137,
	-2, 162,
	-1, 161,
	1, 47,
	8, 47,
	11, 47,
	13, 47,
	18, 47,
	19, 47,
	-2, 93,
	-1, 179,
	1, 79,
	8, 79,
	11, 79,
	13, 79,
	18, 79,
	19, 79,
	-2, 68,
	-1, 213,
	1, 48,
	8, 48,
	11, 48,
	13, 48,
	18, 48,
	19, 48,
	-2, 94,
}

const yyPrivate = 57344

const yyLast = 701

var yyAct = [...]int16{
	127, 6, 167, 214, 6, 221, 6, 134, 61, 63,
	13, 252, 96, 77, 135, 90, 187, 80, 94, 112,
	36, 66, 111, 7, 106, 156, 93, 25, 81, 8,
	56, 36, 60, 73, 120, 79, 57, 132, 36, 11,
	201, 33, 15, 17, 60, 17, 148, 125, 14, 77,
	36, 14, 36, 14, 67, 34, 86, 87, 60, 151,
	14, 297, 146, 60, 17, 284, 4, 155, 133, 123,
	68, 69, 49, 33, 153, 70, 283, 71, 72, 75,
	152, 266, 60, 262, 161, 261, 238, 34, 237, 200,
	166, 192, 174, 178, 186, 176, 14, 179, 137, 169,
	133, 118, 119, 44, 141, 181, 17, 182, 198, 138,
	139, 171, 172, 162, 177, 143, 163, 235, 219, 165,
	67, 144, 163, 168, 89, 88, 191, 17, 185, 175,
	184, 46, 32, 133, 35, 199, 85, 69, 45, 47,
	194, 70, 189, 71, 72, 197, 84, 142, 195, 230,
	202, 86, 87, 206, 153, 113, 121, 109, 9, 211,
	212, 124, 107, 113, 285, 58, 62, 133, 65, 231,
	183, 78, 157, 91, 215, 265, 67, 110, 183, 50,
	223, 209, 182, 194, 51, 228, 152, 207, 133, 264,
	213, 233, 68, 69, 23, 220, 222, 70, 239, 71,
	72, 227, 89, 88, 242, 188, 232, 78, 246, 229,
	243, 244, 217, 149, 180, 62, 195, 65, 249, 251,
	105, 22, 108, 158, 84, 159, 209, 26, 175, 86,
	87, 236, 240, 250, 76, 16, 164, 260, 10, 223,
	83, 55, 53, 1, 194, 218, 267, 52, 256, 173,
	256, 270, 271, 274, 253, 275, 82, 168, 278, 226,
	115, 194, 259, 182, 282, 281, 2, 194, 254, 74,
	257, 116, 54, 288, 154, 12, 48, 292, 293, 64,
	295, 296, 117, 256, 190, 5, 256, 3, 43, 196,
	301, 193, 298, 217, 300, 140, 290, 303, 304, 305,
	306, 307, 308, 277, 29, 309, 280, 310, 21, 203,
	204, 205, 312, 0, 311, 313, 208, 210, 0, 0,
	317, 0, 0, 318, 316, 0, 216, 182, 150, 0,
	67, 314, 0, 0, 224, 0, 160, 225, 0, 0,
	253, 176, 0, 160, 137, 0, 68, 69, 0, 160,
	234, 70, 0, 71, 72, 138, 139, 0, 156, 0,
	177, 208, 241, 0, 36, 245, 0, 65, 62, 67,
	248, 0, 156, 0, 0, 0, 147, 27, 36, 255,
	27, 258, 27, 59, 0, 68, 69, 0, 0, 27,
	70, 92, 71, 72, 0, 263, 0, 60, 17, 0,
	0, 269, 0, 126, 0, 0, 272, 37, 30, 0,
	38, 42, 41, 276, 0, 31, 279, 0, 0, 0,
	0, 39, 160, 19, 0, 27, 176, 286, 20, 137,
	0, 0, 289, 33, 291, 0, 40, 294, 0, 28,
	138, 139, 18, 17, 24, 177, 299, 34, 36, 302,
	27, 0, 0, 0, 59, 0, 27, 126, 37, 0,
	0, 38, 42, 41, 0, 67, 102, 0, 0, 0,
	0, 37, 39, 0, 122, 0, 0, 0, 0, 102,
	247, 68, 69, 0, 33, 103, 70, 40, 71, 72,
	160, 0, 160, 95, 17, 24, 0, 160, 34, 36,
	104, 0, 92, 0, 59, 0, 95, 0, 24, 315,
	0, 268, 0, 98, 0, 50, 37, 30, 273, 38,
	145, 41, 0, 0, 31, 99, 0, 0, 0, 100,
	39, 101, 0, 37, 30, 0, 38, 42, 41, 287,
	0, 31, 33, 109, 0, 40, 126, 39, 0, 113,
	115, 18, 17, 24, 0, 0, 34, 36, 0, 33,
	160, 116, 40, 110, 114, 28, 0, 0, 18, 17,
	24, 0, 117, 34, 36, 37, 30, 0, 38, 42,
	41, 0, 0, 31, 0, 0, 0, 0, 0, 39,
	0, 126, 0, 0, 0, 0, 0, 0, 170, 42,
	41, 33, 98, 0, 40, 0, 128, 42, 41, 129,
	18, 17, 24, 0, 99, 34, 36, 129, 100, 0,
	101, 33, 0, 0, 130, 0, 0, 126, 0, 33,
	0, 17, 130, 0, 37, 34, 36, 97, 0, 17,
	0, 98, 102, 34, 36, 0, 0, 0, 103, 67,
	0, 0, 0, 99, 0, 0, 0, 100, 0, 101,
	0, 176, 0, 104, 137, 68, 69, 0, 0, 95,
	70, 24, 71, 72, 0, 138, 139, 60, 0, 136,
	177, 136, 137, 0, 137, 0, 0, 0, 0, 0,
	0, 0, 60, 138, 139, 138, 139, 0, 177, 0,
	131,
}

var yyPact = [...]int16{
	398, 120, 171, 398, -1000, 524, -12, 19, -2, 633,
	-1000, 160, 566, 104, 0, 625, -1000, 149, 537, 57,
	66, -1000, -1000, 462, -1000, -1000, 594, 668, -1000, 70,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 120, -1000, -1000, -1000, -1000, 507, -1000,
	-1000, -1000, 120, -1000, 171, -1000, 2, 205, 353, 141,
	247, -19, -1000, 164, 14, -1000, 633, -1000, -1000, -1000,
	-1000, -1000, -1000, 449, -1000, -1000, -1000, -12, 160, 449,
	586, -1000, 9, 9, -1000, -1000, -1000, -1000, -1000, -1000,
	14, 82, 61, 182, 625, 151, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 149, -1000, -1000, 247, -1000,
	-1000, 50, -1000, -1000, -1000, -1000, -1000, -1000, 193, 127,
	-1000, -1000, -1000, -1000, -1000, 0, 666, -30, -1000, -1000,
	-1000, 47, 648, 141, -1000, -1000, -1000, -1000, -1000, -1000,
	103, 45, -1000, -1000, -1000, -1000, 141, 141, 247, -2,
	14, 14, 353, -1000, -1000, 141, -1000, 14, 19, -2,
	-1000, 182, -1000, 625, 160, -1000, 182, 14, -1000, 586,
	-1000, 89, -1000, 314, 314, 648, -1000, -1000, 14, 160,
	-1000, 182, -1000, -1000, -1000, -1000, 143, -1000, -1000, 193,
	82, 14, 85, 413, -1000, -1000, -1000, -1000, 44, 42,
	186, 141, 14, 19, -19, -19, 14, -2, 14, 14,
	160, 14, -19, -1000, 586, 182, 413, -1000, -1000, -1000,
	38, 141, 38, 141, 413, -1000, 462, 160, -1000, 41,
	-1000, -1000, -1000, -19, -19, 39, 648, 177, 163, 37,
	-19, 160, 14, 141, 141, -19, -19, 14, 160, 141,
	586, -1000, -2, 413, 19, 6, -1000, 19, 6, 328,
	182, -1000, -1000, -1000, 32, 21, 152, 141, 14, 160,
	141, 141, -2, 14, 160, 14, -2, -2, 14, -2,
	-2, 141, -1000, -1000, -1000, 17, -19, 14, -19, -2,
	633, -19, -19, -19, -19, -19, -19, -1000, 141, -19,
	141, -19, 413, 141, 141, 141, 141, 141, 141, 141,
	141, -2, 497, 462, 497, -1000, 182, -19, 141,
}

var yyPgo = [...]int16{
	0, 243, 266, 66, 39, 308, 42, 304, 10, 295,
	28, 3, 289, 158, 376, 0, 27, 47, 5, 29,
	23, 288, 287, 238, 16, 103, 285, 276, 269, 235,
	72, 275, 21, 2, 11, 259, 221, 18, 12, 256,
	245, 240, 227, 37, 134, 7, 222, 19, 220, 24,
	40, 14, 194, 22, 132,
}

var yyR1 = [...]int8{
	0, 1, 1, 1, 22, 22, 23, 23, 21, 21,
	25, 25, 25, 24, 24, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 26, 26, 29, 27, 27, 30,
	30, 19, 19, 20, 20, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 31, 31, 36, 36, 35, 35,
	32, 32, 28, 28, 28, 28, 28, 28, 4, 4,
	4, 4, 4, 4, 33, 33, 37, 37, 38, 38,
	38, 38, 38, 11, 11, 11, 11, 11, 39, 40,
	41, 41, 10, 10, 5, 5, 5, 7, 9, 12,
	12, 12, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 42, 42, 44, 44, 44,
	44, 44, 44, 34, 34, 43, 43, 45, 45, 45,
	45, 45, 13, 13, 46, 46, 47, 47, 47, 47,
	15, 15, 48, 48, 49, 14, 14, 18, 18, 18,
	50, 50, 51, 17, 17, 16, 16, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 52, 52, 54, 54,
	54, 54, 54, 53, 53,
}

var yyR2 = [...]int8{
	0, 1, 2, 2, 1, 2, 3, 4, 1, 2,
	1, 1, 1, 0, 1, 1, 2, 3, 2, 2,
	3, 6, 3, 6, 7, 7, 8, 8, 8, 8,
	9, 9, 4, 5, 1, 2, 1, 1, 2, 1,
	1, 1, 1, 2, 2, 1, 2, 3, 4, 3,
	3, 4, 4, 5, 5, 6, 8, 8, 8, 8,
	8, 8, 14, 6, 1, 2, 1, 1, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 3, 4, 1, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 0, 1, 3, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 5, 6, 1,
	4, 4, 2, 4, 1, 3, 5, 1, 2, 4,
	4, 6, 3, 3, 4, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 1, 2,
	1, 2, 1, 0, 1, 1, 1, 2, 2, 2,
	1, 3, 5, 4, 4, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -22, -3, -26, -15, -20, -19, -13,
	-23, -4, -31, -8, -17, -6, -29, 45, 44, 25,
	30, -5, -36, -52, 46, -16, -42, -14, 41, -7,
	10, 17, -54, 35, 49, -44, 50, 9, 12, 23,
	38, 14, 13, -21, -25, 18, 11, 19, -27, -30,
	8, 13, -1, -23, -2, -29, -20, -19, -13, -14,
	44, -15, -13, -15, -28, -13, -32, 16, 32, 33,
	37, 39, 40, -32, -28, -3, -36, -15, -13, -32,
	-11, -10, -39, -41, 42, 32, 47, 48, 21, 20,
	-15, -13, -14, -8, -37, 44, -38, 12, 16, 28,
	32, 34, 17, 23, 38, -48, -49, 13, -46, 6,
	26, -53, -47, 12, 27, 13, 24, 35, 44, 36,
	-8, -54, 12, -6, -44, -17, -14, -15, 12, 23,
	38, 32, -43, -50, -45, -51, 13, 16, 27, 28,
	-9, 34, -25, -3, -30, 13, -18, -14, 44, 8,
	-28, -15, -32, 13, 27, -18, 44, 8, -13, -13,
	-28, -8, -4, -6, -13, -4, -8, -33, -6, -37,
	12, -10, -10, -13, -15, -43, 13, 32, -15, -11,
	32, -8, -38, 27, -49, -47, 44, -24, 12, 15,
	-13, -15, 44, -13, -45, -51, -12, 42, 5, 32,
	44, -50, -15, -13, -13, -13, -15, -19, -13, -20,
	-13, -15, -15, -10, -11, -8, -13, -6, -40, 29,
	-32, -18, -32, -18, -13, -13, -35, -32, -11, -53,
	6, 26, -24, -15, -13, 32, -43, 44, 44, 12,
	-19, -13, -15, -18, -18, -13, -15, -28, -13, -18,
	-37, -11, -34, -43, -17, -13, -16, -17, -13, -43,
	-8, 44, 44, -13, 12, 12, 44, -18, -28, -13,
	-18, -18, -13, -28, -15, -15, -13, -17, -15, -13,
	-17, -18, -11, 44, 44, 12, -13, -28, -15, -13,
	-32, -13, -15, -15, -13, -15, -15, 44, -18, -13,
	-18, -15, -13, -18, -18, -18, -18, -18, -18, -18,
	-18, -34, -15, -33, -37, 12, -8, -11, -18,
}

var yyDef = [...]int16{
	0, -2, 1, 0, 15, 0, 117, 0, 0, 41,
	4, 45, 0, 93, 0, 78, 34, 150, -2, 0,
	0, 83, 64, 0, 175, 128, 163, 114, 36, 104,
	66, 67, 176, 165, 166, 125, 155, 178, -2, -2,
	-2, 127, 130, 2, 8, 10, 11, 12, 0, 37,
	39, 40, 3, 4, 16, 34, 18, 0, 41, 118,
	142, 19, 44, 0, 70, 43, 0, 72, 73, 74,
	75, 76, 77, 0, 70, 46, 64, 117, 0, 0,
	84, 94, 0, 0, 97, -2, 102, 103, 98, 100,
	0, 0, 0, 93, 0, 170, 86, 88, 89, 90,
	91, 92, 180, 181, 182, 151, 152, 154, 143, 168,
	169, 0, 144, 183, 148, 146, 147, 149, 13, 0,
	167, 176, 179, 112, 125, 0, 114, 117, 129, 131,
	132, 140, 0, 156, 135, 160, -2, 138, 139, 141,
	105, 0, 9, 17, 38, 40, 20, 157, 142, 0,
	70, 0, 0, 162, 148, 22, 158, 0, 0, 0,
	71, -2, 50, 78, 0, 49, 93, 0, 81, 85,
	88, 0, 96, 122, 123, 0, 137, 140, 0, -2,
	101, 93, 87, 184, 153, 145, 171, 6, 14, 13,
	0, 0, 0, 115, 136, 161, 106, 109, 0, 0,
	0, 159, 0, 0, 32, 51, 0, 0, 41, 42,
	0, 0, 52, -2, 163, 93, 133, 82, 95, 99,
	163, 119, 163, 120, 113, 124, 0, 69, 80, 0,
	173, 174, 7, 123, 122, 0, 0, 0, 0, 0,
	0, 0, 0, 33, 53, 0, 0, 0, 0, 54,
	163, 79, 0, 134, 0, 163, 164, 0, 163, 0,
	93, 172, 107, 116, 0, 0, 0, 21, 0, 0,
	55, 23, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 63, 110, 111, 0, 24, 0, 25, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 28, 26,
	29, 27, 133, 56, 57, 58, 59, 60, 61, 30,
	31, 0, 84, 0, 85, 88, 93, 0, 62,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = yyDollar[1].DateTimeTZRanges
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = yyDollar[1].DateTimeTZRanges
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = yyDollar[2].DateTimeTZRanges
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = &DateTimeTZRanges{Items: []*DateTimeTZRange{yyDollar[1].DateTimeTZRange}}
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = yyDollar[2].DateTimeTZRanges
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = AppendDateTimeTZRanges(yyDollar[1].DateTimeTZRanges, yyDollar[3].DateTimeTZRange)
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewMDsYDates(yyDollar[1].string, yyDollar[2].strings, nil)...)
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewDsMYDates(yyDollar[1].strings, yyDollar[2].string, nil)...)
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewMDsYDates(yyDollar[1].string, yyDollar[2].strings, yyDollar[3].string)...)
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(append(NewMDsYDates(yyDollar[1].string, yyDollar[2].strings, yyDollar[6].string), NewMDsYDates(yyDollar[4].string, yyDollar[5].strings, yyDollar[6].string)...)...)
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewDsMYDates(yyDollar[1].strings, yyDollar[2].string, yyDollar[3].string)...)
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(append(NewDsMYDates(yyDollar[1].strings, yyDollar[2].string, yyDollar[6].string), NewDsMYDates(yyDollar[4].strings, yyDollar[5].string, yyDollar[6].string)...)...)
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[4].string, nil)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[5].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[7].string, nil)))
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[7].string, nil), NewDMYDate(yyDollar[3].string, yyDollar[7].string, nil)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[4].string, yyDollar[7].string, nil), NewDMYDate(yyDollar[6].string, yyDollar[7].string, nil)))
		}
	case 26:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[4].string, nil)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[5].string, yyDollar[6].string, nil), NewMDYDate(yyDollar[5].string, yyDollar[8].string, nil)))
		}
	case 27:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, nil), NewDMYDate(yyDollar[3].string, yyDollar[4].string, nil)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[5].string, yyDollar[8].string, nil), NewDMYDate(yyDollar[7].string, yyDollar[8].string, nil)))
		}
	case 28:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[8].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[8].string)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[5].string, yyDollar[8].string), NewMDYDate(yyDollar[1].string, yyDollar[7].string, yyDollar[8].string)))
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[7].string, yyDollar[8].string), NewDMYDate(yyDollar[3].string, yyDollar[7].string, yyDollar[8].string)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[4].string, yyDollar[7].string, yyDollar[8].string), NewDMYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string)))
		}
	case 30:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[9].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[9].string)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[5].string, yyDollar[6].string, yyDollar[9].string), NewMDYDate(yyDollar[5].string, yyDollar[8].string, yyDollar[9].string)))
		}
	case 31:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[9].string), NewDMYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[9].string)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[5].string, yyDollar[8].string, yyDollar[9].string), NewDMYDate(yyDollar[7].string, yyDollar[8].string, yyDollar[9].string)))
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStart(NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil)), NewRangeWithStart(NewMDYDate(yyDollar[3].string, yyDollar[4].string, nil)))
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStart(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string)), NewRangeWithStart(NewMDYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[5].string)))
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.strings = []string{yyDollar[1].string}
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.strings = []string{yyDollar[1].string, yyDollar[2].string}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.strings = append(yyDollar[1].strings, yyDollar[2].string)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZRange = &DateTimeTZRange{Start: yyDollar[1].DateTimeTZ}
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRange = yyDollar[2].DateTimeTZRange
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(yyDollar[1].DateTimeTZ, NewDateTimeTZ(yyDollar[1].DateTimeTZ.Date, yyDollar[3].Time, yyDollar[1].DateTimeTZ.TimeZone))
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(NewDateTimeTZ(yyDollar[1].DateTimeTZ.Date, yyDollar[1].DateTimeTZ.Time, yyDollar[4].TimeZone), NewDateTimeTZ(yyDollar[1].DateTimeTZ.Date, yyDollar[3].Time, yyDollar[4].TimeZone))
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(NewDateTimeTZ(yyDollar[3].DateTimeTZ.Date, yyDollar[1].Time, yyDollar[3].DateTimeTZ.TimeZone), yyDollar[3].DateTimeTZ)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRange = &DateTimeTZRange{Start: yyDollar[1].DateTimeTZ, End: yyDollar[3].DateTimeTZ}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[4].string, nil))
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, nil), NewDMYDate(yyDollar[3].string, yyDollar[4].string, nil))
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[5].string))
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[5].string), NewDMYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[5].string))
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[6].string), NewMDYDate(yyDollar[4].string, yyDollar[5].string, yyDollar[6].string))
		}
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewWMDYDate(yyDollar[5].string, yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 57:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewWDMYDate(yyDollar[5].string, yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 58:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewWDMYDate(yyDollar[6].string, yyDollar[5].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewWDMYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewWMDYDate(yyDollar[5].string, yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewWDMYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewWDMYDate(yyDollar[5].string, yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 61:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewWDMYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewWDMYDate(yyDollar[6].string, yyDollar[5].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 62:
		yyDollar = yyS[yypt-14 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(NewDateTimeTZ(NewDMYDate(yyDollar[4].string, yyDollar[6].string, yyDollar[14].string), yyDollar[1].Time, yyDollar[2].TimeZone), NewDateTimeTZ(NewDMYDate(yyDollar[8].string, yyDollar[10].string, yyDollar[14].string), yyDollar[12].Time, yyDollar[13].TimeZone))
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(NewDateTimeTZ(yyDollar[1].Date, yyDollar[2].Time, yyDollar[3].TimeZone), NewDateTimeTZ(yyDollar[1].Date, yyDollar[5].Time, yyDollar[6].TimeZone))
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeTZWithDate(yyDollar[1].Date, nil)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeTZ(yyDollar[1].Date, yyDollar[2].Time, yyDollar[3].TimeZone)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeTZ(yyDollar[1].Date, yyDollar[3].Time, yyDollar[4].TimeZone)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeTZ(yyDollar[3].Date, yyDollar[1].Time, yyDollar[2].TimeZone)
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeTZ(yyDollar[4].Date, yyDollar[1].Time, yyDollar[2].TimeZone)
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.TimeZone = nil
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.TimeZone = yyDollar[2].TimeZone
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.TimeZone = yyDollar[2].TimeZone
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = nil
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(yyDollar[1].string, nil, nil)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(nil, yyDollar[1].string, nil)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeTZWithDate(yyDollar[1].Date, nil)
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeTZ(yyDollar[1].Date, yyDollar[2].Time, nil)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeTZ(yyDollar[1].Date, yyDollar[2].Time, yyDollar[3].TimeZone)
		}
	case 107:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[5].string, yyDollar[3].string, yyDollar[1].string)
		}
	case 108:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[2].string, yyDollar[4].string, yyDollar[6].string, nil)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = nil
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(nil, nil, "+"+yyDollar[2].string+":"+yyDollar[4].string)
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(nil, nil, "-"+yyDollar[2].string+":"+yyDollar[4].string)
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = yyDollar[2].Date
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Date = NewAmbiguousDate(yyDollar[1].string, yyDollar[2].string, yyDollar[4].string, nil)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(nil, nil, yyDollar[1].string)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(nil, yyDollar[3].string, yyDollar[1].string)
		}
	case 116:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[5].string, yyDollar[3].string, yyDollar[1].string)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, nil, nil)
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, nil, yyDollar[2].string)
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Date = NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[4].string)
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Date = NewWDMYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[4].string)
		}
	case 121:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.Date = NewAmbiguousDate(yyDollar[1].string, yyDollar[2].string, yyDollar[4].string, yyDollar[6].string)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewWMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, nil)
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewWDMYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, nil)
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Date = NewWDMYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[3].string, yyDollar[2].string)
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = ""
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = "TH"
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = yyDollar[2].Time
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = NewAMTime(yyDollar[1].string, nil, nil, nil)
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = NewPMTime(yyDollar[1].string, nil, nil, nil)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, nil, nil, nil)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, yyDollar[3].string, nil, nil)
		}
	case 172:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, yyDollar[3].string, yyDollar[5].string, nil)
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Time = NewAMTime(yyDollar[1].string, yyDollar[3].string, nil, nil)
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Time = NewPMTime(yyDollar[1].string, yyDollar[3].string, nil, nil)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, nil, nil, nil)
		}
	}
	goto yystack /* stack new state and value */
}
