// Code generated by goyacc -l -o parse_yacc.go -v parse_yacc.states.txt parse_yacc.y. DO NOT EDIT.
package datetime

import __yyfmt__ "fmt"

import "cloud.google.com/go/civil"

type yySymType struct {
	yys              int
	DateTimeTZRanges *DateTimeTZRanges
	DateTimeTZRange  *DateTimeTZRange
	DateTimeTZ       *DateTimeTZ
	Date             civil.Date
	Time             civil.Time
	TimeZone         *TimeZone
	string           string
	strings          []string
}

const ILLEGAL = 57346
const ADD = 57347
const AM = 57348
const AMP = 57349
const AND = 57350
const AT = 57351
const BEGINNING = 57352
const CALENDAR = 57353
const COLON = 57354
const COMMA = 57355
const DATE = 57356
const DEC = 57357
const FROM = 57358
const GOOGLE = 57359
const ICS = 57360
const IN = 57361
const LPAREN = 57362
const OF = 57363
const ON = 57364
const ORD_IND = 57365
const PM = 57366
const PERIOD = 57367
const QUO = 57368
const RPAREN = 57369
const SEMICOLON = 57370
const SUB = 57371
const THROUGH = 57372
const T = 57373
const TH = 57374
const TILL = 57375
const TIME = 57376
const TO = 57377
const UNTIL = 57378
const WHEN = 57379
const Z = 57380
const IDENT = 57381
const INT = 57382
const MONTH_NAME = 57383
const TIME_ZONE = 57384
const TIME_ZONE_ABBREV = 57385
const WEEKDAY_NAME = 57386
const YEAR = 57387

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ILLEGAL",
	"ADD",
	"AM",
	"AMP",
	"AND",
	"AT",
	"BEGINNING",
	"CALENDAR",
	"COLON",
	"COMMA",
	"DATE",
	"DEC",
	"FROM",
	"GOOGLE",
	"ICS",
	"IN",
	"LPAREN",
	"OF",
	"ON",
	"ORD_IND",
	"PM",
	"PERIOD",
	"QUO",
	"RPAREN",
	"SEMICOLON",
	"SUB",
	"THROUGH",
	"T",
	"TH",
	"TILL",
	"TIME",
	"TO",
	"UNTIL",
	"WHEN",
	"Z",
	"IDENT",
	"INT",
	"MONTH_NAME",
	"TIME_ZONE",
	"TIME_ZONE_ABBREV",
	"WEEKDAY_NAME",
	"YEAR",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	9, 164,
	16, 164,
	-2, 118,
	-1, 33,
	9, 166,
	16, 166,
	-2, 120,
	-1, 34,
	9, 167,
	16, 167,
	-2, 121,
	-1, 46,
	8, 34,
	-2, 111,
	-1, 57,
	13, 127,
	25, 127,
	26, 127,
	-2, 63,
	-1, 58,
	13, 129,
	25, 129,
	26, 129,
	-2, 64,
	-1, 81,
	42, 90,
	43, 90,
	-2, 64,
	-1, 128,
	13, 126,
	15, 126,
	25, 126,
	26, 126,
	29, 126,
	40, 126,
	-2, 151,
	-1, 138,
	15, 147,
	29, 147,
	30, 147,
	31, 147,
	33, 147,
	35, 147,
	36, 147,
	-2, 131,
	-1, 156,
	15, 82,
	31, 82,
	-2, 40,
	-1, 205,
	15, 83,
	29, 83,
	31, 83,
	-2, 41,
}

const yyPrivate = 57344

const yyLast = 680

var yyAct = [...]int16{
	118, 5, 206, 162, 143, 5, 11, 49, 51, 56,
	238, 73, 105, 86, 76, 91, 89, 192, 188, 127,
	88, 106, 100, 147, 125, 15, 112, 63, 30, 48,
	9, 279, 119, 12, 54, 55, 77, 12, 5, 73,
	48, 126, 266, 12, 67, 30, 75, 141, 138, 136,
	265, 82, 83, 30, 146, 48, 15, 20, 250, 124,
	246, 155, 137, 23, 128, 126, 129, 23, 47, 21,
	12, 12, 245, 23, 156, 56, 65, 66, 222, 221,
	154, 142, 161, 153, 186, 117, 184, 178, 168, 176,
	39, 169, 15, 164, 131, 92, 171, 219, 157, 2,
	23, 23, 6, 211, 42, 172, 160, 7, 44, 93,
	185, 94, 144, 45, 190, 165, 166, 56, 125, 183,
	189, 191, 174, 40, 175, 101, 29, 19, 41, 134,
	23, 148, 64, 267, 129, 126, 47, 132, 23, 117,
	193, 249, 69, 197, 65, 66, 181, 3, 154, 115,
	202, 203, 153, 124, 248, 126, 70, 59, 71, 147,
	60, 13, 61, 62, 30, 207, 116, 8, 223, 139,
	28, 8, 46, 50, 215, 53, 214, 74, 14, 87,
	172, 47, 99, 43, 114, 102, 133, 68, 204, 216,
	113, 22, 79, 205, 142, 227, 52, 210, 78, 231,
	228, 229, 212, 213, 8, 74, 224, 18, 234, 235,
	237, 50, 181, 53, 109, 220, 10, 244, 72, 149,
	38, 150, 152, 236, 110, 4, 145, 117, 187, 158,
	251, 37, 153, 111, 140, 254, 255, 158, 163, 258,
	159, 259, 151, 262, 239, 240, 242, 182, 153, 130,
	25, 200, 172, 167, 17, 151, 198, 270, 1, 0,
	0, 274, 275, 151, 277, 278, 0, 153, 0, 117,
	0, 217, 283, 280, 261, 282, 264, 107, 285, 286,
	287, 288, 289, 290, 0, 177, 291, 0, 292, 218,
	173, 179, 180, 272, 294, 293, 200, 0, 295, 117,
	298, 225, 297, 299, 0, 0, 0, 194, 195, 196,
	0, 296, 172, 0, 0, 199, 201, 0, 31, 0,
	239, 32, 36, 35, 69, 96, 209, 0, 0, 208,
	151, 33, 0, 0, 0, 64, 0, 57, 70, 59,
	0, 20, 60, 34, 61, 62, 0, 65, 66, 16,
	15, 58, 59, 21, 30, 60, 69, 61, 62, 0,
	199, 226, 48, 15, 230, 0, 53, 50, 163, 233,
	70, 59, 103, 0, 60, 0, 61, 62, 107, 241,
	243, 138, 15, 120, 36, 35, 30, 247, 0, 232,
	104, 173, 0, 121, 253, 0, 0, 0, 209, 256,
	151, 151, 0, 20, 0, 122, 0, 260, 0, 263,
	0, 48, 15, 0, 252, 21, 30, 0, 0, 268,
	0, 257, 0, 0, 271, 0, 273, 0, 0, 276,
	85, 84, 0, 0, 0, 0, 281, 0, 0, 284,
	170, 269, 40, 31, 26, 0, 32, 135, 35, 80,
	27, 0, 0, 82, 83, 0, 33, 0, 31, 26,
	151, 32, 36, 35, 0, 27, 20, 40, 34, 0,
	190, 33, 41, 0, 16, 15, 189, 191, 21, 30,
	0, 20, 0, 34, 0, 0, 24, 0, 0, 16,
	15, 0, 0, 21, 30, 120, 36, 35, 92, 0,
	0, 0, 0, 0, 0, 121, 31, 26, 0, 32,
	36, 35, 93, 27, 94, 20, 0, 122, 0, 33,
	64, 0, 129, 48, 15, 0, 0, 21, 30, 20,
	69, 34, 65, 66, 85, 84, 154, 16, 15, 0,
	0, 21, 30, 0, 81, 59, 69, 48, 60, 0,
	61, 62, 0, 80, 0, 0, 0, 82, 83, 69,
	70, 59, 0, 20, 60, 0, 61, 62, 0, 0,
	64, 48, 57, 70, 59, 21, 0, 60, 0, 61,
	62, 0, 65, 66, 147, 0, 58, 59, 31, 30,
	60, 95, 61, 62, 92, 96, 0, 69, 15, 0,
	0, 97, 0, 0, 0, 0, 69, 0, 93, 0,
	94, 70, 59, 98, 0, 60, 0, 61, 62, 90,
	70, 59, 48, 15, 60, 0, 61, 62, 64, 0,
	129, 48, 0, 128, 0, 129, 0, 0, 0, 0,
	65, 66, 0, 0, 154, 65, 66, 31, 0, 123,
	95, 103, 0, 0, 96, 0, 15, 107, 109, 0,
	97, 15, 0, 64, 0, 129, 0, 0, 110, 104,
	108, 0, 98, 0, 0, 65, 66, 111, 90, 154,
}

var yyPact = [...]int16{
	449, -1000, 115, -1000, 449, 0, 15, -16, 322, 127,
	497, 515, 15, 579, -1000, 112, 645, -1000, -1000, 638,
	-1000, -1000, 371, 620, -1000, 63, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 449, 434, -1000,
	-1000, -1000, 115, -1000, 8, 161, 341, 99, 201, -17,
	-1000, 123, -11, -1000, 591, 507, -17, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 309, -1000, -1000,
	-1000, -1000, -1000, 0, 557, 309, 483, -1000, 9, 9,
	-1000, -1000, -1000, -1000, -1000, -1000, -11, -16, 411, 579,
	366, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 112,
	-1000, -1000, 201, -1000, -1000, 49, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 615, 51, 0, -1000,
	-1000, -1000, -1000, 47, 507, -11, 99, -1000, -1000, -1000,
	81, 44, 459, -1000, -1000, -1000, 99, 99, 201, -16,
	-11, -11, 582, 99, -1000, -1000, 99, -1000, -11, 15,
	-16, -1000, 650, -1000, -1000, 99, 411, -1000, 579, 544,
	-1000, 411, -11, -1000, 483, 76, -1000, 127, 127, 638,
	-1000, 411, -1000, -1000, -1000, -1000, 265, -17, 68, 650,
	-1000, -1000, -1000, -1000, 39, 38, 156, 103, -1000, -1000,
	-1000, -1000, 99, -11, 15, -17, -17, -11, -16, -11,
	-11, 127, -11, -17, 119, -1000, 483, 411, 650, -1000,
	-1000, -1000, 531, 531, 411, -1000, 32, -1000, -1000, 20,
	507, 142, 129, 18, -1000, -17, 127, -11, 99, 99,
	-17, -17, -11, 127, 99, 99, 483, -1000, -16, 650,
	15, 25, 15, 25, -1000, -1000, -1000, -1000, 10, 2,
	121, 99, -11, 127, 99, 99, -16, -11, 127, -11,
	-16, -16, -11, -16, -16, -1000, -1000, -9, -17, -11,
	-17, -16, 591, -17, -17, -17, -17, -17, -17, -1000,
	99, -17, 99, -17, 650, 99, 99, 99, 99, 99,
	99, 99, 99, -16, 80, 638, 80, 411, -17, 99,
}

var yyPgo = [...]int16{
	0, 258, 99, 147, 30, 254, 161, 250, 6, 249,
	36, 2, 247, 166, 0, 62, 4, 107, 102, 231,
	228, 18, 225, 220, 187, 178, 90, 216, 34, 32,
	3, 10, 207, 16, 15, 198, 197, 192, 191, 35,
	126, 27, 185, 21, 182, 22, 17, 19, 127, 12,
	170,
}

var yyR1 = [...]int8{
	0, 19, 1, 20, 20, 21, 21, 21, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 22, 22, 25,
	23, 23, 26, 26, 17, 17, 18, 18, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 27, 27, 32,
	32, 28, 28, 24, 24, 24, 24, 24, 24, 4,
	4, 4, 4, 4, 4, 30, 30, 33, 33, 34,
	34, 34, 11, 11, 11, 11, 11, 35, 36, 37,
	37, 10, 10, 5, 5, 5, 7, 9, 12, 12,
	12, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 38, 38, 40, 40, 40, 40,
	40, 40, 31, 31, 39, 39, 41, 41, 41, 41,
	41, 13, 13, 42, 42, 43, 43, 43, 43, 14,
	14, 44, 44, 45, 15, 15, 16, 16, 16, 46,
	46, 47, 29, 29, 8, 8, 8, 8, 8, 8,
	8, 48, 48, 50, 50, 50, 50, 50, 49, 49,
}

var yyR2 = [...]int8{
	0, 0, 4, 1, 2, 1, 1, 1, 1, 2,
	3, 2, 2, 3, 6, 3, 6, 7, 7, 8,
	8, 8, 8, 9, 9, 4, 5, 1, 2, 1,
	1, 2, 1, 1, 1, 1, 2, 2, 1, 2,
	3, 4, 3, 3, 4, 4, 5, 5, 6, 8,
	8, 8, 8, 8, 8, 14, 5, 1, 2, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 4, 3, 4, 1, 0, 1, 1, 2, 1,
	1, 1, 0, 1, 3, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 3, 5, 6, 1, 4,
	4, 2, 3, 1, 3, 5, 1, 2, 3, 3,
	5, 2, 2, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 1, 2, 1,
	2, 1, 1, 1, 2, 2, 2, 3, 5, 4,
	4, 1, 2, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -22, -14, -18, -17, -13, -4,
	-27, -8, -29, -6, -25, 41, 40, -5, -32, -48,
	32, 44, -38, -15, 37, -7, 10, 16, -50, -40,
	45, 9, 12, 22, 34, 14, 13, -19, -23, -26,
	8, 13, -2, -25, -18, -17, -13, -15, 40, -14,
	-13, -14, -24, -13, -28, -39, -14, 15, 29, 30,
	33, 35, 36, -41, 13, 25, 26, -28, -24, 15,
	29, -3, -32, -14, -13, -28, -11, -10, -35, -37,
	38, 29, 42, 43, 20, 19, -14, -13, -8, -33,
	40, -34, 15, 29, 31, 12, 16, 22, 34, -44,
	-45, 13, -42, 6, 24, -49, -43, 12, 25, 13,
	23, 32, -8, -50, -6, -40, -13, -15, -14, -29,
	12, 22, 34, 29, -39, -14, -46, -47, 13, 15,
	-9, 31, -2, -3, -26, 13, -16, -15, 40, 8,
	-24, -14, -28, -16, 13, 25, -16, 40, 8, -13,
	-13, -24, -13, -41, 29, -16, -8, -4, -6, -13,
	-4, -8, -30, -6, -33, -10, -10, -13, -14, -11,
	29, -8, -34, 25, -45, -43, 40, -13, 40, -13,
	-13, -47, -12, 38, 5, 29, 40, -20, -21, 17,
	11, 18, -46, -14, -13, -13, -13, -14, -17, -13,
	-18, -13, -14, -14, -39, -10, -11, -8, -13, -6,
	-36, 27, -28, -28, -8, -11, -49, 6, 24, 29,
	-39, 40, 40, 12, -21, -17, -13, -14, -16, -16,
	-13, -14, -24, -13, -16, -16, -33, -11, -31, -39,
	-29, -13, -29, -13, -11, 40, 40, -13, 12, 12,
	40, -16, -24, -13, -16, -16, -13, -24, -14, -14,
	-13, -29, -14, -13, -29, 40, 40, 12, -13, -24,
	-14, -13, -28, -13, -14, -14, -13, -14, -14, 40,
	-16, -13, -16, -14, -13, -16, -16, -16, -16, -16,
	-16, -16, -16, -31, -14, -30, -33, -8, -11, -16,
}

var yyDef = [...]int16{
	0, -2, 1, 8, 0, 106, 0, 0, 0, 38,
	0, 82, 117, 69, 27, 139, 131, 74, 57, 0,
	152, 153, 0, 103, 29, 93, 59, 60, 161, 114,
	144, 163, -2, -2, -2, 116, 119, 0, 0, 30,
	32, 33, 9, 27, 11, 0, -2, 107, 131, 12,
	37, 0, 61, 36, 0, 0, 112, -2, -2, 65,
	66, 67, 68, 124, 126, 128, 130, 0, 61, 63,
	64, 39, 57, 106, 0, 0, 0, 83, 0, 0,
	86, -2, 91, 92, 87, 89, 0, 0, 82, 0,
	0, 77, 79, 80, 81, 164, 165, 166, 167, 140,
	141, 143, 132, 155, 156, 0, 133, 168, 137, 135,
	136, 138, 154, 161, 101, 114, 0, 103, 106, 117,
	118, 120, 121, 129, 0, 0, 145, 149, -2, 127,
	94, 0, 0, 10, 31, 33, 13, 146, -2, 0,
	61, 0, 0, 108, 151, 137, 15, 147, 0, 0,
	0, 62, 102, 125, 129, 109, -2, 43, 69, 111,
	42, 82, 0, 72, 0, 0, 85, 0, 0, 70,
	90, 82, 78, 169, 142, 134, 157, 111, 0, 104,
	113, 150, 95, 98, 0, 0, 0, 2, 3, 5,
	6, 7, 148, 0, 0, 25, 44, 0, 0, 34,
	35, 0, 0, 45, 0, -2, 0, 82, 122, 73,
	84, 88, 0, 0, 82, 71, 0, 159, 160, 0,
	0, 0, 0, 0, 4, 0, 0, 0, 26, 46,
	0, 0, 0, 0, 47, 110, 0, 70, 0, 123,
	0, 0, 0, 0, 56, 158, 96, 105, 0, 0,
	0, 14, 0, 0, 48, 16, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 0, 17, 0,
	18, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	21, 19, 22, 20, 122, 49, 50, 51, 52, 53,
	54, 23, 24, 0, 75, 0, 76, 82, 0, 55,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = yyDollar[1].DateTimeTZRanges
		}
	case 2:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = yyDollar[1].DateTimeTZRanges
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = &DateTimeTZRanges{Items: []*DateTimeTZRange{yyDollar[1].DateTimeTZRange}}
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = yyDollar[2].DateTimeTZRanges
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = AppendDateTimeTZRanges(yyDollar[1].DateTimeTZRanges, yyDollar[3].DateTimeTZRange)
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewMDsYDates(yyDollar[1].string, yyDollar[2].strings, nil)...)
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewDsMYDates(yyDollar[1].strings, yyDollar[2].string, nil)...)
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewMDsYDates(yyDollar[1].string, yyDollar[2].strings, yyDollar[3].string)...)
		}
	case 14:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(append(NewMDsYDates(yyDollar[1].string, yyDollar[2].strings, yyDollar[6].string), NewMDsYDates(yyDollar[4].string, yyDollar[5].strings, yyDollar[6].string)...)...)
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewDsMYDates(yyDollar[1].strings, yyDollar[2].string, yyDollar[3].string)...)
		}
	case 16:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(append(NewDsMYDates(yyDollar[1].strings, yyDollar[2].string, yyDollar[6].string), NewDsMYDates(yyDollar[4].strings, yyDollar[5].string, yyDollar[6].string)...)...)
		}
	case 17:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[4].string, nil)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[5].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[7].string, nil)))
		}
	case 18:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[7].string, nil), NewDMYDate(yyDollar[3].string, yyDollar[7].string, nil)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[4].string, yyDollar[7].string, nil), NewDMYDate(yyDollar[6].string, yyDollar[7].string, nil)))
		}
	case 19:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[4].string, nil)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[5].string, yyDollar[6].string, nil), NewMDYDate(yyDollar[5].string, yyDollar[8].string, nil)))
		}
	case 20:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, nil), NewDMYDate(yyDollar[3].string, yyDollar[4].string, nil)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[5].string, yyDollar[8].string, nil), NewDMYDate(yyDollar[7].string, yyDollar[8].string, nil)))
		}
	case 21:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[8].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[8].string)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[5].string, yyDollar[8].string), NewMDYDate(yyDollar[1].string, yyDollar[7].string, yyDollar[8].string)))
		}
	case 22:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[7].string, yyDollar[8].string), NewDMYDate(yyDollar[3].string, yyDollar[7].string, yyDollar[8].string)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[4].string, yyDollar[7].string, yyDollar[8].string), NewDMYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string)))
		}
	case 23:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[9].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[9].string)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[5].string, yyDollar[6].string, yyDollar[9].string), NewMDYDate(yyDollar[5].string, yyDollar[8].string, yyDollar[9].string)))
		}
	case 24:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[9].string), NewDMYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[9].string)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[5].string, yyDollar[8].string, yyDollar[9].string), NewDMYDate(yyDollar[7].string, yyDollar[8].string, yyDollar[9].string)))
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStart(NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil)), NewRangeWithStart(NewMDYDate(yyDollar[3].string, yyDollar[4].string, nil)))
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStart(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string)), NewRangeWithStart(NewMDYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[5].string)))
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.strings = []string{yyDollar[1].string}
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.strings = []string{yyDollar[1].string, yyDollar[2].string}
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.strings = append(yyDollar[1].strings, yyDollar[2].string)
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZRange = &DateTimeTZRange{Start: yyDollar[1].DateTimeTZ}
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRange = yyDollar[2].DateTimeTZRange
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(yyDollar[1].DateTimeTZ, NewDateTime(yyDollar[1].DateTimeTZ.Date, yyDollar[3].Time, yyDollar[1].DateTimeTZ.TimeZone))
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(NewDateTime(yyDollar[1].DateTimeTZ.Date, yyDollar[1].DateTimeTZ.Time, yyDollar[4].TimeZone), NewDateTime(yyDollar[1].DateTimeTZ.Date, yyDollar[3].Time, yyDollar[4].TimeZone))
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(NewDateTime(yyDollar[3].DateTimeTZ.Date, yyDollar[1].Time, yyDollar[3].DateTimeTZ.TimeZone), yyDollar[3].DateTimeTZ)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRange = &DateTimeTZRange{Start: yyDollar[1].DateTimeTZ, End: yyDollar[3].DateTimeTZ}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[4].string, nil))
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, nil), NewDMYDate(yyDollar[3].string, yyDollar[4].string, nil))
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[5].string))
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[5].string), NewDMYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[5].string))
		}
	case 48:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[6].string), NewMDYDate(yyDollar[4].string, yyDollar[5].string, yyDollar[6].string))
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewMDYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewDMYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 51:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewDMYDate(yyDollar[5].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewMDYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 53:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewDMYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 54:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewDMYDate(yyDollar[5].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 55:
		yyDollar = yyS[yypt-14 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(NewDateTime(NewDMYDate(yyDollar[4].string, yyDollar[6].string, yyDollar[14].string), yyDollar[1].Time, yyDollar[2].TimeZone), NewDateTime(NewDMYDate(yyDollar[8].string, yyDollar[10].string, yyDollar[14].string), yyDollar[12].Time, yyDollar[13].TimeZone))
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(NewDateTime(yyDollar[1].Date, yyDollar[2].Time, yyDollar[3].TimeZone), NewDateTime(yyDollar[1].Date, yyDollar[4].Time, yyDollar[5].TimeZone))
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeWithDate(yyDollar[1].Date, nil)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTime(yyDollar[1].Date, yyDollar[2].Time, yyDollar[3].TimeZone)
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTime(yyDollar[1].Date, yyDollar[3].Time, yyDollar[4].TimeZone)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTime(yyDollar[3].Date, yyDollar[1].Time, yyDollar[2].TimeZone)
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTime(yyDollar[4].Date, yyDollar[1].Time, yyDollar[2].TimeZone)
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.TimeZone = nil
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.TimeZone = yyDollar[2].TimeZone
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.TimeZone = yyDollar[2].TimeZone
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = nil
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(yyDollar[1].string, nil, nil)
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(nil, yyDollar[1].string, nil)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeWithDate(yyDollar[1].Date, nil)
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTime(yyDollar[1].Date, yyDollar[2].Time, nil)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTime(yyDollar[1].Date, yyDollar[2].Time, yyDollar[3].TimeZone)
		}
	case 96:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[5].string, yyDollar[3].string, yyDollar[1].string)
		}
	case 97:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[2].string, yyDollar[4].string, yyDollar[6].string, nil)
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = nil
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(nil, nil, "+"+yyDollar[2].string+":"+yyDollar[4].string)
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(nil, nil, "-"+yyDollar[2].string+":"+yyDollar[4].string)
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = yyDollar[2].Date
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewAmbiguousDate(yyDollar[1].string, yyDollar[3].string, nil)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(nil, nil, yyDollar[1].string)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(nil, yyDollar[3].string, yyDollar[1].string)
		}
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[5].string, yyDollar[3].string, yyDollar[1].string)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, nil, nil)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, nil, yyDollar[2].string)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string)
		}
	case 110:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Date = NewAmbiguousDate(yyDollar[1].string, yyDollar[3].string, yyDollar[5].string)
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil)
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[1].string, yyDollar[2].string, nil)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[3].string, yyDollar[2].string, yyDollar[1].string)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = yyDollar[2].Time
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = NewAMTime(yyDollar[1].string, nil, nil, nil)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = NewPMTime(yyDollar[1].string, nil, nil, nil)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, yyDollar[3].string, nil, nil)
		}
	case 158:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, yyDollar[3].string, yyDollar[5].string, nil)
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Time = NewAMTime(yyDollar[1].string, yyDollar[3].string, nil, nil)
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Time = NewPMTime(yyDollar[1].string, yyDollar[3].string, nil, nil)
		}
	}
	goto yystack /* stack new state and value */
}
