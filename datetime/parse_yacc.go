// Code generated by goyacc -l -o parse_yacc.go -v parse_yacc.states.txt parse_yacc.y. DO NOT EDIT.
package datetime

import __yyfmt__ "fmt"

import "cloud.google.com/go/civil"

type yySymType struct {
	yys              int
	DateTimeTZRanges *DateTimeTZRanges
	DateTimeTZRange  *DateTimeTZRange
	DateTimeTZ       *DateTimeTZ
	Date             civil.Date
	Time             civil.Time
	TimeZone         *TimeZone
	string           string
	strings          []string
}

const ILLEGAL = 57346
const AM = 57347
const AMP = 57348
const AND = 57349
const AT = 57350
const BEGINNING = 57351
const CALENDAR = 57352
const COLON = 57353
const COMMA = 57354
const DATE = 57355
const DEC = 57356
const FROM = 57357
const GOOGLE = 57358
const ICS = 57359
const IN = 57360
const LPAREN = 57361
const OF = 57362
const ON = 57363
const ORD_IND = 57364
const PM = 57365
const PERIOD = 57366
const QUO = 57367
const RPAREN = 57368
const SEMICOLON = 57369
const SUB = 57370
const THROUGH = 57371
const T = 57372
const TH = 57373
const TILL = 57374
const TIME = 57375
const TO = 57376
const UNTIL = 57377
const WHEN = 57378
const IDENT = 57379
const INT = 57380
const MONTH_NAME = 57381
const TIME_ZONE = 57382
const TIME_ZONE_ABBREV = 57383
const WEEKDAY_NAME = 57384
const YEAR = 57385

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ILLEGAL",
	"AM",
	"AMP",
	"AND",
	"AT",
	"BEGINNING",
	"CALENDAR",
	"COLON",
	"COMMA",
	"DATE",
	"DEC",
	"FROM",
	"GOOGLE",
	"ICS",
	"IN",
	"LPAREN",
	"OF",
	"ON",
	"ORD_IND",
	"PM",
	"PERIOD",
	"QUO",
	"RPAREN",
	"SEMICOLON",
	"SUB",
	"THROUGH",
	"T",
	"TH",
	"TILL",
	"TIME",
	"TO",
	"UNTIL",
	"WHEN",
	"IDENT",
	"INT",
	"MONTH_NAME",
	"TIME_ZONE",
	"TIME_ZONE_ABBREV",
	"WEEKDAY_NAME",
	"YEAR",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 30,
	8, 148,
	15, 148,
	21, 148,
	-2, 105,
	-1, 32,
	8, 151,
	15, 151,
	21, 151,
	-2, 107,
	-1, 44,
	7, 33,
	-2, 98,
	-1, 55,
	12, 111,
	24, 111,
	25, 111,
	-2, 60,
	-1, 56,
	12, 113,
	24, 113,
	25, 113,
	-2, 61,
}

const yyPrivate = 57344

const yyLast = 593

var yyAct = [...]int16{
	113, 8, 150, 168, 75, 8, 44, 48, 85, 51,
	12, 72, 74, 102, 123, 88, 53, 103, 89, 13,
	9, 115, 11, 262, 84, 97, 11, 61, 76, 46,
	46, 109, 11, 257, 28, 129, 8, 72, 256, 118,
	254, 111, 253, 48, 252, 51, 251, 250, 249, 247,
	245, 138, 224, 139, 141, 114, 5, 11, 11, 18,
	5, 223, 47, 49, 54, 6, 71, 73, 220, 52,
	19, 42, 147, 208, 148, 203, 144, 202, 119, 65,
	28, 142, 136, 15, 152, 146, 145, 79, 80, 155,
	66, 5, 71, 46, 15, 151, 156, 46, 218, 50,
	132, 157, 162, 7, 92, 158, 153, 154, 37, 43,
	3, 62, 90, 120, 133, 163, 191, 161, 124, 164,
	165, 69, 160, 63, 64, 98, 91, 121, 54, 20,
	149, 2, 173, 174, 175, 131, 40, 166, 178, 180,
	82, 81, 28, 140, 26, 127, 142, 126, 27, 184,
	83, 188, 137, 170, 130, 122, 140, 185, 183, 169,
	171, 193, 79, 80, 17, 110, 192, 125, 157, 54,
	112, 198, 189, 178, 200, 70, 194, 204, 38, 51,
	48, 197, 207, 39, 96, 99, 172, 213, 215, 176,
	211, 14, 86, 210, 181, 182, 41, 217, 219, 21,
	22, 78, 222, 179, 151, 190, 45, 225, 212, 214,
	77, 142, 10, 228, 36, 231, 4, 133, 186, 187,
	167, 35, 234, 1, 140, 142, 157, 237, 238, 201,
	189, 241, 67, 205, 244, 229, 246, 232, 179, 0,
	0, 177, 0, 0, 216, 134, 68, 57, 195, 0,
	58, 0, 59, 60, 104, 143, 46, 15, 258, 0,
	0, 28, 0, 0, 259, 261, 196, 159, 227, 260,
	230, 206, 45, 0, 0, 157, 199, 140, 140, 0,
	0, 236, 0, 0, 239, 240, 233, 242, 243, 0,
	62, 221, 120, 248, 0, 0, 0, 0, 226, 0,
	255, 100, 63, 64, 106, 29, 121, 104, 30, 34,
	33, 67, 94, 235, 107, 45, 135, 15, 31, 101,
	159, 0, 0, 108, 140, 68, 57, 0, 18, 58,
	32, 59, 60, 0, 0, 16, 15, 0, 67, 19,
	28, 38, 29, 24, 0, 30, 128, 33, 134, 25,
	0, 0, 68, 57, 0, 31, 58, 0, 59, 60,
	0, 0, 46, 15, 134, 18, 0, 32, 0, 0,
	0, 0, 16, 15, 0, 0, 19, 28, 29, 24,
	0, 30, 34, 33, 209, 25, 0, 0, 0, 0,
	0, 31, 29, 24, 0, 30, 34, 33, 62, 25,
	120, 18, 0, 32, 0, 31, 23, 0, 16, 15,
	63, 64, 19, 28, 121, 18, 0, 32, 116, 34,
	33, 90, 16, 15, 46, 0, 19, 28, 0, 0,
	0, 116, 34, 33, 38, 91, 0, 170, 18, 39,
	117, 0, 0, 169, 171, 46, 15, 0, 0, 19,
	28, 18, 67, 117, 0, 0, 0, 0, 46, 15,
	0, 0, 19, 28, 67, 0, 68, 57, 0, 18,
	58, 0, 59, 60, 0, 62, 46, 55, 68, 57,
	19, 0, 58, 0, 59, 60, 0, 63, 64, 0,
	0, 56, 57, 28, 62, 58, 55, 59, 60, 0,
	0, 46, 15, 0, 0, 0, 63, 64, 0, 0,
	56, 57, 29, 0, 58, 93, 59, 60, 90, 94,
	29, 15, 0, 93, 0, 31, 90, 94, 0, 0,
	0, 0, 91, 31, 92, 0, 29, 95, 67, 93,
	91, 0, 87, 94, 0, 95, 0, 0, 0, 31,
	87, 0, 68, 57, 67, 0, 58, 0, 59, 60,
	0, 95, 46, 0, 100, 0, 87, 0, 68, 57,
	104, 106, 58, 0, 59, 60, 62, 0, 120, 0,
	0, 107, 101, 105, 0, 0, 0, 0, 63, 64,
	108, 0, 121,
}

var yyPact = [...]int16{
	370, -1000, 171, -1000, 370, -9, 55, 44, 463, 540,
	384, 55, 122, 504, -1000, 113, 559, -1000, -1000, -1000,
	528, 420, 278, -1000, -1000, -1000, -1000, -1000, 106, -1000,
	-1000, -1000, -1000, -1000, -1000, 370, 334, -1000, -1000, -1000,
	171, -1000, -8, 147, 218, -1000, 292, 39, -1000, 145,
	59, -1000, 524, 386, 37, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 297, -1000, -1000, -1000, -1000,
	-1000, -9, 482, 59, 44, 407, -1000, 47, 47, -1000,
	-1000, -1000, -1000, -1000, 122, 512, 74, 296, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 113, -1000, -1000, 292,
	-1000, -1000, 64, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 74, -1000, 278, -9, -1000, -1000, -1000, 386, 59,
	-1000, -1000, 106, -1000, -1000, 427, -1000, -1000, -1000, -1000,
	44, 59, 59, 324, -1000, -1000, -1000, 59, 55, 44,
	-1000, 564, -1000, -1000, 122, -1000, 504, 450, 540, 540,
	59, 74, 407, 90, -1000, 528, 122, -1000, -1000, -1000,
	-1000, -1000, 243, 37, 564, -1000, -1000, 143, -1000, -1000,
	-1000, -1000, 59, 55, 34, 32, 59, 44, 59, 59,
	540, 59, 30, 99, 407, 122, 438, 438, 44, 74,
	-1000, -1000, 122, -1000, 60, -1000, -1000, 386, -1000, 25,
	540, 59, -1000, -1000, 18, 9, 59, 540, -1000, -1000,
	407, -1000, 55, 28, 55, 28, 540, -1000, -1000, -1000,
	-1000, 59, 540, -1000, -1000, 44, 59, 59, 44, 44,
	59, 44, 44, 524, 7, 59, 6, 44, 5, 4,
	3, 1, -1, -3, 44, -1000, -5, -1000, -10, -1000,
	-1000, -1000, -1000, -1000, -1000, 98, -1000, -1000, 528, 98,
	122, -20, -1000,
}

var yyPgo = [...]uint8{
	0, 223, 131, 110, 20, 19, 28, 4, 0, 55,
	200, 103, 65, 10, 221, 220, 3, 216, 214, 90,
	191, 108, 212, 69, 21, 2, 164, 8, 15, 210,
	205, 201, 199, 192, 16, 148, 27, 18, 185, 17,
	184, 25, 155, 14, 129, 13, 144, 129, 129,
}

var yyR1 = [...]int8{
	0, 14, 1, 15, 15, 16, 16, 16, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 17, 17, 20, 18,
	18, 21, 21, 11, 11, 12, 12, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 22, 22, 26, 26, 23, 23,
	19, 19, 19, 19, 19, 19, 4, 4, 4, 4,
	4, 25, 25, 27, 27, 28, 28, 7, 7, 7,
	7, 29, 30, 31, 31, 6, 6, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 32, 32, 35, 35, 35, 35, 35, 34, 34,
	36, 36, 36, 36, 36, 33, 33, 37, 8, 8,
	38, 38, 39, 39, 39, 39, 9, 9, 40, 40,
	41, 10, 10, 42, 42, 43, 24, 24, 13, 13,
	13, 13, 13, 13, 13, 44, 44, 46, 46, 46,
	46, 46, 45, 45, 47, 47, 48, 48,
}

var yyR2 = [...]int8{
	0, 0, 4, 1, 2, 1, 1, 1, 1, 2,
	3, 2, 2, 3, 6, 3, 6, 7, 7, 8,
	8, 8, 8, 9, 9, 5, 1, 2, 1, 1,
	2, 1, 1, 1, 1, 2, 2, 1, 2, 4,
	3, 4, 4, 5, 5, 6, 8, 8, 8, 8,
	8, 8, 12, 5, 1, 2, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 3,
	4, 0, 1, 1, 2, 1, 1, 0, 1, 3,
	2, 1, 1, 1, 1, 1, 1, 2, 2, 3,
	1, 3, 5, 1, 2, 3, 3, 5, 2, 2,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 2, 2,
	2, 3, 5, 4, 4, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 0, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -17, -9, -12, -11, -8, -4,
	-22, -24, -13, -5, -20, 39, 38, -26, 31, 42,
	-44, -32, -10, 36, 9, 15, -46, -35, 43, 8,
	11, 21, 33, 13, 12, -14, -18, -21, 7, 12,
	-2, -20, -12, -11, -8, -10, 38, -9, -8, -9,
	-19, -8, -23, -34, -9, 14, 28, 29, 32, 34,
	35, -36, 12, 24, 25, -23, -19, 14, 28, -3,
	-26, -9, -8, -9, -8, -7, -6, -29, -31, 40,
	41, 19, 18, 28, -13, -27, -33, 38, -28, -37,
	14, 28, 30, 11, 15, 33, -40, -41, 12, -38,
	5, 23, -45, -39, 11, 24, 12, 22, 31, -13,
	-46, -5, -35, -8, -9, -24, 11, 33, -34, -9,
	14, 28, -42, -43, 12, -2, -3, -21, 12, 43,
	7, -19, -9, -23, -10, 24, 43, 7, -8, -8,
	-19, -8, -36, -10, -13, -4, -5, -8, -8, -9,
	-25, -5, -27, -6, -6, -7, -13, -28, -37, 24,
	-41, -39, 38, -8, -8, -8, -43, -15, -16, 16,
	10, 17, -9, -8, -8, -8, -9, -11, -8, -12,
	-8, -9, -9, -34, -7, -13, -23, -23, -8, -5,
	-30, 26, -13, -7, -45, 5, 23, -34, -16, -11,
	-8, -9, 43, 43, -8, -9, -19, -8, 43, -10,
	-27, -7, -24, -8, -24, -8, -9, -7, 38, -8,
	43, -19, -8, 43, 43, -8, -19, -9, -8, -24,
	-9, -8, -24, -23, -8, -19, -9, -8, -8, -9,
	-9, -8, -9, -9, -8, 43, -8, 43, -9, 43,
	43, 43, 43, 43, 43, -9, 43, 43, -25, -27,
	-13, -7, 43,
}

var yyDef = [...]int16{
	0, -2, 1, 8, 0, 93, 0, 0, 0, 37,
	0, 104, 77, 66, 26, 126, 118, 54, 136, 137,
	0, 0, 90, 28, 56, 57, 145, 101, 131, 147,
	-2, 150, -2, 103, 106, 0, 0, 29, 31, 32,
	9, 26, 11, 0, -2, 94, 118, 12, 36, 0,
	58, 35, 0, 0, 99, -2, -2, 62, 63, 64,
	65, 108, 110, 112, 114, 0, 58, 60, 61, 38,
	54, 93, 0, 0, 0, 0, 78, 0, 0, 85,
	86, 81, 83, 84, 77, 0, 88, 0, 73, 115,
	75, 76, 117, 148, 149, 151, 127, 128, 130, 119,
	139, 140, 0, 120, 152, 124, 122, 123, 125, 138,
	145, 87, 101, 0, 93, 104, 105, 107, 0, 0,
	111, 113, 132, 133, 135, 0, 10, 30, 32, 13,
	0, 58, 0, 0, 95, 124, 15, 0, 0, 0,
	59, 89, 109, 96, 77, 40, 66, 98, 0, 0,
	0, 69, 0, 0, 80, 67, 77, 74, 116, 153,
	129, 121, 141, 98, 91, 100, 134, 2, 3, 5,
	6, 7, 0, 0, 0, 41, 0, 0, 33, 34,
	0, 0, 42, 0, 39, 77, 0, 0, 0, 70,
	79, 82, 77, 68, 0, 143, 144, 0, 4, 0,
	0, 0, 25, 43, 0, 0, 0, 0, 44, 97,
	0, 67, 0, 0, 0, 0, 0, 53, 142, 92,
	14, 0, 0, 45, 16, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 17, 0, 18, 0, 0, 0,
	0, 0, 0, 0, 0, 21, 19, 22, 20, 46,
	47, 48, 49, 50, 51, 71, 23, 24, 0, 72,
	77, 0, 52,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = yyDollar[1].DateTimeTZRanges
		}
	case 2:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = yyDollar[1].DateTimeTZRanges
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = &DateTimeTZRanges{Items: []*DateTimeTZRange{yyDollar[1].DateTimeTZRange}}
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = yyDollar[2].DateTimeTZRanges
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = AppendDateTimeTZRanges(yyDollar[1].DateTimeTZRanges, yyDollar[3].DateTimeTZRange)
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewMDsYDates(yyDollar[1].string, yyDollar[2].strings, nil)...)
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewDsMYDates(yyDollar[1].strings, yyDollar[2].string, nil)...)
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewMDsYDates(yyDollar[1].string, yyDollar[2].strings, yyDollar[3].string)...)
		}
	case 14:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(append(NewMDsYDates(yyDollar[1].string, yyDollar[2].strings, yyDollar[6].string), NewMDsYDates(yyDollar[4].string, yyDollar[5].strings, yyDollar[6].string)...)...)
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewDsMYDates(yyDollar[1].strings, yyDollar[2].string, yyDollar[3].string)...)
		}
	case 16:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(append(NewDsMYDates(yyDollar[1].strings, yyDollar[2].string, yyDollar[6].string), NewDsMYDates(yyDollar[4].strings, yyDollar[5].string, yyDollar[6].string)...)...)
		}
	case 17:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[4].string, nil)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[5].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[7].string, nil)))
		}
	case 18:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[7].string, nil), NewDMYDate(yyDollar[3].string, yyDollar[7].string, nil)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[4].string, yyDollar[7].string, nil), NewDMYDate(yyDollar[6].string, yyDollar[7].string, nil)))
		}
	case 19:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[4].string, nil)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[5].string, yyDollar[6].string, nil), NewMDYDate(yyDollar[5].string, yyDollar[8].string, nil)))
		}
	case 20:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, nil), NewDMYDate(yyDollar[3].string, yyDollar[4].string, nil)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[5].string, yyDollar[8].string, nil), NewDMYDate(yyDollar[7].string, yyDollar[8].string, nil)))
		}
	case 21:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[8].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[8].string)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[5].string, yyDollar[8].string), NewMDYDate(yyDollar[1].string, yyDollar[7].string, yyDollar[8].string)))
		}
	case 22:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[7].string, yyDollar[8].string), NewDMYDate(yyDollar[3].string, yyDollar[7].string, yyDollar[8].string)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[4].string, yyDollar[7].string, yyDollar[8].string), NewDMYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string)))
		}
	case 23:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[9].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[9].string)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[5].string, yyDollar[6].string, yyDollar[9].string), NewMDYDate(yyDollar[5].string, yyDollar[8].string, yyDollar[9].string)))
		}
	case 24:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[9].string), NewDMYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[9].string)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[5].string, yyDollar[8].string, yyDollar[9].string), NewDMYDate(yyDollar[7].string, yyDollar[8].string, yyDollar[9].string)))
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStart(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string)), NewRangeWithStart(NewMDYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[5].string)))
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.strings = []string{yyDollar[1].string}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.strings = []string{yyDollar[1].string, yyDollar[2].string}
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.strings = append(yyDollar[1].strings, yyDollar[2].string)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZRange = &DateTimeTZRange{Start: yyDollar[1].DateTimeTZ}
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRange = yyDollar[2].DateTimeTZRange
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(yyDollar[1].DateTimeTZ, NewDateTime(yyDollar[1].DateTimeTZ.Date, yyDollar[3].Time, yyDollar[4].TimeZone))
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRange = &DateTimeTZRange{Start: yyDollar[1].DateTimeTZ, End: yyDollar[3].DateTimeTZ}
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[4].string, nil))
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, nil), NewDMYDate(yyDollar[3].string, yyDollar[4].string, nil))
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[5].string))
		}
	case 44:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[5].string), NewDMYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[5].string))
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[6].string), NewMDYDate(yyDollar[4].string, yyDollar[5].string, yyDollar[6].string))
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewMDYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewDMYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewDMYDate(yyDollar[5].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewMDYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewDMYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 51:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewDMYDate(yyDollar[5].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 52:
		yyDollar = yyS[yypt-12 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(NewDateTime(NewDMYDate(yyDollar[4].string, yyDollar[5].string, yyDollar[12].string), yyDollar[1].Time, yyDollar[2].TimeZone), NewDateTime(NewDMYDate(yyDollar[7].string, yyDollar[8].string, yyDollar[12].string), yyDollar[10].Time, yyDollar[11].TimeZone))
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(NewDateTime(yyDollar[1].Date, yyDollar[2].Time, yyDollar[3].TimeZone), NewDateTime(yyDollar[1].Date, yyDollar[4].Time, yyDollar[5].TimeZone))
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeWithDate(yyDollar[1].Date, nil)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTime(yyDollar[1].Date, yyDollar[2].Time, yyDollar[3].TimeZone)
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTime(yyDollar[1].Date, yyDollar[3].Time, yyDollar[4].TimeZone)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTime(yyDollar[3].Date, yyDollar[1].Time, yyDollar[2].TimeZone)
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTime(yyDollar[4].Date, yyDollar[1].Time, yyDollar[2].TimeZone)
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.TimeZone = nil
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.TimeZone = yyDollar[2].TimeZone
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.TimeZone = yyDollar[2].TimeZone
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(yyDollar[1].string, nil)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(nil, yyDollar[1].string)
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = yyDollar[2].Date
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = yyDollar[1].Date
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewAmbiguousDate(yyDollar[1].string, yyDollar[3].string, nil)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(nil, nil, yyDollar[1].string)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(nil, yyDollar[3].string, yyDollar[1].string)
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[5].string, yyDollar[3].string, yyDollar[1].string)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, nil, nil)
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, nil, yyDollar[2].string)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string)
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Date = NewAmbiguousDate(yyDollar[1].string, yyDollar[3].string, yyDollar[5].string)
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil)
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[1].string, yyDollar[2].string, nil)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[3].string, yyDollar[2].string, yyDollar[1].string)
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = yyDollar[2].Time
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = NewAMTime(yyDollar[1].string, nil, nil, nil)
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = NewPMTime(yyDollar[1].string, nil, nil, nil)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, yyDollar[3].string, nil, nil)
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, yyDollar[3].string, yyDollar[5].string, nil)
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Time = NewAMTime(yyDollar[1].string, yyDollar[3].string, nil, nil)
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Time = NewPMTime(yyDollar[1].string, yyDollar[3].string, nil, nil)
		}
	}
	goto yystack /* stack new state and value */
}
