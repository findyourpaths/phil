// Code generated by goyacc -l -o parse_yacc.go -v parse_yacc.states.txt parse_yacc.y. DO NOT EDIT.
package datetime

import __yyfmt__ "fmt"

type yySymType struct {
	yys            int
	DateTimeRanges *DateTimeRanges
	DateTimeRange  *DateTimeRange
	DateTime       *DateTime
	Date           *Date
	Time           *Time
	TimeZone       *TimeZone
	string         string
	strings        []string
}

const ILLEGAL = 57346
const A = 57347
const ADD = 57348
const AM = 57349
const AMP = 57350
const AND = 57351
const AT = 57352
const BEGINNING = 57353
const CALENDAR = 57354
const COLON = 57355
const COMMA = 57356
const DATE = 57357
const DATES = 57358
const DEC = 57359
const FROM = 57360
const GOOGLE = 57361
const ICS = 57362
const IN = 57363
const LPAREN = 57364
const NEXT = 57365
const OF = 57366
const ON = 57367
const ORD_IND = 57368
const PART = 57369
const P = 57370
const PM = 57371
const PERIOD = 57372
const QUO = 57373
const RPAREN = 57374
const SAVE = 57375
const SEMICOLON = 57376
const SUB = 57377
const THROUGH = 57378
const T = 57379
const TH = 57380
const THE = 57381
const THIS = 57382
const TILL = 57383
const TIME = 57384
const TO = 57385
const UNTIL = 57386
const WHEN = 57387
const Z = 57388
const IDENT = 57389
const INT = 57390
const MONTH_NAME = 57391
const TIME_NAME = 57392
const TIME_ZONE = 57393
const TIME_ZONE_ABBREV = 57394
const RELATIVE_DAY = 57395
const WEEKDAY_NAME = 57396
const WEEKDAY_SHORT_NAME = 57397
const YEAR = 57398

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ILLEGAL",
	"A",
	"ADD",
	"AM",
	"AMP",
	"AND",
	"AT",
	"BEGINNING",
	"CALENDAR",
	"COLON",
	"COMMA",
	"DATE",
	"DATES",
	"DEC",
	"FROM",
	"GOOGLE",
	"ICS",
	"IN",
	"LPAREN",
	"NEXT",
	"OF",
	"ON",
	"ORD_IND",
	"PART",
	"P",
	"PM",
	"PERIOD",
	"QUO",
	"RPAREN",
	"SAVE",
	"SEMICOLON",
	"SUB",
	"THROUGH",
	"T",
	"TH",
	"THE",
	"THIS",
	"TILL",
	"TIME",
	"TO",
	"UNTIL",
	"WHEN",
	"Z",
	"IDENT",
	"INT",
	"MONTH_NAME",
	"TIME_NAME",
	"TIME_ZONE",
	"TIME_ZONE_ABBREV",
	"RELATIVE_DAY",
	"WEEKDAY_NAME",
	"WEEKDAY_SHORT_NAME",
	"YEAR",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 4,
	25, 79,
	-2, 15,
	-1, 18,
	17, 156,
	35, 156,
	36, 156,
	41, 156,
	43, 156,
	44, 156,
	48, 156,
	49, 156,
	-2, 177,
	-1, 28,
	49, 149,
	56, 149,
	-2, 113,
	-1, 45,
	10, 189,
	18, 189,
	50, 189,
	-2, 132,
	-1, 46,
	10, 188,
	18, 188,
	50, 188,
	-2, 131,
	-1, 105,
	28, 97,
	51, 97,
	52, 97,
	-2, 66,
	-1, 114,
	17, 65,
	35, 65,
	36, 65,
	41, 65,
	43, 65,
	44, 65,
	48, 65,
	-2, 85,
	-1, 115,
	17, 66,
	35, 66,
	36, 66,
	41, 66,
	43, 66,
	44, 66,
	48, 66,
	-2, 87,
	-1, 157,
	9, 138,
	14, 138,
	17, 138,
	30, 138,
	31, 138,
	48, 138,
	-2, 173,
	-1, 167,
	25, 79,
	-2, 17,
	-1, 188,
	15, 89,
	23, 89,
	38, 89,
	40, 89,
	42, 89,
	48, 89,
	49, 89,
	53, 89,
	54, 89,
	55, 89,
	56, 89,
	-2, 49,
	-1, 203,
	10, 61,
	18, 61,
	25, 61,
	42, 61,
	48, 61,
	50, 61,
	-2, 73,
	-1, 240,
	15, 94,
	23, 94,
	38, 94,
	40, 94,
	48, 94,
	49, 94,
	53, 94,
	54, 94,
	55, 94,
	56, 94,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 798

var yyAct = [...]int16{
	29, 61, 125, 124, 39, 213, 152, 75, 82, 7,
	28, 91, 100, 8, 14, 154, 72, 155, 123, 62,
	73, 92, 120, 99, 110, 98, 6, 146, 146, 6,
	111, 6, 63, 77, 79, 112, 89, 19, 9, 142,
	56, 126, 162, 76, 12, 74, 78, 93, 81, 90,
	40, 39, 96, 17, 109, 102, 76, 80, 51, 101,
	15, 108, 76, 17, 293, 42, 286, 41, 205, 161,
	39, 76, 17, 172, 285, 141, 275, 4, 178, 104,
	108, 38, 43, 146, 106, 107, 176, 144, 150, 39,
	271, 94, 270, 257, 96, 171, 168, 184, 91, 75,
	175, 146, 256, 106, 107, 224, 222, 188, 216, 166,
	156, 78, 204, 81, 193, 186, 185, 187, 158, 180,
	195, 17, 174, 191, 203, 206, 212, 207, 183, 140,
	182, 159, 160, 167, 199, 223, 90, 189, 254, 164,
	182, 244, 210, 181, 192, 171, 221, 182, 138, 202,
	91, 170, 215, 190, 133, 64, 65, 39, 182, 66,
	190, 194, 200, 201, 211, 37, 134, 176, 218, 139,
	177, 219, 36, 67, 121, 191, 287, 68, 135, 69,
	57, 162, 274, 273, 235, 58, 238, 53, 90, 231,
	236, 217, 145, 229, 52, 54, 146, 143, 258, 226,
	218, 214, 165, 245, 179, 241, 233, 173, 225, 24,
	112, 153, 247, 227, 228, 250, 252, 248, 230, 232,
	249, 253, 119, 237, 255, 176, 239, 23, 171, 262,
	242, 251, 109, 102, 11, 122, 231, 31, 60, 108,
	259, 95, 204, 235, 267, 16, 205, 137, 240, 136,
	26, 71, 218, 261, 268, 263, 243, 104, 103, 198,
	276, 269, 106, 107, 279, 230, 260, 246, 283, 81,
	78, 218, 265, 266, 1, 13, 234, 55, 59, 2,
	264, 282, 284, 218, 292, 70, 97, 10, 5, 294,
	10, 296, 10, 3, 272, 182, 299, 50, 300, 32,
	278, 220, 163, 280, 33, 22, 290, 298, 277, 0,
	0, 0, 0, 281, 149, 0, 288, 297, 0, 83,
	291, 0, 0, 0, 0, 0, 289, 44, 295, 0,
	48, 49, 47, 0, 83, 117, 0, 84, 85, 0,
	40, 0, 46, 86, 0, 87, 88, 0, 44, 0,
	76, 17, 84, 85, 0, 42, 117, 41, 86, 45,
	87, 88, 0, 118, 0, 113, 17, 25, 0, 0,
	27, 38, 43, 39, 44, 34, 0, 48, 49, 47,
	116, 0, 35, 0, 0, 0, 113, 40, 25, 46,
	0, 20, 0, 0, 0, 0, 0, 21, 0, 0,
	0, 0, 42, 0, 41, 0, 45, 0, 0, 30,
	0, 0, 18, 17, 25, 0, 0, 27, 38, 43,
	39, 48, 49, 47, 0, 83, 0, 0, 109, 102,
	0, 40, 0, 147, 0, 108, 0, 0, 0, 0,
	0, 0, 205, 84, 85, 0, 42, 0, 41, 86,
	148, 87, 88, 104, 0, 0, 0, 17, 106, 107,
	0, 27, 38, 43, 39, 57, 44, 34, 0, 48,
	169, 47, 0, 0, 35, 0, 0, 0, 0, 40,
	0, 46, 0, 0, 0, 0, 0, 44, 34, 0,
	48, 49, 47, 0, 42, 35, 41, 0, 45, 0,
	40, 0, 46, 0, 18, 17, 25, 0, 0, 27,
	38, 43, 39, 0, 0, 42, 0, 41, 0, 45,
	0, 0, 30, 0, 0, 18, 17, 25, 0, 0,
	27, 38, 43, 39, 44, 34, 156, 48, 49, 47,
	0, 186, 35, 0, 158, 0, 156, 40, 0, 46,
	0, 186, 0, 0, 158, 0, 0, 159, 160, 0,
	0, 0, 42, 0, 41, 0, 45, 159, 160, 0,
	83, 0, 18, 17, 25, 0, 17, 27, 38, 43,
	39, 196, 197, 47, 0, 66, 0, 0, 84, 85,
	156, 40, 0, 147, 86, 157, 87, 88, 158, 67,
	0, 76, 0, 68, 0, 69, 42, 0, 41, 0,
	148, 159, 160, 0, 0, 0, 151, 17, 0, 0,
	0, 27, 38, 43, 39, 44, 0, 0, 64, 65,
	0, 0, 66, 117, 156, 0, 109, 102, 0, 186,
	118, 0, 158, 108, 0, 0, 67, 0, 0, 0,
	208, 0, 69, 83, 0, 159, 160, 116, 48, 49,
	47, 104, 0, 113, 0, 25, 106, 107, 40, 0,
	147, 84, 85, 76, 0, 0, 0, 86, 0, 87,
	88, 0, 0, 42, 0, 41, 0, 148, 44, 0,
	0, 64, 65, 0, 17, 114, 117, 0, 27, 38,
	43, 39, 0, 118, 0, 0, 83, 0, 0, 67,
	109, 102, 0, 115, 85, 69, 0, 108, 0, 86,
	116, 87, 88, 0, 105, 85, 113, 0, 25, 0,
	86, 0, 87, 88, 0, 104, 0, 0, 0, 44,
	106, 107, 64, 65, 0, 0, 66, 117, 0, 127,
	0, 128, 0, 0, 118, 0, 0, 131, 133, 0,
	67, 127, 0, 128, 68, 0, 69, 0, 0, 131,
	134, 116, 129, 130, 132, 156, 0, 113, 0, 25,
	157, 0, 135, 158, 129, 130, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 159, 160,
}

var yyPact = [...]int16{
	364, 175, 171, 364, 142, 477, -5, 23, 4, 553,
	14, -1000, 636, 524, 689, 678, -1000, 160, 744, 134,
	81, 36, -1000, -1000, 338, -1000, 645, 645, -1000, 581,
	-1000, 27, -1000, 102, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 189, -1000, -1000, -1000, -1000,
	175, -1000, -1000, -1000, -1000, 456, -1000, -1000, -1000, 175,
	-1000, 126, 142, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	171, -1000, -5, 198, 302, 153, 140, -52, -1000, 195,
	8, -1000, 408, -1000, -1000, -1000, -1000, -1000, -1000, 8,
	527, 72, 317, -1000, 142, -1000, 636, 14, -52, 317,
	568, 92, 52, 52, -1000, -1000, -1000, -1000, -1000, -1000,
	553, 33, 615, 756, -1000, -1000, 189, -1000, -1000, 160,
	-1000, -1000, 140, -1000, -1000, 78, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	188, 136, -1000, -1000, -1000, -1000, 766, -1000, -1000, 14,
	-1000, 60, 625, 153, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 100, 57, -1000, -1000, 142, -1000, -1000,
	27, -1000, 153, 4, 8, 8, -1000, -1000, 153, 8,
	23, -1000, -1000, 101, 625, -52, -1000, 8, 407, -1000,
	729, 8, -1000, 407, -1000, 568, -1000, -1000, -1000, -1000,
	109, -1000, -52, 636, 211, -1000, -1000, 407, -1000, -1000,
	-1000, -1000, 756, -1000, -1000, 188, 103, 537, -1000, -1000,
	-1000, -1000, 54, 45, 185, -1000, 8, 23, -52, 4,
	8, 8, 636, 8, 8, 153, 537, 537, 153, -1000,
	92, 33, -52, -1000, -1000, 153, 338, 636, -1000, -1000,
	44, -1000, -1000, -1000, 42, 625, 170, 169, 28, -52,
	636, 8, 153, -52, 8, 636, 338, 101, -1000, 407,
	-1000, -1000, -1000, 26, 18, 163, 153, 8, 636, 153,
	4, 8, 142, 153, -1000, -1000, -1000, 16, -52, 8,
	-52, 4, 338, -1000, 153, -52, 153, -52, -1000, 153,
	153,
}

var yyPgo = [...]int16{
	0, 274, 279, 77, 44, 305, 60, 304, 14, 302,
	59, 12, 301, 38, 25, 37, 286, 10, 299, 0,
	13, 9, 297, 293, 234, 5, 58, 288, 277, 47,
	276, 1, 245, 40, 275, 8, 267, 227, 19, 32,
	259, 258, 250, 6, 165, 15, 249, 247, 237, 235,
	41, 222, 22, 211, 17, 209, 18, 3, 2, 172,
}

var yyR1 = [...]int8{
	0, 1, 1, 1, 23, 23, 24, 24, 22, 22,
	26, 26, 26, 25, 25, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 27, 27, 32, 28, 28,
	33, 33, 20, 20, 21, 21, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 34, 34, 37,
	37, 36, 36, 35, 35, 29, 29, 29, 29, 29,
	29, 4, 4, 4, 4, 4, 4, 4, 4, 31,
	31, 38, 38, 39, 39, 39, 39, 39, 39, 11,
	11, 11, 11, 11, 40, 40, 41, 41, 10, 10,
	10, 5, 5, 5, 7, 9, 12, 12, 12, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 42, 42, 44, 44,
	44, 44, 44, 30, 30, 43, 43, 45, 45, 45,
	45, 45, 16, 16, 46, 46, 47, 47, 15, 15,
	15, 48, 48, 17, 18, 18, 13, 13, 49, 49,
	50, 50, 50, 50, 14, 14, 51, 51, 52, 19,
	19, 53, 53, 54, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 55, 55, 59, 59, 59, 59, 59,
	58, 58, 56, 56, 57, 57,
}

var yyR2 = [...]int8{
	0, 1, 2, 2, 1, 2, 3, 4, 1, 2,
	1, 1, 1, 0, 1, 1, 2, 3, 2, 2,
	3, 6, 3, 6, 7, 7, 8, 8, 8, 8,
	9, 9, 4, 5, 8, 1, 2, 1, 1, 2,
	1, 1, 1, 1, 2, 2, 1, 4, 2, 3,
	4, 3, 3, 3, 3, 4, 6, 1, 2, 1,
	1, 0, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 4, 3, 4, 4, 1, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 3, 2, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 2, 3, 5, 6, 1, 4, 4, 2,
	1, 2, 2, 1, 4, 1, 3, 5, 1, 2,
	4, 4, 6, 3, 3, 4, 1, 2, 1, 1,
	1, 1, 1, 0, 1, 1, 2, 1, 1, 1,
	1, 1, 0, 2, 0, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 2, 2, 1, 3, 5,
	4, 4, 1, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -23, -3, -27, -14, -21, -20, -13,
	-16, -24, -4, -34, -8, -6, -32, 49, 48, -15,
	27, 33, -5, -37, -55, 50, -42, 53, -17, -19,
	45, -48, -18, -7, 11, 18, -59, -44, 54, 56,
	23, 40, 38, 55, 10, 42, 25, 15, 13, 14,
	-22, -26, 19, 12, 20, -28, -33, 9, 14, -1,
	-24, -31, -38, -39, 13, 14, 17, 31, 35, 37,
	-2, -32, -21, -20, -13, -19, 48, -14, -13, -14,
	-29, -13, -35, 17, 35, 36, 41, 43, 44, -14,
	-13, -19, -35, -29, -3, -37, -13, -16, -14, -35,
	-11, -10, 22, -41, 46, 35, 51, 52, 28, 21,
	-35, -8, -38, 48, 17, 35, 42, 18, 25, -51,
	-52, 14, -49, -56, -57, -58, -50, 5, 7, 28,
	29, 13, 30, 14, 26, 38, -46, -47, 14, 35,
	48, 39, -8, -59, -6, -44, -19, 25, 42, -16,
	-6, 35, -43, -53, -45, -54, 9, 14, 17, 30,
	31, -15, -17, -9, 37, 13, -26, -3, -33, 14,
	25, -39, -19, 9, -29, -14, 14, 30, -19, 9,
	-13, -6, -29, -13, -43, -14, 14, -14, -8, -4,
	-6, -14, -4, -8, -6, -38, 13, 14, -40, 42,
	-10, -10, -13, -11, -19, 35, -11, -8, 35, 30,
	-52, -50, 48, -25, 13, 16, 48, -13, -45, -54,
	-12, 46, 6, 35, 48, -15, -14, -13, -13, -20,
	-13, -21, -13, -14, -30, -19, -43, -13, -19, -13,
	-10, -8, -13, -6, 32, -19, -36, -35, -11, -11,
	-58, -56, -57, -25, 35, -43, 48, 48, 13, -20,
	-13, -14, -19, -14, -29, -13, -13, -43, -11, -8,
	48, 48, -13, 13, 13, 48, -19, -29, -13, -19,
	-13, -29, -8, -19, -11, 48, 48, 13, -13, -29,
	-14, -13, -31, 48, -19, -13, -19, -14, -8, -19,
	-19,
}

var yyDef = [...]int16{
	0, -2, 1, 0, -2, 0, 118, 0, 0, 42,
	0, 4, 46, 0, 89, 71, 35, 164, -2, 144,
	0, 0, 78, 57, 0, 182, 142, 110, -2, 115,
	37, 0, 150, 101, 59, 60, 183, 126, 153, 169,
	151, 152, 154, 155, 185, -2, -2, 128, 129, 130,
	2, 8, 10, 11, 12, 0, 38, 40, 41, 3,
	4, 0, 80, 81, 83, 84, 85, 86, 87, 88,
	16, 35, 18, 0, 42, 119, 156, 19, 45, 0,
	63, 44, 142, 65, 66, 67, 68, 69, 70, 0,
	0, 0, 0, 63, 48, 57, 0, 0, 118, 0,
	142, 94, 0, 0, 93, -2, 98, 99, 100, 96,
	0, 89, 89, 177, -2, -2, 189, 187, 188, 165,
	166, 168, 157, 175, 176, 0, 158, 192, 193, 194,
	195, 190, 162, 160, 161, 163, 143, 145, 146, 147,
	13, 0, 174, 183, 109, 126, 115, 131, 132, 111,
	112, 0, 0, 170, 135, 171, 137, -2, 139, 140,
	141, 148, 149, 102, 0, 186, 9, -2, 39, 41,
	0, 82, 20, 0, 0, 0, 173, 162, 22, 0,
	0, 54, 64, 123, 0, 124, 138, 0, -2, 52,
	71, 0, 51, 89, 75, 142, 83, 84, 90, 95,
	0, 92, 53, -2, 89, 97, 72, 89, 87, 191,
	167, 159, 178, 6, 14, 13, 0, 116, 136, 172,
	103, 106, 0, 0, 0, 47, 0, 0, 32, 0,
	42, 43, 0, 0, 0, 120, 134, 114, 121, 125,
	-2, 89, 123, 76, 91, 55, 0, 62, 77, 74,
	0, 180, 181, 7, 0, 0, 0, 0, 0, 0,
	0, 0, 33, 0, 0, 0, 0, 0, 73, 89,
	179, 104, 117, 0, 0, 0, 21, 0, 0, 23,
	0, 0, 79, 122, 56, 107, 108, 0, 24, 0,
	25, 0, 0, 105, 28, 26, 29, 27, 34, 30,
	31,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeRanges = yyDollar[1].DateTimeRanges
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeRanges = yyDollar[1].DateTimeRanges
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeRanges = yyDollar[2].DateTimeRanges
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(yyDollar[1].DateTimeRange)
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeRanges = yyDollar[2].DateTimeRanges
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeRanges = AppendDateTimeRanges(yyDollar[1].DateTimeRanges, yyDollar[3].DateTimeRange)
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRangesWithStartDates(NewRawDateFromMDsYs(yyDollar[1].string, yyDollar[2].strings, nil)...)
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRangesWithStartDates(NewRawDateFromDsMYs(yyDollar[1].strings, yyDollar[2].string, nil)...)
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRangesWithStartDates(NewRawDateFromMDsYs(yyDollar[1].string, yyDollar[2].strings, yyDollar[3].string)...)
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRangesWithStartDates(append(NewRawDateFromMDsYs(yyDollar[1].string, yyDollar[2].strings, yyDollar[6].string), NewRawDateFromMDsYs(yyDollar[4].string, yyDollar[5].strings, yyDollar[6].string)...)...)
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRangesWithStartDates(NewRawDateFromDsMYs(yyDollar[1].strings, yyDollar[2].string, yyDollar[3].string)...)
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRangesWithStartDates(append(NewRawDateFromDsMYs(yyDollar[1].strings, yyDollar[2].string, yyDollar[6].string), NewRawDateFromDsMYs(yyDollar[4].strings, yyDollar[5].string, yyDollar[6].string)...)...)
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStartEndDates(NewRawDateFromMDY(yyDollar[1].string, yyDollar[2].string, nil), NewRawDateFromMDY(yyDollar[1].string, yyDollar[4].string, nil)), NewRangeWithStartEndDates(NewRawDateFromMDY(yyDollar[1].string, yyDollar[5].string, nil), NewRawDateFromMDY(yyDollar[1].string, yyDollar[7].string, nil)))
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStartEndDates(NewRawDateFromDMY(yyDollar[1].string, yyDollar[7].string, nil), NewRawDateFromDMY(yyDollar[3].string, yyDollar[7].string, nil)), NewRangeWithStartEndDates(NewRawDateFromDMY(yyDollar[4].string, yyDollar[7].string, nil), NewRawDateFromDMY(yyDollar[6].string, yyDollar[7].string, nil)))
		}
	case 26:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStartEndDates(NewRawDateFromMDY(yyDollar[1].string, yyDollar[2].string, nil), NewRawDateFromMDY(yyDollar[1].string, yyDollar[4].string, nil)), NewRangeWithStartEndDates(NewRawDateFromMDY(yyDollar[5].string, yyDollar[6].string, nil), NewRawDateFromMDY(yyDollar[5].string, yyDollar[8].string, nil)))
		}
	case 27:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStartEndDates(NewRawDateFromDMY(yyDollar[1].string, yyDollar[4].string, nil), NewRawDateFromDMY(yyDollar[3].string, yyDollar[4].string, nil)), NewRangeWithStartEndDates(NewRawDateFromDMY(yyDollar[5].string, yyDollar[8].string, nil), NewRawDateFromDMY(yyDollar[7].string, yyDollar[8].string, nil)))
		}
	case 28:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStartEndDates(NewRawDateFromMDY(yyDollar[1].string, yyDollar[2].string, yyDollar[8].string), NewRawDateFromMDY(yyDollar[1].string, yyDollar[4].string, yyDollar[8].string)), NewRangeWithStartEndDates(NewRawDateFromMDY(yyDollar[1].string, yyDollar[5].string, yyDollar[8].string), NewRawDateFromMDY(yyDollar[1].string, yyDollar[7].string, yyDollar[8].string)))
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStartEndDates(NewRawDateFromDMY(yyDollar[1].string, yyDollar[7].string, yyDollar[8].string), NewRawDateFromDMY(yyDollar[3].string, yyDollar[7].string, yyDollar[8].string)), NewRangeWithStartEndDates(NewRawDateFromDMY(yyDollar[4].string, yyDollar[7].string, yyDollar[8].string), NewRawDateFromDMY(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string)))
		}
	case 30:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStartEndDates(NewRawDateFromMDY(yyDollar[1].string, yyDollar[2].string, yyDollar[9].string), NewRawDateFromMDY(yyDollar[1].string, yyDollar[4].string, yyDollar[9].string)), NewRangeWithStartEndDates(NewRawDateFromMDY(yyDollar[5].string, yyDollar[6].string, yyDollar[9].string), NewRawDateFromMDY(yyDollar[5].string, yyDollar[8].string, yyDollar[9].string)))
		}
	case 31:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStartEndDates(NewRawDateFromDMY(yyDollar[1].string, yyDollar[4].string, yyDollar[9].string), NewRawDateFromDMY(yyDollar[3].string, yyDollar[4].string, yyDollar[9].string)), NewRangeWithStartEndDates(NewRawDateFromDMY(yyDollar[5].string, yyDollar[8].string, yyDollar[9].string), NewRawDateFromDMY(yyDollar[7].string, yyDollar[8].string, yyDollar[9].string)))
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStartDate(NewRawDateFromMDY(yyDollar[1].string, yyDollar[2].string, nil)), NewRangeWithStartDate(NewRawDateFromMDY(yyDollar[3].string, yyDollar[4].string, nil)))
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStartDate(NewRawDateFromMDY(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string)), NewRangeWithStartDate(NewRawDateFromMDY(yyDollar[3].string, yyDollar[4].string, yyDollar[5].string)))
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRange(NewDateTime(NewRawDateFromWMDY(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, nil), yyDollar[6].Time, nil), NewDateTime(NewRawDateFromWMDY(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, nil), yyDollar[8].Time, nil)), NewRange(NewDateTime(NewRawDateFromWMDY(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string, nil), yyDollar[6].Time, nil), NewDateTime(NewRawDateFromWMDY(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string, nil), yyDollar[8].Time, nil)))
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.strings = []string{yyDollar[1].string}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.strings = []string{yyDollar[1].string, yyDollar[2].string}
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.strings = append(yyDollar[1].strings, yyDollar[2].string)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRangeWithStart(yyDollar[1].DateTime)
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeRange = yyDollar[1].DateTimeRange
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeRange = yyDollar[2].DateTimeRange
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRange(yyDollar[1].DateTime, NewDateTime(yyDollar[1].DateTime.Date, yyDollar[3].Time, yyDollar[1].DateTime.TimeZone))
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRange(NewDateTime(yyDollar[1].DateTime.Date, yyDollar[1].DateTime.Time, yyDollar[4].TimeZone), NewDateTime(yyDollar[1].DateTime.Date, yyDollar[3].Time, yyDollar[4].TimeZone))
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRange(NewDateTime(yyDollar[3].DateTime.Date, yyDollar[1].Time, yyDollar[3].DateTime.TimeZone), yyDollar[3].DateTime)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRange(yyDollar[1].DateTime, yyDollar[3].DateTime)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRangeWithStartEndDates(yyDollar[1].Date, NewRawDateFromDMY(yyDollar[3].string, nil, nil))
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRangeWithStartEndDates(NewRawDateFromDMY(yyDollar[1].string, nil, nil), yyDollar[3].Date)
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRangeWithStartEndDates(yyDollar[1].Date, NewRawDateFromMDY(nil, yyDollar[3].string, yyDollar[4].string))
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRange(NewDateTime(yyDollar[1].Date, yyDollar[2].Time, yyDollar[3].TimeZone), NewDateTime(yyDollar[1].Date, yyDollar[5].Time, yyDollar[6].TimeZone))
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTime = NewDateTimeWithDate(yyDollar[1].Date)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTime = NewDateTime(yyDollar[1].Date, nil, yyDollar[3].TimeZone)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTime = NewDateTime(yyDollar[1].Date, yyDollar[2].Time, yyDollar[3].TimeZone)
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTime = NewDateTime(yyDollar[1].Date, yyDollar[3].Time, yyDollar[4].TimeZone)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTime = NewDateTime(yyDollar[3].Date, yyDollar[1].Time, yyDollar[2].TimeZone)
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTime = NewDateTime(yyDollar[4].Date, yyDollar[1].Time, yyDollar[2].TimeZone)
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTime = NewDateTime(NewRawDateFromDMY(yyDollar[1].Date.Day, yyDollar[1].Date.Month, yyDollar[3].string), yyDollar[2].Time, yyDollar[4].TimeZone)
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.TimeZone = nil
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.TimeZone = yyDollar[1].TimeZone
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.TimeZone = yyDollar[2].TimeZone
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.TimeZone = yyDollar[2].TimeZone
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = nil
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(yyDollar[1].string, nil, nil)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(nil, yyDollar[1].string, nil)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(nil, "P", nil)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTime = NewDateTimeWithDate(yyDollar[1].Date)
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTime = NewDateTime(yyDollar[1].Date, yyDollar[2].Time, nil)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTime = NewDateTime(yyDollar[1].Date, yyDollar[2].Time, yyDollar[3].TimeZone)
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromDMY(yyDollar[5].string, yyDollar[3].string, yyDollar[1].string)
		}
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[2].string, yyDollar[4].string, yyDollar[6].string, nil)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = nil
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(nil, nil, "+"+yyDollar[2].string+":"+yyDollar[4].string)
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(nil, nil, "-"+yyDollar[2].string+":"+yyDollar[4].string)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = yyDollar[2].Date
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromRelative(yyDollar[1].string)
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromRelative(yyDollar[1].string)
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = yyDollar[2].Date
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromRelative(yyDollar[1].string)
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromAmbiguous(yyDollar[1].string, yyDollar[2].string, yyDollar[4].string, nil)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromDMY(nil, nil, yyDollar[1].string)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromDMY(nil, yyDollar[3].string, yyDollar[1].string)
		}
	case 117:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromDMY(yyDollar[5].string, yyDollar[3].string, yyDollar[1].string)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromMDY(yyDollar[1].string, nil, nil)
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromMDY(yyDollar[1].string, nil, yyDollar[2].string)
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromWMDY(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[4].string)
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromWDMY(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[4].string)
		}
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromAmbiguous(yyDollar[1].string, yyDollar[2].string, yyDollar[4].string, yyDollar[6].string)
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromWMDY(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, nil)
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromWDMY(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, nil)
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromWDMY(yyDollar[1].string, yyDollar[4].string, yyDollar[3].string, yyDollar[2].string)
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = ""
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = yyDollar[2].string
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = "TH"
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = yyDollar[2].Time
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = NewAMTime(yyDollar[1].string, nil, nil, nil)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = NewPMTime(yyDollar[1].string, nil, nil, nil)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, nil, nil, nil)
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, yyDollar[3].string, nil, nil)
		}
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, yyDollar[3].string, yyDollar[5].string, nil)
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Time = NewAMTime(yyDollar[1].string, yyDollar[3].string, nil, nil)
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Time = NewPMTime(yyDollar[1].string, yyDollar[3].string, nil, nil)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, nil, nil, nil)
		}
	}
	goto yystack /* stack new state and value */
}
