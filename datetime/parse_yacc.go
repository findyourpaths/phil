// Code generated by goyacc -l -o parse_yacc.go -v parse_yacc.states.txt parse_yacc.y. DO NOT EDIT.
package datetime

import __yyfmt__ "fmt"

import "cloud.google.com/go/civil"

type yySymType struct {
	yys              int
	DateTimeTZRanges *DateTimeTZRanges
	DateTimeTZRange  *DateTimeTZRange
	DateTimeTZ       *DateTimeTZ
	Date             civil.Date
	Time             civil.Time
	TimeZone         *TimeZone
	string           string
	strings          []string
}

const ILLEGAL = 57346
const AM = 57347
const AMP = 57348
const AND = 57349
const AT = 57350
const BEGINNING = 57351
const CALENDAR = 57352
const COLON = 57353
const COMMA = 57354
const DATE = 57355
const DEC = 57356
const FROM = 57357
const GOOGLE = 57358
const ICS = 57359
const IN = 57360
const LPAREN = 57361
const OF = 57362
const ON = 57363
const ORD_IND = 57364
const PM = 57365
const PERIOD = 57366
const QUO = 57367
const RPAREN = 57368
const SEMICOLON = 57369
const SUB = 57370
const THROUGH = 57371
const T = 57372
const TH = 57373
const TILL = 57374
const TIME = 57375
const TO = 57376
const UNTIL = 57377
const WHEN = 57378
const IDENT = 57379
const INT = 57380
const MONTH_NAME = 57381
const TIME_ZONE = 57382
const TIME_ZONE_ABBREV = 57383
const WEEKDAY_NAME = 57384
const YEAR = 57385

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ILLEGAL",
	"AM",
	"AMP",
	"AND",
	"AT",
	"BEGINNING",
	"CALENDAR",
	"COLON",
	"COMMA",
	"DATE",
	"DEC",
	"FROM",
	"GOOGLE",
	"ICS",
	"IN",
	"LPAREN",
	"OF",
	"ON",
	"ORD_IND",
	"PM",
	"PERIOD",
	"QUO",
	"RPAREN",
	"SEMICOLON",
	"SUB",
	"THROUGH",
	"T",
	"TH",
	"TILL",
	"TIME",
	"TO",
	"UNTIL",
	"WHEN",
	"IDENT",
	"INT",
	"MONTH_NAME",
	"TIME_ZONE",
	"TIME_ZONE_ABBREV",
	"WEEKDAY_NAME",
	"YEAR",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 16,
	14, 124,
	25, 124,
	28, 124,
	29, 124,
	32, 124,
	34, 124,
	35, 124,
	38, 124,
	39, 124,
	-2, 138,
	-1, 30,
	8, 155,
	15, 155,
	-2, 108,
	-1, 31,
	8, 157,
	15, 157,
	-2, 110,
	-1, 32,
	8, 158,
	15, 158,
	-2, 111,
	-1, 44,
	7, 34,
	-2, 101,
	-1, 56,
	12, 117,
	24, 117,
	25, 117,
	-2, 63,
	-1, 57,
	12, 119,
	24, 119,
	25, 119,
	-2, 64,
	-1, 79,
	40, 87,
	41, 87,
	-2, 64,
	-1, 126,
	12, 116,
	14, 116,
	24, 116,
	25, 116,
	28, 116,
	38, 116,
	-2, 142,
	-1, 150,
	14, 80,
	-2, 40,
	-1, 193,
	14, 81,
	28, 81,
	-2, 41,
}

const yyPrivate = 57344

const yyLast = 667

var yyAct = [...]int16{
	117, 5, 156, 11, 177, 5, 194, 47, 50, 55,
	90, 72, 106, 84, 62, 222, 87, 86, 75, 6,
	105, 54, 112, 123, 76, 42, 125, 118, 12, 100,
	9, 91, 12, 68, 149, 7, 5, 72, 12, 28,
	275, 43, 268, 267, 122, 136, 266, 69, 58, 83,
	82, 59, 265, 60, 61, 46, 49, 46, 15, 164,
	28, 133, 28, 12, 12, 264, 263, 262, 261, 147,
	150, 80, 81, 258, 55, 256, 116, 8, 155, 19,
	235, 8, 44, 48, 234, 52, 162, 73, 231, 85,
	20, 165, 158, 163, 53, 218, 213, 151, 166, 212,
	141, 15, 159, 160, 66, 154, 74, 80, 81, 67,
	13, 49, 8, 73, 229, 170, 171, 55, 51, 48,
	167, 52, 49, 15, 94, 199, 92, 37, 143, 169,
	144, 146, 114, 27, 63, 181, 127, 147, 185, 137,
	93, 139, 3, 38, 190, 191, 64, 65, 39, 153,
	128, 175, 2, 70, 135, 115, 195, 40, 101, 142,
	149, 161, 188, 145, 131, 28, 134, 202, 192, 166,
	109, 18, 203, 124, 26, 193, 145, 152, 186, 130,
	110, 208, 140, 211, 145, 152, 157, 215, 129, 111,
	22, 99, 204, 113, 172, 207, 45, 205, 179, 173,
	174, 188, 221, 107, 178, 180, 102, 147, 88, 228,
	17, 220, 182, 183, 184, 206, 168, 209, 223, 187,
	189, 71, 147, 238, 21, 239, 78, 242, 224, 226,
	198, 166, 77, 196, 14, 138, 10, 247, 147, 41,
	36, 251, 252, 4, 254, 255, 148, 145, 137, 259,
	176, 35, 1, 241, 0, 244, 200, 201, 187, 210,
	0, 0, 214, 45, 52, 48, 0, 217, 0, 197,
	270, 68, 0, 271, 0, 273, 269, 225, 227, 0,
	274, 0, 223, 166, 230, 69, 58, 272, 233, 59,
	0, 60, 61, 236, 0, 149, 0, 0, 0, 216,
	28, 240, 0, 243, 0, 157, 103, 0, 45, 245,
	145, 145, 107, 0, 248, 0, 250, 0, 0, 253,
	232, 68, 0, 257, 104, 168, 260, 237, 0, 0,
	0, 197, 0, 249, 0, 69, 58, 0, 0, 59,
	0, 60, 61, 246, 138, 29, 0, 0, 30, 34,
	33, 68, 96, 0, 0, 0, 0, 0, 31, 145,
	0, 0, 0, 138, 0, 69, 58, 0, 19, 59,
	32, 60, 61, 0, 0, 16, 15, 0, 0, 20,
	28, 0, 0, 219, 38, 29, 24, 0, 30, 132,
	33, 0, 25, 0, 0, 0, 0, 0, 31, 29,
	24, 0, 30, 34, 33, 63, 25, 127, 19, 0,
	32, 0, 31, 0, 0, 16, 15, 64, 65, 20,
	28, 128, 19, 0, 32, 0, 0, 23, 0, 16,
	15, 0, 15, 20, 28, 29, 24, 0, 30, 34,
	33, 0, 25, 63, 0, 127, 0, 0, 31, 0,
	0, 119, 34, 33, 92, 64, 65, 0, 19, 128,
	32, 120, 0, 0, 0, 16, 15, 0, 93, 20,
	28, 19, 0, 121, 119, 34, 33, 0, 46, 15,
	0, 0, 20, 28, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 68, 19, 0, 121, 0, 0, 0,
	0, 46, 15, 0, 0, 20, 28, 69, 58, 0,
	19, 59, 0, 60, 61, 68, 0, 49, 0, 83,
	82, 20, 0, 0, 0, 0, 0, 0, 0, 79,
	58, 0, 63, 59, 56, 60, 61, 0, 0, 0,
	0, 80, 81, 0, 64, 65, 0, 0, 57, 58,
	0, 63, 59, 56, 60, 61, 0, 0, 49, 15,
	0, 0, 0, 64, 65, 0, 68, 57, 58, 29,
	0, 59, 95, 60, 61, 92, 96, 0, 15, 0,
	69, 58, 97, 68, 59, 0, 60, 61, 0, 93,
	49, 94, 0, 0, 98, 0, 0, 69, 58, 89,
	0, 59, 0, 60, 61, 0, 29, 49, 15, 95,
	0, 0, 92, 96, 29, 0, 126, 95, 127, 97,
	0, 96, 63, 0, 127, 0, 93, 97, 64, 65,
	0, 98, 128, 0, 64, 65, 89, 0, 128, 98,
	103, 0, 0, 15, 89, 0, 107, 109, 49, 0,
	0, 38, 0, 0, 179, 0, 39, 110, 104, 108,
	178, 180, 0, 0, 0, 0, 111,
}

var yyPact = [...]int16{
	391, -1000, 136, -1000, 391, 17, 84, 62, 520, 307,
	427, 501, 84, 561, -1000, 146, 635, -1000, 606, -1000,
	-1000, 463, 604, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 391, 377, -1000, -1000, -1000,
	136, -1000, 18, 159, 19, 129, 158, 57, -1000, 158,
	152, 73, -1000, 552, 610, -4, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 337, -1000, -1000, -1000,
	-1000, -1000, 17, 539, 337, 440, -1000, 67, 67, -1000,
	-1000, -1000, -1000, -1000, 73, 62, 31, 598, 94, 301,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 146,
	-1000, -1000, 158, -1000, -1000, 78, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 94, -1000, 393, 17, -1000, -1000,
	-1000, -1000, 610, 73, 129, -1000, -1000, -1000, -1000, 644,
	-1000, -1000, -1000, -1000, 62, 73, 73, 569, 129, -1000,
	-1000, -1000, 73, 84, 62, -1000, 431, -1000, 129, -1000,
	31, -1000, 561, 257, -1000, 31, 73, 94, 440, 99,
	-1000, 307, 307, 606, -1000, 31, -1000, -1000, -1000, -1000,
	-1000, 192, -4, 431, -1000, -1000, 188, -1000, -1000, -1000,
	-1000, 73, 84, 56, 53, 73, 62, 73, 73, 307,
	73, 52, 122, -1000, 440, 31, 431, 94, -1000, -1000,
	479, 479, 31, -1000, 76, -1000, -1000, 610, -1000, 45,
	307, 73, -1000, -1000, 41, 37, 73, 307, -1000, 129,
	440, -1000, 62, 431, 84, 48, 84, 48, -1000, -1000,
	-1000, -1000, 73, 307, -1000, -1000, 62, 73, 307, 73,
	62, 62, 73, 62, 62, 32, 73, 30, 62, 552,
	25, 24, 23, 22, 9, 3, -1000, 0, -1000, -1,
	431, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 62,
	112, 606, 112, 31, -3, -1000,
}

var yyPgo = [...]uint8{
	0, 252, 152, 142, 30, 110, 24, 6, 76, 0,
	190, 35, 19, 3, 251, 250, 4, 243, 240, 109,
	234, 127, 236, 94, 27, 2, 15, 210, 16, 10,
	232, 230, 226, 224, 208, 21, 133, 14, 31, 206,
	12, 191, 29, 173, 26, 171, 20, 174, 171, 171,
}

var yyR1 = [...]int8{
	0, 14, 1, 15, 15, 16, 16, 16, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 17, 17, 20,
	18, 18, 21, 21, 11, 11, 12, 12, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 22, 22, 27,
	27, 23, 23, 19, 19, 19, 19, 19, 19, 4,
	4, 4, 4, 4, 25, 25, 28, 28, 29, 29,
	7, 7, 7, 7, 30, 31, 32, 32, 6, 6,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 33, 33, 36, 36, 36, 36,
	36, 36, 26, 26, 35, 35, 37, 37, 37, 37,
	37, 34, 34, 38, 8, 8, 39, 39, 40, 40,
	40, 40, 9, 9, 41, 41, 42, 10, 10, 10,
	43, 43, 44, 24, 24, 13, 13, 13, 13, 13,
	13, 13, 45, 45, 47, 47, 47, 47, 47, 46,
	46, 48, 48, 49, 49,
}

var yyR2 = [...]int8{
	0, 0, 4, 1, 2, 1, 1, 1, 1, 2,
	3, 2, 2, 3, 6, 3, 6, 7, 7, 8,
	8, 8, 8, 9, 9, 4, 5, 1, 2, 1,
	1, 2, 1, 1, 1, 1, 2, 2, 1, 2,
	3, 4, 3, 3, 4, 4, 5, 5, 6, 8,
	8, 8, 8, 8, 8, 14, 5, 1, 2, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 4, 3, 4, 0, 1, 1, 2, 1, 1,
	0, 1, 3, 2, 1, 1, 1, 1, 1, 1,
	2, 2, 3, 1, 3, 5, 1, 2, 3, 3,
	5, 2, 2, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 1, 1, 2,
	1, 2, 1, 1, 1, 2, 2, 2, 3, 5,
	4, 4, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 0, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -17, -9, -12, -11, -8, -4,
	-22, -13, -24, -5, -20, 39, 38, -27, -45, 31,
	42, -33, -10, 36, 9, 15, -47, -36, 43, 8,
	11, 21, 33, 13, 12, -14, -18, -21, 7, 12,
	-2, -20, -12, -11, -8, -10, 38, -9, -8, 38,
	-9, -19, -8, -23, -35, -9, 14, 28, 29, 32,
	34, 35, -37, 12, 24, 25, -23, -19, 14, 28,
	-3, -27, -9, -8, -23, -7, -6, -30, -32, 28,
	40, 41, 19, 18, -9, -8, -13, -28, -34, 38,
	-29, -38, 14, 28, 30, 11, 15, 21, 33, -41,
	-42, 12, -39, 5, 23, -46, -40, 11, 24, 12,
	22, 31, -13, -47, -5, -36, -8, -9, -24, 11,
	21, 33, -35, -9, -43, -44, 12, 14, 28, -2,
	-3, -21, 12, 43, 7, -19, -9, -23, -10, 12,
	24, 43, 7, -8, -8, -19, -8, -37, -10, 38,
	-13, -4, -5, -8, -4, -13, -25, -5, -28, -6,
	-6, -8, -9, -7, 28, -13, -29, -38, 24, -42,
	-40, 38, -8, -8, -8, -44, -15, -16, 16, 10,
	17, -9, -8, -8, -8, -9, -11, -8, -12, -8,
	-9, -9, -35, -6, -7, -13, -8, -5, -31, 26,
	-23, -23, -13, -7, -46, 5, 23, -35, -16, -11,
	-8, -9, 43, 43, -8, -9, -19, -8, 43, -10,
	-28, -7, -26, -35, -24, -8, -24, -8, -7, 38,
	-8, 43, -19, -8, 43, 43, -8, -19, -9, -9,
	-8, -24, -9, -8, -24, -8, -19, -9, -8, -23,
	-8, -9, -9, -8, -9, -9, 43, -8, 43, -9,
	-8, 43, 43, 43, 43, 43, 43, 43, 43, -26,
	-9, -25, -28, -13, -7, 43,
}

var yyDef = [...]int16{
	0, -2, 1, 8, 0, 96, 0, 0, 0, 38,
	0, 80, 107, 69, 27, 132, -2, 57, 0, 143,
	144, 0, 93, 29, 59, 60, 152, 104, 137, 154,
	-2, -2, -2, 106, 109, 0, 0, 30, 32, 33,
	9, 27, 11, 0, -2, 97, 124, 12, 37, 124,
	0, 61, 36, 0, 0, 102, -2, -2, 65, 66,
	67, 68, 114, 116, 118, 120, 0, 61, 63, 64,
	39, 57, 96, 0, 0, 0, 81, 0, 0, -2,
	88, 89, 84, 86, 0, 0, 80, 0, 91, 0,
	76, 121, 78, 79, 123, 155, 156, 157, 158, 133,
	134, 136, 125, 146, 147, 0, 126, 159, 130, 128,
	129, 131, 145, 152, 90, 104, 0, 96, 107, 108,
	110, 111, 0, 0, 139, 140, -2, 117, 119, 0,
	10, 31, 33, 13, 0, 61, 0, 0, 98, 142,
	130, 15, 0, 0, 0, 62, 92, 115, 99, 138,
	-2, 43, 69, 101, 42, 80, 0, 72, 0, 0,
	83, 0, 0, 70, 87, 80, 77, 122, 160, 135,
	127, 148, 101, 94, 103, 141, 2, 3, 5, 6,
	7, 0, 0, 25, 44, 0, 0, 34, 35, 0,
	0, 45, 0, -2, 0, 80, 112, 73, 82, 85,
	0, 0, 80, 71, 0, 150, 151, 0, 4, 0,
	0, 0, 26, 46, 0, 0, 0, 0, 47, 100,
	0, 70, 0, 113, 0, 0, 0, 0, 56, 149,
	95, 14, 0, 0, 48, 16, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 17, 0, 18, 0, 0,
	0, 0, 0, 0, 0, 0, 21, 19, 22, 20,
	112, 49, 50, 51, 52, 53, 54, 23, 24, 0,
	74, 0, 75, 80, 0, 55,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = yyDollar[1].DateTimeTZRanges
		}
	case 2:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = yyDollar[1].DateTimeTZRanges
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = &DateTimeTZRanges{Items: []*DateTimeTZRange{yyDollar[1].DateTimeTZRange}}
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = yyDollar[2].DateTimeTZRanges
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = AppendDateTimeTZRanges(yyDollar[1].DateTimeTZRanges, yyDollar[3].DateTimeTZRange)
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewMDsYDates(yyDollar[1].string, yyDollar[2].strings, nil)...)
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewDsMYDates(yyDollar[1].strings, yyDollar[2].string, nil)...)
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewMDsYDates(yyDollar[1].string, yyDollar[2].strings, yyDollar[3].string)...)
		}
	case 14:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(append(NewMDsYDates(yyDollar[1].string, yyDollar[2].strings, yyDollar[6].string), NewMDsYDates(yyDollar[4].string, yyDollar[5].strings, yyDollar[6].string)...)...)
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewDsMYDates(yyDollar[1].strings, yyDollar[2].string, yyDollar[3].string)...)
		}
	case 16:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(append(NewDsMYDates(yyDollar[1].strings, yyDollar[2].string, yyDollar[6].string), NewDsMYDates(yyDollar[4].strings, yyDollar[5].string, yyDollar[6].string)...)...)
		}
	case 17:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[4].string, nil)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[5].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[7].string, nil)))
		}
	case 18:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[7].string, nil), NewDMYDate(yyDollar[3].string, yyDollar[7].string, nil)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[4].string, yyDollar[7].string, nil), NewDMYDate(yyDollar[6].string, yyDollar[7].string, nil)))
		}
	case 19:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[4].string, nil)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[5].string, yyDollar[6].string, nil), NewMDYDate(yyDollar[5].string, yyDollar[8].string, nil)))
		}
	case 20:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, nil), NewDMYDate(yyDollar[3].string, yyDollar[4].string, nil)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[5].string, yyDollar[8].string, nil), NewDMYDate(yyDollar[7].string, yyDollar[8].string, nil)))
		}
	case 21:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[8].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[8].string)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[5].string, yyDollar[8].string), NewMDYDate(yyDollar[1].string, yyDollar[7].string, yyDollar[8].string)))
		}
	case 22:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[7].string, yyDollar[8].string), NewDMYDate(yyDollar[3].string, yyDollar[7].string, yyDollar[8].string)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[4].string, yyDollar[7].string, yyDollar[8].string), NewDMYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string)))
		}
	case 23:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[9].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[9].string)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[5].string, yyDollar[6].string, yyDollar[9].string), NewMDYDate(yyDollar[5].string, yyDollar[8].string, yyDollar[9].string)))
		}
	case 24:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[9].string), NewDMYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[9].string)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[5].string, yyDollar[8].string, yyDollar[9].string), NewDMYDate(yyDollar[7].string, yyDollar[8].string, yyDollar[9].string)))
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStart(NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil)), NewRangeWithStart(NewMDYDate(yyDollar[3].string, yyDollar[4].string, nil)))
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStart(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string)), NewRangeWithStart(NewMDYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[5].string)))
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.strings = []string{yyDollar[1].string}
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.strings = []string{yyDollar[1].string, yyDollar[2].string}
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.strings = append(yyDollar[1].strings, yyDollar[2].string)
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZRange = &DateTimeTZRange{Start: yyDollar[1].DateTimeTZ}
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRange = yyDollar[2].DateTimeTZRange
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(yyDollar[1].DateTimeTZ, NewDateTime(yyDollar[1].DateTimeTZ.Date, yyDollar[3].Time, yyDollar[1].DateTimeTZ.TimeZone))
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(NewDateTime(yyDollar[1].DateTimeTZ.Date, yyDollar[1].DateTimeTZ.Time, yyDollar[4].TimeZone), NewDateTime(yyDollar[1].DateTimeTZ.Date, yyDollar[3].Time, yyDollar[4].TimeZone))
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(NewDateTime(yyDollar[3].DateTimeTZ.Date, yyDollar[1].Time, yyDollar[3].DateTimeTZ.TimeZone), yyDollar[3].DateTimeTZ)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRange = &DateTimeTZRange{Start: yyDollar[1].DateTimeTZ, End: yyDollar[3].DateTimeTZ}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil), NewMDYDate(yyDollar[1].string, yyDollar[4].string, nil))
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, nil), NewDMYDate(yyDollar[3].string, yyDollar[4].string, nil))
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[5].string))
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[5].string), NewDMYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[5].string))
		}
	case 48:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[6].string), NewMDYDate(yyDollar[4].string, yyDollar[5].string, yyDollar[6].string))
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewMDYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewDMYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 51:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewDMYDate(yyDollar[5].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewMDYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 53:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewDMYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 54:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewDMYDate(yyDollar[5].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 55:
		yyDollar = yyS[yypt-14 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(NewDateTime(NewDMYDate(yyDollar[4].string, yyDollar[6].string, yyDollar[14].string), yyDollar[1].Time, yyDollar[2].TimeZone), NewDateTime(NewDMYDate(yyDollar[8].string, yyDollar[10].string, yyDollar[14].string), yyDollar[12].Time, yyDollar[13].TimeZone))
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(NewDateTime(yyDollar[1].Date, yyDollar[2].Time, yyDollar[3].TimeZone), NewDateTime(yyDollar[1].Date, yyDollar[4].Time, yyDollar[5].TimeZone))
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeWithDate(yyDollar[1].Date, nil)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTime(yyDollar[1].Date, yyDollar[2].Time, yyDollar[3].TimeZone)
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTime(yyDollar[1].Date, yyDollar[3].Time, yyDollar[4].TimeZone)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTime(yyDollar[3].Date, yyDollar[1].Time, yyDollar[2].TimeZone)
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTime(yyDollar[4].Date, yyDollar[1].Time, yyDollar[2].TimeZone)
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.TimeZone = nil
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.TimeZone = yyDollar[2].TimeZone
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.TimeZone = yyDollar[2].TimeZone
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(yyDollar[1].string, nil)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(nil, yyDollar[1].string)
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = yyDollar[2].Date
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = yyDollar[1].Date
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewAmbiguousDate(yyDollar[1].string, yyDollar[3].string, nil)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(nil, nil, yyDollar[1].string)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(nil, yyDollar[3].string, yyDollar[1].string)
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[5].string, yyDollar[3].string, yyDollar[1].string)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, nil, nil)
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, nil, yyDollar[2].string)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string)
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Date = NewAmbiguousDate(yyDollar[1].string, yyDollar[3].string, yyDollar[5].string)
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, yyDollar[2].string, nil)
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[1].string, yyDollar[2].string, nil)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[3].string, yyDollar[2].string, yyDollar[1].string)
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = yyDollar[2].Time
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = NewAMTime(yyDollar[1].string, nil, nil, nil)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = NewPMTime(yyDollar[1].string, nil, nil, nil)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, yyDollar[3].string, nil, nil)
		}
	case 149:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, yyDollar[3].string, yyDollar[5].string, nil)
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Time = NewAMTime(yyDollar[1].string, yyDollar[3].string, nil, nil)
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Time = NewPMTime(yyDollar[1].string, yyDollar[3].string, nil, nil)
		}
	}
	goto yystack /* stack new state and value */
}
