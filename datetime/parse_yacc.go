// Code generated by goyacc -l -o parse_yacc.go -v parse_yacc.states.txt parse_yacc.y. DO NOT EDIT.
package datetime

import __yyfmt__ "fmt"

type yySymType struct {
	yys            int
	DateTimeRanges *DateTimeRanges
	DateTimeRange  *DateTimeRange
	DateTime       *DateTime
	Date           *Date
	Time           *Time
	TimeZone       *TimeZone
	string         string
	strings        []string
}

const ILLEGAL = 57346
const A = 57347
const ADD = 57348
const AM = 57349
const AMP = 57350
const AND = 57351
const AT = 57352
const BEGINNING = 57353
const CALENDAR = 57354
const COLON = 57355
const COMMA = 57356
const DATE = 57357
const DATES = 57358
const DEC = 57359
const FROM = 57360
const GOOGLE = 57361
const ICS = 57362
const IN = 57363
const LPAREN = 57364
const NEXT = 57365
const OF = 57366
const ON = 57367
const ORD_IND = 57368
const PART = 57369
const P = 57370
const PM = 57371
const PERIOD = 57372
const QUO = 57373
const RPAREN = 57374
const SAVE = 57375
const SEMICOLON = 57376
const SUB = 57377
const THROUGH = 57378
const T = 57379
const TH = 57380
const THE = 57381
const THIS = 57382
const TILL = 57383
const TIME = 57384
const TO = 57385
const UNTIL = 57386
const WHEN = 57387
const Z = 57388
const IDENT = 57389
const INT = 57390
const MONTH_NAME = 57391
const TIME_NAME = 57392
const TIME_ZONE = 57393
const TIME_ZONE_ABBREV = 57394
const RELATIVE_DAY = 57395
const WEEKDAY_NAME = 57396
const WEEKDAY_SHORT_NAME = 57397
const YEAR = 57398

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ILLEGAL",
	"A",
	"ADD",
	"AM",
	"AMP",
	"AND",
	"AT",
	"BEGINNING",
	"CALENDAR",
	"COLON",
	"COMMA",
	"DATE",
	"DATES",
	"DEC",
	"FROM",
	"GOOGLE",
	"ICS",
	"IN",
	"LPAREN",
	"NEXT",
	"OF",
	"ON",
	"ORD_IND",
	"PART",
	"P",
	"PM",
	"PERIOD",
	"QUO",
	"RPAREN",
	"SAVE",
	"SEMICOLON",
	"SUB",
	"THROUGH",
	"T",
	"TH",
	"THE",
	"THIS",
	"TILL",
	"TIME",
	"TO",
	"UNTIL",
	"WHEN",
	"Z",
	"IDENT",
	"INT",
	"MONTH_NAME",
	"TIME_NAME",
	"TIME_ZONE",
	"TIME_ZONE_ABBREV",
	"RELATIVE_DAY",
	"WEEKDAY_NAME",
	"WEEKDAY_SHORT_NAME",
	"YEAR",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 4,
	25, 86,
	-2, 15,
	-1, 18,
	17, 163,
	35, 163,
	36, 163,
	41, 163,
	43, 163,
	44, 163,
	48, 163,
	49, 163,
	-2, 184,
	-1, 28,
	49, 156,
	56, 156,
	-2, 120,
	-1, 45,
	10, 196,
	18, 196,
	50, 196,
	-2, 139,
	-1, 46,
	10, 195,
	18, 195,
	50, 195,
	-2, 138,
	-1, 105,
	28, 104,
	51, 104,
	52, 104,
	-2, 75,
	-1, 156,
	9, 145,
	14, 145,
	17, 145,
	30, 145,
	31, 145,
	48, 145,
	-2, 180,
	-1, 166,
	25, 86,
	-2, 17,
	-1, 188,
	15, 96,
	23, 96,
	38, 96,
	40, 96,
	42, 96,
	48, 96,
	49, 96,
	53, 96,
	54, 96,
	55, 96,
	56, 96,
	-2, 49,
	-1, 204,
	10, 70,
	18, 70,
	25, 70,
	42, 70,
	48, 70,
	50, 70,
	-2, 81,
	-1, 241,
	9, 146,
	14, 146,
	30, 146,
	31, 146,
	-2, 74,
	-1, 246,
	15, 101,
	23, 101,
	38, 101,
	40, 101,
	48, 101,
	49, 101,
	53, 101,
	54, 101,
	55, 101,
	56, 101,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 831

var yyAct = [...]int16{
	29, 61, 237, 247, 211, 63, 7, 75, 8, 240,
	62, 91, 122, 72, 121, 73, 153, 120, 100, 19,
	154, 123, 117, 76, 17, 39, 111, 144, 144, 12,
	101, 39, 145, 6, 76, 4, 6, 108, 6, 151,
	77, 79, 39, 89, 51, 17, 96, 14, 56, 94,
	40, 160, 143, 10, 76, 17, 10, 15, 10, 176,
	106, 107, 76, 110, 325, 42, 98, 41, 170, 311,
	310, 155, 139, 171, 292, 201, 186, 288, 178, 157,
	148, 38, 43, 287, 141, 149, 265, 264, 96, 224,
	216, 166, 158, 159, 17, 165, 210, 75, 44, 91,
	185, 144, 195, 137, 167, 138, 114, 174, 98, 163,
	262, 197, 82, 115, 204, 252, 93, 170, 39, 169,
	36, 135, 189, 184, 187, 92, 80, 99, 37, 193,
	113, 192, 213, 202, 203, 176, 112, 28, 25, 208,
	188, 209, 136, 155, 91, 140, 75, 194, 186, 91,
	190, 157, 118, 83, 151, 142, 57, 190, 196, 206,
	179, 58, 312, 291, 158, 159, 222, 53, 218, 161,
	290, 84, 85, 219, 52, 54, 215, 86, 266, 87,
	88, 215, 23, 17, 239, 243, 233, 175, 231, 225,
	212, 173, 39, 64, 65, 223, 95, 66, 144, 182,
	164, 111, 218, 170, 172, 226, 221, 24, 230, 182,
	255, 67, 152, 235, 236, 68, 182, 69, 259, 246,
	130, 116, 11, 256, 185, 258, 60, 263, 257, 270,
	271, 119, 131, 233, 16, 267, 177, 276, 248, 2,
	71, 31, 1, 134, 132, 70, 59, 260, 144, 133,
	239, 26, 284, 285, 282, 251, 103, 218, 283, 200,
	269, 243, 239, 253, 273, 13, 55, 5, 293, 3,
	50, 9, 32, 296, 297, 220, 162, 33, 74, 78,
	218, 81, 90, 307, 144, 97, 22, 0, 0, 170,
	309, 278, 182, 0, 0, 280, 238, 242, 0, 218,
	0, 286, 317, 0, 175, 196, 0, 161, 0, 0,
	0, 301, 0, 304, 326, 0, 328, 254, 308, 331,
	332, 333, 334, 335, 336, 300, 0, 97, 338, 0,
	339, 315, 303, 0, 306, 319, 320, 0, 322, 323,
	340, 251, 0, 342, 78, 345, 81, 344, 83, 329,
	0, 274, 180, 0, 181, 182, 0, 0, 0, 182,
	0, 183, 238, 0, 0, 330, 84, 85, 191, 0,
	90, 182, 86, 341, 87, 88, 161, 0, 0, 76,
	161, 0, 0, 0, 0, 294, 0, 83, 0, 0,
	343, 0, 299, 57, 44, 34, 0, 48, 168, 47,
	0, 0, 35, 0, 0, 84, 85, 40, 0, 46,
	0, 86, 314, 87, 88, 214, 0, 161, 0, 161,
	214, 324, 42, 217, 41, 0, 45, 0, 0, 0,
	0, 0, 18, 17, 25, 0, 0, 27, 38, 43,
	39, 182, 0, 0, 0, 227, 228, 229, 48, 49,
	47, 232, 234, 0, 0, 109, 102, 244, 40, 245,
	146, 0, 108, 0, 249, 0, 0, 250, 0, 205,
	0, 0, 0, 42, 155, 41, 0, 147, 0, 186,
	104, 0, 157, 0, 17, 106, 107, 261, 27, 38,
	43, 39, 124, 0, 125, 158, 159, 0, 232, 268,
	128, 0, 272, 0, 81, 78, 0, 275, 0, 277,
	279, 0, 0, 76, 281, 126, 127, 207, 0, 44,
	34, 0, 48, 49, 47, 0, 0, 35, 0, 0,
	0, 0, 40, 0, 46, 289, 20, 0, 0, 0,
	0, 295, 21, 0, 0, 0, 298, 42, 155, 41,
	302, 45, 305, 186, 30, 0, 157, 18, 17, 25,
	0, 0, 27, 38, 43, 39, 313, 0, 0, 158,
	159, 316, 0, 318, 44, 0, 321, 48, 49, 47,
	0, 83, 114, 0, 0, 0, 327, 40, 0, 46,
	0, 0, 0, 0, 0, 0, 337, 0, 0, 84,
	85, 0, 42, 0, 41, 86, 45, 87, 88, 0,
	0, 0, 112, 17, 25, 0, 0, 27, 38, 43,
	39, 44, 34, 0, 48, 49, 47, 0, 0, 35,
	0, 0, 0, 0, 40, 0, 46, 0, 0, 0,
	0, 0, 44, 34, 0, 48, 49, 47, 0, 42,
	35, 41, 0, 45, 0, 40, 30, 46, 0, 18,
	17, 25, 0, 0, 27, 38, 43, 39, 0, 0,
	42, 0, 41, 0, 45, 0, 0, 0, 83, 0,
	18, 17, 25, 0, 0, 27, 38, 43, 39, 198,
	199, 47, 0, 66, 0, 0, 84, 85, 155, 40,
	0, 146, 86, 156, 87, 88, 157, 67, 0, 76,
	17, 68, 0, 69, 42, 83, 41, 0, 147, 158,
	159, 40, 0, 0, 150, 17, 0, 0, 0, 27,
	38, 43, 39, 84, 85, 155, 42, 0, 41, 86,
	186, 87, 88, 241, 0, 0, 76, 0, 0, 0,
	0, 0, 38, 43, 83, 155, 158, 159, 109, 102,
	156, 84, 85, 157, 0, 108, 0, 86, 0, 87,
	88, 0, 105, 85, 0, 0, 158, 159, 86, 0,
	87, 88, 39, 104, 0, 0, 0, 44, 106, 107,
	64, 65, 0, 0, 66, 114, 0, 124, 0, 125,
	0, 0, 115, 0, 0, 128, 130, 0, 67, 0,
	0, 0, 68, 0, 69, 0, 0, 0, 131, 113,
	126, 127, 129, 0, 0, 112, 0, 25, 0, 0,
	132,
}

var yyPact = [...]int16{
	509, 155, 147, 509, 180, 611, -14, 6, -4, 331,
	-25, -1000, 370, 632, 737, 777, -1000, 138, 792, 107,
	55, 66, -1000, -1000, 88, -1000, 435, 435, -1000, 689,
	-1000, 27, -1000, 72, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 187, -1000, -1000, -1000, -1000,
	155, -1000, -1000, -1000, -1000, 384, -1000, -1000, -1000, 155,
	-1000, 94, 180, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	147, -1000, -14, 195, 661, 121, 206, -31, -1000, 151,
	14, -1000, 331, -1000, -1000, -1000, -1000, -1000, -1000, 14,
	134, 45, 564, -1000, 180, -1000, -14, 370, -25, 564,
	676, 33, 9, 9, -1000, -1000, -1000, -1000, -1000, -1000,
	434, 777, 487, 187, -1000, -1000, 138, -1000, -1000, 206,
	-1000, -1000, 48, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 177, 116, -1000,
	-1000, -1000, -1000, -25, 746, -31, -1000, -1000, -25, -1000,
	42, 465, 121, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 160, 41, -1000, -1000, 180, -1000, -1000, 27,
	-1000, 121, -4, 14, 14, 661, -1000, -1000, 121, 14,
	6, -4, -1000, 726, 136, 465, -1000, 14, 434, -1000,
	777, 370, 14, -1000, 434, 14, -1000, 676, -1000, -1000,
	-1000, -1000, 83, -1000, 370, -1000, 434, -1000, -1000, -1000,
	487, -1000, -1000, 177, 134, 14, 75, 539, -1000, -1000,
	-1000, -1000, 39, 38, 165, -1000, 14, 6, -31, -31,
	14, -4, 14, 14, 370, 14, -31, 14, 698, 121,
	539, -1000, 698, 121, 539, -1000, 33, 676, 434, 136,
	539, -1000, -1000, 88, 370, -1000, 35, -1000, -1000, -1000,
	-31, -31, 29, 465, 157, 150, 26, -31, 370, 14,
	121, 121, -31, -31, 14, 370, 121, 88, 6, 27,
	6, 27, 62, 676, -1000, -4, 434, -1000, -1000, -1000,
	22, 21, 149, 121, 14, 370, 121, 121, -4, 14,
	180, 14, -4, -4, 14, -4, -4, 121, 370, -1000,
	-1000, -1000, 16, -31, 14, -31, -4, 88, -31, -31,
	-31, -31, -31, -31, 331, -1000, 121, -31, 121, -31,
	-1000, 121, 121, 121, 121, 121, 121, 539, 121, 121,
	-4, 180, 88, 434, -31, 121,
}

var yyPgo = [...]int16{
	0, 242, 239, 35, 29, 286, 57, 277, 47, 276,
	30, 3, 275, 271, 32, 19, 52, 137, 272, 0,
	8, 6, 270, 269, 222, 4, 44, 267, 266, 116,
	2, 1, 234, 48, 265, 112, 263, 182, 10, 5,
	259, 256, 251, 9, 128, 16, 249, 243, 241, 231,
	21, 221, 22, 212, 20, 207, 17, 14, 12, 120,
}

var yyR1 = [...]int8{
	0, 1, 1, 1, 23, 23, 24, 24, 22, 22,
	26, 26, 26, 25, 25, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 27, 27, 32, 28, 28,
	33, 33, 20, 20, 21, 21, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 34, 34, 37, 37,
	36, 36, 35, 35, 29, 29, 29, 29, 29, 29,
	4, 4, 4, 4, 4, 4, 31, 31, 38, 38,
	39, 39, 39, 39, 39, 39, 11, 11, 11, 11,
	11, 40, 40, 41, 41, 10, 10, 10, 5, 5,
	5, 7, 9, 12, 12, 12, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 42, 42, 44, 44, 44, 44, 44,
	30, 30, 43, 43, 45, 45, 45, 45, 45, 16,
	16, 46, 46, 47, 47, 15, 15, 15, 48, 48,
	17, 18, 18, 13, 13, 49, 49, 50, 50, 50,
	50, 14, 14, 51, 51, 52, 19, 19, 53, 53,
	54, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	55, 55, 59, 59, 59, 59, 59, 58, 58, 56,
	56, 57, 57,
}

var yyR2 = [...]int8{
	0, 1, 2, 2, 1, 2, 3, 4, 1, 2,
	1, 1, 1, 0, 1, 1, 2, 3, 2, 2,
	3, 6, 3, 6, 7, 7, 8, 8, 8, 8,
	9, 9, 4, 5, 8, 1, 2, 1, 1, 2,
	1, 1, 1, 1, 2, 2, 1, 4, 2, 3,
	4, 3, 3, 4, 4, 5, 5, 6, 8, 8,
	8, 8, 8, 8, 14, 6, 1, 2, 1, 1,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 3, 4, 1, 0, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 2, 3, 2,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 2,
	3, 5, 6, 1, 4, 4, 2, 1, 2, 2,
	1, 4, 1, 3, 5, 1, 2, 4, 4, 6,
	3, 3, 4, 1, 2, 1, 1, 1, 1, 1,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 0,
	2, 0, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 2, 2, 1, 3, 5, 4, 4, 1,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -23, -3, -27, -14, -21, -20, -13,
	-16, -24, -4, -34, -8, -6, -32, 49, 48, -15,
	27, 33, -5, -37, -55, 50, -42, 53, -17, -19,
	45, -48, -18, -7, 11, 18, -59, -44, 54, 56,
	23, 40, 38, 55, 10, 42, 25, 15, 13, 14,
	-22, -26, 19, 12, 20, -28, -33, 9, 14, -1,
	-24, -31, -38, -39, 13, 14, 17, 31, 35, 37,
	-2, -32, -21, -20, -13, -19, 48, -14, -13, -14,
	-29, -13, -35, 17, 35, 36, 41, 43, 44, -14,
	-13, -19, -35, -29, -3, -37, -14, -13, -16, -35,
	-11, -10, 22, -41, 46, 35, 51, 52, 28, 21,
	-8, -38, 48, 42, 18, 25, -51, -52, 14, -49,
	-56, -57, -58, -50, 5, 7, 28, 29, 13, 30,
	14, 26, 38, -46, -47, 14, 35, 48, 39, -8,
	-59, -6, -44, -16, -19, -14, 25, 42, -16, -6,
	35, -43, -53, -45, -54, 9, 14, 17, 30, 31,
	-15, -17, -9, 37, 13, -26, -3, -33, 14, 25,
	-39, -19, 9, -29, -14, -35, 14, 30, -19, 9,
	-13, -13, -29, -13, -14, -43, 14, -14, -8, -4,
	-6, -13, -14, -4, -8, -31, -6, -38, 13, 14,
	-40, 42, -10, -10, -11, 35, -8, 30, -52, -50,
	48, -25, 13, 16, -13, -14, 48, -13, -45, -54,
	-12, 46, 6, 35, 48, -15, -14, -13, -13, -13,
	-14, -20, -13, -21, -13, -14, -14, -30, -35, -19,
	-43, 17, -35, -19, -13, -13, -10, -11, -8, -13,
	-13, -6, 32, -36, -35, -11, -58, -56, -57, -25,
	-14, -13, 35, -43, 48, 48, 13, -20, -13, -14,
	-19, -19, -13, -14, -29, -13, -19, -13, -16, -13,
	-16, -13, -43, -38, -11, -30, -8, 48, 48, -13,
	13, 13, 48, -19, -29, -13, -19, -19, -13, -29,
	-8, -14, -13, -16, -14, -13, -16, -19, -14, -11,
	48, 48, 13, -13, -29, -14, -13, -31, -13, -14,
	-14, -13, -14, -14, -35, 48, -19, -13, -19, -14,
	-8, -19, -19, -19, -19, -19, -19, -13, -19, -19,
	-30, -14, -31, -8, -11, -19,
}

var yyDef = [...]int16{
	0, -2, 1, 0, -2, 0, 125, 0, 0, 42,
	0, 4, 46, 0, 96, 80, 35, 171, -2, 151,
	0, 0, 85, 66, 0, 189, 149, 117, -2, 122,
	37, 0, 157, 108, 68, 69, 190, 133, 160, 176,
	158, 159, 161, 162, 192, -2, -2, 135, 136, 137,
	2, 8, 10, 11, 12, 0, 38, 40, 41, 3,
	4, 0, 87, 88, 90, 91, 92, 93, 94, 95,
	16, 35, 18, 0, 42, 126, 163, 19, 45, 0,
	72, 44, 0, 74, 75, 76, 77, 78, 79, 0,
	0, 0, 0, 72, 48, 66, 125, 0, 0, 0,
	86, 101, 0, 0, 100, -2, 105, 106, 107, 103,
	96, 0, 184, 196, 194, 195, 172, 173, 175, 164,
	182, 183, 0, 165, 199, 200, 201, 202, 197, 169,
	167, 168, 170, 150, 152, 153, 154, 13, 0, 181,
	190, 116, 133, 0, 122, 125, 138, 139, 118, 119,
	0, 0, 177, 142, 178, 144, -2, 146, 147, 148,
	155, 156, 109, 0, 193, 9, -2, 39, 41, 0,
	89, 20, 0, 72, 0, 0, 180, 169, 22, 0,
	0, 0, 73, 130, 131, 0, 145, 0, -2, 52,
	80, 0, 0, 51, 96, 0, 83, 87, 90, 91,
	97, 102, 0, 99, -2, 104, 96, 198, 174, 166,
	185, 6, 14, 13, 0, 0, 0, 123, 143, 179,
	110, 113, 0, 0, 0, 47, 0, 0, 32, 53,
	0, 0, 42, 43, 0, 0, 54, 0, 149, 127,
	141, -2, 149, 128, 121, 132, -2, 149, 96, 130,
	140, 84, 98, 0, 71, 82, 0, 187, 188, 7,
	131, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	33, 55, 0, 0, 0, 0, 56, 0, 0, 149,
	0, 149, 0, 149, 81, 0, 96, 186, 111, 124,
	0, 0, 0, 21, 0, 0, 57, 23, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 129, 0, 65,
	114, 115, 0, 24, 0, 25, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 28, 26, 29, 27,
	34, 58, 59, 60, 61, 62, 63, 140, 30, 31,
	0, 86, 0, 96, 0, 64,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeRanges = yyDollar[1].DateTimeRanges
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeRanges = yyDollar[1].DateTimeRanges
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeRanges = yyDollar[2].DateTimeRanges
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeRanges = &DateTimeRanges{Items: []*DateTimeRange{yyDollar[1].DateTimeRange}}
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeRanges = yyDollar[2].DateTimeRanges
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeRanges = AppendDateTimeRanges(yyDollar[1].DateTimeRanges, yyDollar[3].DateTimeRange)
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRangesWithStartDates(NewRawDateFromMDsYs(yyDollar[1].string, yyDollar[2].strings, nil)...)
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRangesWithStartDates(NewRawDateFromDsMYs(yyDollar[1].strings, yyDollar[2].string, nil)...)
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRangesWithStartDates(NewRawDateFromMDsYs(yyDollar[1].string, yyDollar[2].strings, yyDollar[3].string)...)
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRangesWithStartDates(append(NewRawDateFromMDsYs(yyDollar[1].string, yyDollar[2].strings, yyDollar[6].string), NewRawDateFromMDsYs(yyDollar[4].string, yyDollar[5].strings, yyDollar[6].string)...)...)
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRangesWithStartDates(NewRawDateFromDsMYs(yyDollar[1].strings, yyDollar[2].string, yyDollar[3].string)...)
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRangesWithStartDates(append(NewRawDateFromDsMYs(yyDollar[1].strings, yyDollar[2].string, yyDollar[6].string), NewRawDateFromDsMYs(yyDollar[4].strings, yyDollar[5].string, yyDollar[6].string)...)...)
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStartEndDates(NewRawDateFromMDY(yyDollar[1].string, yyDollar[2].string, nil), NewRawDateFromMDY(yyDollar[1].string, yyDollar[4].string, nil)), NewRangeWithStartEndDates(NewRawDateFromMDY(yyDollar[1].string, yyDollar[5].string, nil), NewRawDateFromMDY(yyDollar[1].string, yyDollar[7].string, nil)))
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStartEndDates(NewRawDateFromDMY(yyDollar[1].string, yyDollar[7].string, nil), NewRawDateFromDMY(yyDollar[3].string, yyDollar[7].string, nil)), NewRangeWithStartEndDates(NewRawDateFromDMY(yyDollar[4].string, yyDollar[7].string, nil), NewRawDateFromDMY(yyDollar[6].string, yyDollar[7].string, nil)))
		}
	case 26:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStartEndDates(NewRawDateFromMDY(yyDollar[1].string, yyDollar[2].string, nil), NewRawDateFromMDY(yyDollar[1].string, yyDollar[4].string, nil)), NewRangeWithStartEndDates(NewRawDateFromMDY(yyDollar[5].string, yyDollar[6].string, nil), NewRawDateFromMDY(yyDollar[5].string, yyDollar[8].string, nil)))
		}
	case 27:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStartEndDates(NewRawDateFromDMY(yyDollar[1].string, yyDollar[4].string, nil), NewRawDateFromDMY(yyDollar[3].string, yyDollar[4].string, nil)), NewRangeWithStartEndDates(NewRawDateFromDMY(yyDollar[5].string, yyDollar[8].string, nil), NewRawDateFromDMY(yyDollar[7].string, yyDollar[8].string, nil)))
		}
	case 28:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStartEndDates(NewRawDateFromMDY(yyDollar[1].string, yyDollar[2].string, yyDollar[8].string), NewRawDateFromMDY(yyDollar[1].string, yyDollar[4].string, yyDollar[8].string)), NewRangeWithStartEndDates(NewRawDateFromMDY(yyDollar[1].string, yyDollar[5].string, yyDollar[8].string), NewRawDateFromMDY(yyDollar[1].string, yyDollar[7].string, yyDollar[8].string)))
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStartEndDates(NewRawDateFromDMY(yyDollar[1].string, yyDollar[7].string, yyDollar[8].string), NewRawDateFromDMY(yyDollar[3].string, yyDollar[7].string, yyDollar[8].string)), NewRangeWithStartEndDates(NewRawDateFromDMY(yyDollar[4].string, yyDollar[7].string, yyDollar[8].string), NewRawDateFromDMY(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string)))
		}
	case 30:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStartEndDates(NewRawDateFromMDY(yyDollar[1].string, yyDollar[2].string, yyDollar[9].string), NewRawDateFromMDY(yyDollar[1].string, yyDollar[4].string, yyDollar[9].string)), NewRangeWithStartEndDates(NewRawDateFromMDY(yyDollar[5].string, yyDollar[6].string, yyDollar[9].string), NewRawDateFromMDY(yyDollar[5].string, yyDollar[8].string, yyDollar[9].string)))
		}
	case 31:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStartEndDates(NewRawDateFromDMY(yyDollar[1].string, yyDollar[4].string, yyDollar[9].string), NewRawDateFromDMY(yyDollar[3].string, yyDollar[4].string, yyDollar[9].string)), NewRangeWithStartEndDates(NewRawDateFromDMY(yyDollar[5].string, yyDollar[8].string, yyDollar[9].string), NewRawDateFromDMY(yyDollar[7].string, yyDollar[8].string, yyDollar[9].string)))
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStart(NewRawDateFromMDY(yyDollar[1].string, yyDollar[2].string, nil)), NewRangeWithStart(NewRawDateFromMDY(yyDollar[3].string, yyDollar[4].string, nil)))
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRangeWithStart(NewRawDateFromMDY(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string)), NewRangeWithStart(NewRawDateFromMDY(yyDollar[3].string, yyDollar[4].string, yyDollar[5].string)))
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeRanges = NewRanges(NewRange(NewDateTime(NewRawDateFromWMDY(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, nil), yyDollar[6].Time, nil), NewDateTime(NewRawDateFromWMDY(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, nil), yyDollar[8].Time, nil)), NewRange(NewDateTime(NewRawDateFromWMDY(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string, nil), yyDollar[6].Time, nil), NewDateTime(NewRawDateFromWMDY(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string, nil), yyDollar[8].Time, nil)))
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.strings = []string{yyDollar[1].string}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.strings = []string{yyDollar[1].string, yyDollar[2].string}
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.strings = append(yyDollar[1].strings, yyDollar[2].string)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeRange = &DateTimeRange{Start: yyDollar[1].DateTime}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeRange = yyDollar[1].DateTimeRange
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeRange = yyDollar[2].DateTimeRange
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRange(yyDollar[1].DateTime, NewDateTime(yyDollar[1].DateTime.Date, yyDollar[3].Time, yyDollar[1].DateTime.TimeZone))
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRange(NewDateTime(yyDollar[1].DateTime.Date, yyDollar[1].DateTime.Time, yyDollar[4].TimeZone), NewDateTime(yyDollar[1].DateTime.Date, yyDollar[3].Time, yyDollar[4].TimeZone))
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRange(NewDateTime(yyDollar[3].DateTime.Date, yyDollar[1].Time, yyDollar[3].DateTime.TimeZone), yyDollar[3].DateTime)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeRange = &DateTimeRange{Start: yyDollar[1].DateTime, End: yyDollar[3].DateTime}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRangeWithStartEndDates(NewRawDateFromMDY(yyDollar[1].string, yyDollar[2].string, nil), NewRawDateFromMDY(yyDollar[1].string, yyDollar[4].string, nil))
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRangeWithStartEndDates(NewRawDateFromDMY(yyDollar[1].string, yyDollar[4].string, nil), NewRawDateFromDMY(yyDollar[3].string, yyDollar[4].string, nil))
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRangeWithStartEndDates(NewRawDateFromMDY(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string), NewRawDateFromMDY(yyDollar[1].string, yyDollar[4].string, yyDollar[5].string))
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRangeWithStartEndDates(NewRawDateFromDMY(yyDollar[1].string, yyDollar[4].string, yyDollar[5].string), NewRawDateFromDMY(yyDollar[3].string, yyDollar[4].string, yyDollar[5].string))
		}
	case 57:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRangeWithStartEndDates(NewRawDateFromMDY(yyDollar[1].string, yyDollar[2].string, yyDollar[6].string), NewRawDateFromMDY(yyDollar[4].string, yyDollar[5].string, yyDollar[6].string))
		}
	case 58:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRangeWithStartEndDates(NewRawDateFromWMDY(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewRawDateFromWMDY(yyDollar[5].string, yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRangeWithStartEndDates(NewRawDateFromWMDY(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewRawDateFromWDMY(yyDollar[5].string, yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRangeWithStartEndDates(NewRawDateFromWMDY(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewRawDateFromWDMY(yyDollar[6].string, yyDollar[5].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 61:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRangeWithStartEndDates(NewRawDateFromWDMY(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewRawDateFromWMDY(yyDollar[5].string, yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 62:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRangeWithStartEndDates(NewRawDateFromWDMY(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewRawDateFromWDMY(yyDollar[5].string, yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 63:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRangeWithStartEndDates(NewRawDateFromWDMY(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewRawDateFromWDMY(yyDollar[6].string, yyDollar[5].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 64:
		yyDollar = yyS[yypt-14 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRange(NewDateTime(NewRawDateFromDMY(yyDollar[4].string, yyDollar[6].string, yyDollar[14].string), yyDollar[1].Time, yyDollar[2].TimeZone), NewDateTime(NewRawDateFromDMY(yyDollar[8].string, yyDollar[10].string, yyDollar[14].string), yyDollar[12].Time, yyDollar[13].TimeZone))
		}
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeRange = NewRange(NewDateTime(yyDollar[1].Date, yyDollar[2].Time, yyDollar[3].TimeZone), NewDateTime(yyDollar[1].Date, yyDollar[5].Time, yyDollar[6].TimeZone))
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTime = NewDateTimeWithDate(yyDollar[1].Date)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTime = NewDateTime(yyDollar[1].Date, yyDollar[2].Time, yyDollar[3].TimeZone)
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTime = NewDateTime(yyDollar[1].Date, yyDollar[3].Time, yyDollar[4].TimeZone)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTime = NewDateTime(yyDollar[3].Date, yyDollar[1].Time, yyDollar[2].TimeZone)
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTime = NewDateTime(yyDollar[4].Date, yyDollar[1].Time, yyDollar[2].TimeZone)
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.TimeZone = nil
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.TimeZone = yyDollar[1].TimeZone
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.TimeZone = yyDollar[2].TimeZone
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.TimeZone = yyDollar[2].TimeZone
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = nil
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(yyDollar[1].string, nil, nil)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(nil, yyDollar[1].string, nil)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(nil, "P", nil)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTime = NewDateTimeWithDate(yyDollar[1].Date)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTime = NewDateTime(yyDollar[1].Date, yyDollar[2].Time, nil)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTime = NewDateTime(yyDollar[1].Date, yyDollar[2].Time, yyDollar[3].TimeZone)
		}
	case 111:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromDMY(yyDollar[5].string, yyDollar[3].string, yyDollar[1].string)
		}
	case 112:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[2].string, yyDollar[4].string, yyDollar[6].string, nil)
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TimeZone = nil
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(nil, nil, "+"+yyDollar[2].string+":"+yyDollar[4].string)
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.TimeZone = NewTimeZone(nil, nil, "-"+yyDollar[2].string+":"+yyDollar[4].string)
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = yyDollar[2].Date
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromRelative(yyDollar[1].string)
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromRelative(yyDollar[1].string)
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = yyDollar[2].Date
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromRelative(yyDollar[1].string)
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromAmbiguous(yyDollar[1].string, yyDollar[2].string, yyDollar[4].string, nil)
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromDMY(nil, nil, yyDollar[1].string)
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromDMY(nil, yyDollar[3].string, yyDollar[1].string)
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromDMY(yyDollar[5].string, yyDollar[3].string, yyDollar[1].string)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromMDY(yyDollar[1].string, nil, nil)
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromMDY(yyDollar[1].string, nil, yyDollar[2].string)
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromWMDY(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[4].string)
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromWDMY(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, yyDollar[4].string)
		}
	case 129:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromAmbiguous(yyDollar[1].string, yyDollar[2].string, yyDollar[4].string, yyDollar[6].string)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromWMDY(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, nil)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromWDMY(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string, nil)
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Date = NewRawDateFromWDMY(yyDollar[1].string, yyDollar[4].string, yyDollar[3].string, yyDollar[2].string)
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = ""
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = yyDollar[2].string
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = "TH"
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = yyDollar[2].Time
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = NewAMTime(yyDollar[1].string, nil, nil, nil)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = NewPMTime(yyDollar[1].string, nil, nil, nil)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, nil, nil, nil)
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, yyDollar[3].string, nil, nil)
		}
	case 186:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, yyDollar[3].string, yyDollar[5].string, nil)
		}
	case 187:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Time = NewAMTime(yyDollar[1].string, yyDollar[3].string, nil, nil)
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Time = NewPMTime(yyDollar[1].string, yyDollar[3].string, nil, nil)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, nil, nil, nil)
		}
	}
	goto yystack /* stack new state and value */
}
