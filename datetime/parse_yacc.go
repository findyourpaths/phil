// Code generated by goyacc -l -o parse_yacc.go -v parse_yacc.states.txt parse_yacc.y. DO NOT EDIT.
package datetime

import __yyfmt__ "fmt"

import "cloud.google.com/go/civil"

type yySymType struct {
	yys              int
	DateTimeTZRanges *DateTimeTZRanges
	DateTimeTZRange  *DateTimeTZRange
	DateTimeTZ       *DateTimeTZ
	Date             civil.Date
	Time             civil.Time
	string           string
	strings          []string
}

const ILLEGAL = 57346
const AM = 57347
const AMP = 57348
const AND = 57349
const AT = 57350
const BEGINNING = 57351
const CALENDAR = 57352
const COLON = 57353
const COMMA = 57354
const DATE = 57355
const DEC = 57356
const FROM = 57357
const GOOGLE = 57358
const ICS = 57359
const OF = 57360
const ON = 57361
const ORD_IND = 57362
const PM = 57363
const PERIOD = 57364
const QUO = 57365
const SEMICOLON = 57366
const SUB = 57367
const THROUGH = 57368
const T = 57369
const TH = 57370
const TILL = 57371
const TIME = 57372
const TO = 57373
const UNTIL = 57374
const WHEN = 57375
const IDENT = 57376
const MONTH_NAME = 57377
const WEEKDAY_NAME = 57378
const YEAR = 57379
const INT = 57380

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ILLEGAL",
	"AM",
	"AMP",
	"AND",
	"AT",
	"BEGINNING",
	"CALENDAR",
	"COLON",
	"COMMA",
	"DATE",
	"DEC",
	"FROM",
	"GOOGLE",
	"ICS",
	"OF",
	"ON",
	"ORD_IND",
	"PM",
	"PERIOD",
	"QUO",
	"SEMICOLON",
	"SUB",
	"THROUGH",
	"T",
	"TH",
	"TILL",
	"TIME",
	"TO",
	"UNTIL",
	"WHEN",
	"IDENT",
	"MONTH_NAME",
	"WEEKDAY_NAME",
	"YEAR",
	"INT",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 30,
	8, 138,
	15, 138,
	19, 138,
	-2, 95,
	-1, 32,
	8, 141,
	15, 141,
	19, 141,
	-2, 97,
	-1, 44,
	7, 33,
	-2, 88,
	-1, 55,
	12, 101,
	22, 101,
	23, 101,
	-2, 60,
	-1, 56,
	12, 103,
	22, 103,
	23, 103,
	-2, 61,
}

const yyPrivate = 57344

const yyLast = 546

var yyAct = [...]uint8{
	78, 8, 13, 52, 8, 80, 44, 48, 87, 51,
	75, 68, 101, 74, 90, 69, 159, 86, 53, 117,
	102, 6, 77, 46, 108, 61, 14, 42, 7, 15,
	201, 11, 46, 96, 43, 154, 8, 68, 28, 46,
	76, 4, 112, 48, 243, 51, 123, 46, 127, 110,
	241, 132, 65, 133, 135, 23, 240, 237, 236, 235,
	234, 45, 79, 5, 233, 232, 5, 230, 138, 47,
	49, 54, 139, 67, 142, 73, 144, 228, 120, 136,
	147, 207, 206, 146, 83, 12, 113, 203, 12, 148,
	149, 194, 189, 146, 71, 12, 141, 188, 5, 67,
	128, 140, 28, 150, 145, 72, 57, 126, 130, 58,
	137, 59, 60, 155, 156, 15, 70, 28, 46, 153,
	12, 12, 19, 45, 15, 50, 164, 165, 166, 152,
	20, 54, 169, 171, 91, 45, 157, 143, 136, 37,
	71, 54, 127, 131, 176, 81, 177, 178, 175, 27,
	118, 72, 57, 170, 174, 58, 82, 59, 60, 97,
	168, 125, 124, 28, 169, 186, 76, 180, 190, 134,
	51, 48, 111, 193, 183, 184, 121, 21, 197, 199,
	18, 146, 26, 200, 202, 170, 134, 163, 205, 116,
	167, 66, 185, 208, 128, 172, 173, 211, 95, 214,
	136, 216, 145, 128, 109, 217, 161, 179, 98, 136,
	220, 221, 160, 162, 224, 88, 2, 71, 9, 229,
	40, 22, 41, 84, 34, 33, 81, 187, 72, 57,
	195, 191, 58, 10, 59, 60, 239, 82, 238, 36,
	19, 242, 85, 3, 134, 146, 38, 15, 20, 28,
	46, 39, 119, 158, 62, 35, 114, 1, 0, 210,
	105, 213, 196, 198, 63, 64, 0, 115, 106, 0,
	129, 219, 0, 0, 222, 223, 107, 225, 226, 227,
	46, 71, 212, 231, 215, 0, 0, 0, 192, 0,
	0, 0, 72, 57, 134, 134, 58, 0, 59, 60,
	0, 0, 15, 204, 0, 46, 0, 0, 29, 0,
	209, 30, 34, 33, 71, 93, 0, 134, 0, 31,
	0, 0, 218, 0, 0, 72, 57, 0, 19, 58,
	32, 59, 60, 0, 0, 15, 20, 28, 16, 38,
	29, 24, 0, 30, 122, 33, 0, 25, 181, 0,
	0, 31, 29, 24, 103, 30, 34, 33, 0, 25,
	19, 0, 32, 31, 182, 151, 0, 15, 20, 28,
	16, 0, 19, 0, 32, 0, 0, 17, 0, 15,
	20, 28, 16, 29, 24, 99, 30, 34, 33, 0,
	25, 103, 105, 0, 31, 0, 0, 0, 0, 0,
	106, 100, 104, 19, 62, 32, 55, 0, 107, 0,
	15, 20, 28, 16, 63, 64, 0, 56, 57, 0,
	71, 58, 0, 59, 60, 0, 0, 15, 0, 0,
	46, 72, 57, 0, 19, 58, 0, 59, 60, 0,
	29, 0, 20, 92, 46, 0, 81, 93, 84, 34,
	33, 31, 0, 62, 0, 114, 0, 82, 62, 91,
	114, 0, 94, 63, 64, 19, 115, 85, 63, 64,
	89, 115, 15, 20, 28, 46, 29, 71, 28, 92,
	0, 15, 81, 93, 0, 0, 0, 31, 72, 57,
	0, 0, 58, 82, 59, 60, 0, 62, 94, 55,
	0, 46, 29, 0, 0, 92, 89, 63, 64, 93,
	56, 57, 99, 31, 58, 0, 59, 60, 103, 0,
	15, 0, 0, 62, 94, 114, 0, 0, 100, 151,
	0, 0, 89, 63, 64, 38, 115, 0, 161, 0,
	39, 0, 0, 0, 160, 162,
}

var yyPact = [...]int16{
	344, -1000, 239, 344, -1000, 1, -6, 89, 392, -1000,
	375, 203, -6, 212, 432, 147, 380, -1000, -1000, -1000,
	-1000, 494, 437, 446, -1000, -1000, -1000, -1000, 138, -1000,
	-1000, -1000, -1000, -1000, -1000, 344, 332, -1000, -1000, -1000,
	239, -1000, 9, 155, 80, -1000, 248, 71, -1000, 136,
	-15, -1000, 463, 242, 65, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1, 485, 300,
	-1000, -1000, -1000, -15, 89, -15, 107, 212, 446, 1,
	-1000, -1000, -1000, -1000, -1000, -1000, 494, 468, 107, 507,
	-1000, -1000, -1000, -1000, -1000, 147, -1000, -1000, 248, -1000,
	-1000, -3, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	107, -1000, 242, -15, -1000, -1000, 138, -1000, -1000, 528,
	-1000, -1000, -1000, -1000, 89, -15, -15, 267, -1000, -1000,
	-1000, -15, -6, 89, -1000, 511, -1000, -1000, 126, 212,
	-1000, 432, 203, 203, 89, 107, -1000, 65, -1000, -1000,
	-1000, -1000, -1000, -1000, 343, 511, -1000, -1000, 196, -1000,
	-1000, -1000, -1000, -15, -6, 60, 55, -15, 89, -15,
	-15, 203, -15, 54, 441, 212, -1000, 406, 406, 203,
	-8, -1000, -1000, 242, -1000, 50, 203, -15, -1000, -1000,
	45, 44, -15, 203, -1000, -1000, -6, 94, -6, 94,
	463, -1000, -1000, -1000, -15, 203, -1000, -1000, 89, -15,
	-15, 89, 89, -15, 89, 89, 89, 40, -15, 30,
	89, 28, 27, 23, 22, 21, 20, 131, -1000, 19,
	-1000, 13, -1000, -1000, -1000, -1000, -1000, -1000, 494, 131,
	-1000, -1000, 7, -1000,
}

var yyPgo = [...]int16{
	0, 257, 216, 41, 31, 26, 0, 62, 55, 28,
	21, 2, 255, 253, 16, 243, 239, 116, 218, 139,
	233, 3, 84, 10, 180, 8, 5, 221, 215, 18,
	149, 25, 14, 208, 20, 198, 33, 189, 19, 177,
	12, 182, 177, 177,
}

var yyR1 = [...]int8{
	0, 12, 1, 13, 13, 14, 14, 14, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 15, 15, 18, 16,
	16, 19, 19, 9, 9, 10, 10, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 20, 20, 24, 24, 21, 21,
	17, 17, 17, 17, 17, 17, 4, 4, 4, 4,
	4, 23, 23, 25, 25, 26, 26, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 27, 27, 30, 30, 30, 30, 30, 29, 29,
	31, 31, 31, 31, 31, 28, 28, 32, 6, 6,
	33, 33, 34, 34, 34, 34, 7, 7, 35, 35,
	36, 8, 8, 37, 37, 38, 22, 22, 11, 11,
	11, 11, 11, 11, 11, 39, 39, 41, 41, 41,
	41, 41, 40, 40, 42, 42, 43, 43,
}

var yyR2 = [...]int8{
	0, 0, 4, 1, 2, 1, 1, 1, 2, 1,
	3, 2, 2, 3, 6, 3, 6, 7, 7, 8,
	8, 8, 8, 9, 9, 5, 1, 2, 1, 1,
	2, 1, 1, 1, 1, 2, 2, 2, 1, 3,
	3, 4, 4, 5, 5, 6, 8, 8, 8, 8,
	8, 8, 10, 3, 1, 2, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 2, 3, 2,
	3, 0, 1, 1, 2, 1, 1, 2, 2, 3,
	1, 3, 5, 1, 2, 3, 3, 5, 2, 2,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 2, 2,
	2, 3, 5, 4, 4, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 0, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -15, -3, -7, -10, -9, -6, -18,
	-20, -4, -22, -11, -5, 35, 38, 33, -24, 28,
	36, -39, -27, -8, 9, 15, -41, -30, 37, 8,
	11, 19, 30, 13, 12, -12, -16, -19, 7, 12,
	-2, -18, -10, -9, -6, -8, 38, -7, -6, -7,
	-17, -6, -21, -29, -7, 14, 25, 26, 29, 31,
	32, -31, 12, 22, 23, -3, -24, -7, -6, -21,
	-17, 14, 25, -7, -6, -23, -5, -25, -6, -7,
	-26, 14, 25, -22, 11, 30, -11, -25, -28, 38,
	-32, 27, 11, 15, 30, -35, -36, 12, -33, 5,
	21, -40, -34, 11, 22, 12, 20, 28, -11, -41,
	-5, -30, -29, -7, 14, 25, -37, -38, 12, -2,
	-3, -19, 12, 37, 7, -17, -7, -21, -8, 22,
	37, 7, -6, -6, -17, -6, -31, -8, -6, -11,
	-4, -5, -6, -7, -6, -5, -26, -6, -11, -11,
	-32, 22, -36, -34, 38, -6, -6, -38, -13, -14,
	16, 10, 17, -7, -6, -6, -6, -7, -9, -6,
	-10, -6, -7, -7, -29, -25, -11, -21, -21, -7,
	-40, 5, 21, -29, -14, -9, -6, -7, 37, 37,
	-6, -7, -17, -6, 37, -8, -22, -6, -22, -6,
	-21, 38, -6, 37, -17, -6, 37, 37, -6, -17,
	-7, -6, -22, -7, -6, -22, -6, -6, -17, -7,
	-6, -6, -7, -7, -6, -7, -7, -7, 37, -6,
	37, -7, 37, 37, 37, 37, 37, 37, -23, -25,
	37, 37, -11, 37,
}

var yyDef = [...]int16{
	0, -2, 1, 0, 9, 83, 0, 0, 0, 26,
	0, 38, 94, 0, 66, 116, 108, 28, 54, 126,
	127, 0, 0, 80, 56, 57, 135, 91, 121, 137,
	-2, 140, -2, 93, 96, 0, 0, 29, 31, 32,
	8, 26, 11, 0, -2, 84, 108, 12, 36, 0,
	58, 35, 0, 0, 89, -2, -2, 62, 63, 64,
	65, 98, 100, 102, 104, 37, 54, 83, 0, 0,
	58, 60, 61, 0, 0, 0, 69, 0, 0, 83,
	73, 75, 76, 94, 95, 97, 67, 0, 78, 0,
	105, 107, 138, 139, 141, 117, 118, 120, 109, 129,
	130, 0, 110, 142, 114, 112, 113, 115, 128, 135,
	77, 91, 0, 0, 101, 103, 122, 123, 125, 0,
	10, 30, 32, 13, 0, 58, 0, 0, 85, 114,
	15, 0, 0, 0, 59, 79, 99, 86, 88, 39,
	40, 66, 0, 0, 0, 70, 74, 88, 53, 68,
	106, 143, 119, 111, 131, 81, 90, 124, 2, 3,
	5, 6, 7, 0, 0, 0, 41, 0, 0, 33,
	34, 0, 0, 42, 0, 0, 67, 0, 0, 0,
	0, 133, 134, 0, 4, 0, 0, 0, 25, 43,
	0, 0, 0, 0, 44, 87, 0, 0, 0, 0,
	0, 132, 82, 14, 0, 0, 45, 16, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 17, 0, 18,
	0, 0, 0, 0, 0, 0, 0, 71, 21, 19,
	22, 20, 46, 47, 48, 49, 50, 51, 0, 72,
	23, 24, 0, 52,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = yyDollar[1].DateTimeTZRanges
		}
	case 2:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = yyDollar[1].DateTimeTZRanges
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = yyDollar[2].DateTimeTZRanges
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = &DateTimeTZRanges{Items: []*DateTimeTZRange{yyDollar[1].DateTimeTZRange}}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = AppendDateTimeTZRanges(yyDollar[1].DateTimeTZRanges, yyDollar[3].DateTimeTZRange)
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewMDsYDates(yyDollar[1].string, yyDollar[2].strings, "")...)
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewDsMYDates(yyDollar[1].strings, yyDollar[2].string, "")...)
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewMDsYDates(yyDollar[1].string, yyDollar[2].strings, yyDollar[3].string)...)
		}
	case 14:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(append(NewMDsYDates(yyDollar[1].string, yyDollar[2].strings, yyDollar[6].string), NewMDsYDates(yyDollar[4].string, yyDollar[5].strings, yyDollar[6].string)...)...)
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewDsMYDates(yyDollar[1].strings, yyDollar[2].string, yyDollar[3].string)...)
		}
	case 16:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(append(NewDsMYDates(yyDollar[1].strings, yyDollar[2].string, yyDollar[6].string), NewDsMYDates(yyDollar[4].strings, yyDollar[5].string, yyDollar[6].string)...)...)
		}
	case 17:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, ""), NewMDYDate(yyDollar[1].string, yyDollar[4].string, "")), NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[5].string, ""), NewMDYDate(yyDollar[1].string, yyDollar[7].string, "")))
		}
	case 18:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[7].string, ""), NewDMYDate(yyDollar[3].string, yyDollar[7].string, "")), NewRangeWithStartEndDates(NewDMYDate(yyDollar[4].string, yyDollar[7].string, ""), NewDMYDate(yyDollar[6].string, yyDollar[7].string, "")))
		}
	case 19:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, ""), NewMDYDate(yyDollar[1].string, yyDollar[4].string, "")), NewRangeWithStartEndDates(NewMDYDate(yyDollar[5].string, yyDollar[6].string, ""), NewMDYDate(yyDollar[5].string, yyDollar[8].string, "")))
		}
	case 20:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, ""), NewDMYDate(yyDollar[3].string, yyDollar[4].string, "")), NewRangeWithStartEndDates(NewDMYDate(yyDollar[5].string, yyDollar[8].string, ""), NewDMYDate(yyDollar[7].string, yyDollar[8].string, "")))
		}
	case 21:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[8].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[8].string)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[5].string, yyDollar[8].string), NewMDYDate(yyDollar[1].string, yyDollar[7].string, yyDollar[8].string)))
		}
	case 22:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[7].string, yyDollar[8].string), NewDMYDate(yyDollar[3].string, yyDollar[7].string, yyDollar[8].string)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[4].string, yyDollar[7].string, yyDollar[8].string), NewDMYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string)))
		}
	case 23:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[9].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[9].string)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[5].string, yyDollar[6].string, yyDollar[9].string), NewMDYDate(yyDollar[5].string, yyDollar[8].string, yyDollar[9].string)))
		}
	case 24:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[9].string), NewDMYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[9].string)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[5].string, yyDollar[8].string, yyDollar[9].string), NewDMYDate(yyDollar[7].string, yyDollar[8].string, yyDollar[9].string)))
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStart(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string)), NewRangeWithStart(NewMDYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[5].string)))
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.strings = []string{yyDollar[1].string}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.strings = []string{yyDollar[1].string, yyDollar[2].string}
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.strings = append(yyDollar[1].strings, yyDollar[2].string)
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRange = yyDollar[2].DateTimeTZRange
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZRange = &DateTimeTZRange{Start: yyDollar[1].DateTimeTZ}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(yyDollar[1].DateTimeTZ, NewDateTime(yyDollar[1].DateTimeTZ.Date, yyDollar[3].Time, ""))
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRange = &DateTimeTZRange{Start: yyDollar[1].DateTimeTZ, End: yyDollar[3].DateTimeTZ}
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, ""), NewMDYDate(yyDollar[1].string, yyDollar[4].string, ""))
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, ""), NewDMYDate(yyDollar[3].string, yyDollar[4].string, ""))
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[5].string))
		}
	case 44:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[5].string), NewDMYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[5].string))
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[6].string), NewMDYDate(yyDollar[4].string, yyDollar[5].string, yyDollar[6].string))
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewMDYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewDMYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewDMYDate(yyDollar[5].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewMDYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewDMYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 51:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewDMYDate(yyDollar[5].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 52:
		yyDollar = yyS[yypt-10 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(NewDateTime(NewDMYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[10].string), yyDollar[1].Time, ""), NewDateTime(NewDMYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[10].string), yyDollar[9].Time, ""))
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(NewDateTime(yyDollar[1].Date, yyDollar[2].Time, ""), NewDateTime(yyDollar[1].Date, yyDollar[3].Time, ""))
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeWithDate(yyDollar[1].Date)
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTime(yyDollar[1].Date, yyDollar[2].Time, "")
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTime(yyDollar[1].Date, yyDollar[3].Time, "")
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTime(yyDollar[2].Date, yyDollar[1].Time, "")
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTime(yyDollar[3].Date, yyDollar[1].Time, "")
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = yyDollar[2].Date
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = yyDollar[1].Date
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewAmbiguousDate(yyDollar[1].string, yyDollar[3].string, "")
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewDMYDate("", "", yyDollar[1].string)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewDMYDate("", yyDollar[3].string, yyDollar[1].string)
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[5].string, yyDollar[3].string, yyDollar[1].string)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, "", "")
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, "", yyDollar[2].string)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string)
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Date = NewAmbiguousDate(yyDollar[1].string, yyDollar[3].string, yyDollar[5].string)
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, yyDollar[2].string, "")
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[1].string, yyDollar[2].string, "")
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[3].string, yyDollar[2].string, yyDollar[1].string)
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = yyDollar[2].Time
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, "", "", "")
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = NewTime((mustAtoi(yyDollar[1].string)%12)+12, "", "", "")
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, yyDollar[3].string, "", "")
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Time = NewTime((mustAtoi(yyDollar[1].string)%12)+12, yyDollar[3].string, yyDollar[5].string, "")
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, yyDollar[3].string, "", "")
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Time = NewTime((mustAtoi(yyDollar[1].string)%12)+12, yyDollar[3].string, "", "")
		}
	}
	goto yystack /* stack new state and value */
}
