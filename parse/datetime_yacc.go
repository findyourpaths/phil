// Code generated by goyacc -l -o datetime_yacc.go -v datetime_yacc.states.txt datetime_yacc.y. DO NOT EDIT.
package parse

import __yyfmt__ "fmt"

import "cloud.google.com/go/civil"

type yySymType struct {
	yys              int
	DateTimeTZRanges *DateTimeTZRanges
	DateTimeTZRange  *DateTimeTZRange
	DateTimeTZ       *DateTimeTZ
	Date             civil.Date
	Time             civil.Time
	string           string
	strings          []string
}

const ILLEGAL = 57346
const AM = 57347
const AMP = 57348
const AND = 57349
const AT = 57350
const BEGINNING = 57351
const CALENDAR = 57352
const COLON = 57353
const COMMA = 57354
const DATE = 57355
const DEC = 57356
const FROM = 57357
const GOOGLE = 57358
const ICS = 57359
const OF = 57360
const ON = 57361
const ORD_IND = 57362
const PM = 57363
const PERIOD = 57364
const QUO = 57365
const SEMICOLON = 57366
const SUB = 57367
const THROUGH = 57368
const T = 57369
const TH = 57370
const TILL = 57371
const TIME = 57372
const TO = 57373
const UNTIL = 57374
const WHEN = 57375
const IDENT = 57376
const MONTH_NAME = 57377
const WEEKDAY_NAME = 57378
const YEAR = 57379
const INT = 57380

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ILLEGAL",
	"AM",
	"AMP",
	"AND",
	"AT",
	"BEGINNING",
	"CALENDAR",
	"COLON",
	"COMMA",
	"DATE",
	"DEC",
	"FROM",
	"GOOGLE",
	"ICS",
	"OF",
	"ON",
	"ORD_IND",
	"PM",
	"PERIOD",
	"QUO",
	"SEMICOLON",
	"SUB",
	"THROUGH",
	"T",
	"TH",
	"TILL",
	"TIME",
	"TO",
	"UNTIL",
	"WHEN",
	"IDENT",
	"MONTH_NAME",
	"WEEKDAY_NAME",
	"YEAR",
	"INT",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 30,
	8, 134,
	15, 134,
	19, 134,
	-2, 91,
	-1, 32,
	8, 137,
	15, 137,
	19, 137,
	-2, 93,
	-1, 42,
	7, 29,
	-2, 84,
	-1, 53,
	12, 97,
	22, 97,
	23, 97,
	-2, 56,
	-1, 54,
	12, 99,
	22, 99,
	23, 99,
	-2, 57,
}

const yyPrivate = 57344

const yyLast = 516

var yyAct = [...]uint8{
	76, 8, 13, 155, 8, 99, 42, 46, 73, 49,
	78, 66, 100, 72, 85, 115, 59, 84, 77, 5,
	94, 88, 5, 44, 106, 45, 47, 52, 75, 65,
	11, 71, 15, 50, 6, 44, 8, 66, 51, 197,
	40, 46, 111, 49, 150, 67, 81, 12, 239, 128,
	12, 129, 131, 237, 5, 65, 4, 12, 7, 28,
	44, 122, 110, 236, 41, 233, 134, 63, 132, 232,
	135, 231, 138, 230, 140, 68, 123, 229, 143, 119,
	44, 228, 12, 12, 48, 52, 142, 144, 145, 69,
	226, 139, 60, 118, 112, 52, 142, 224, 136, 203,
	70, 55, 61, 62, 56, 113, 57, 58, 146, 149,
	23, 151, 152, 44, 148, 202, 43, 28, 121, 199,
	190, 185, 160, 161, 162, 19, 130, 132, 165, 167,
	153, 184, 14, 20, 89, 28, 126, 15, 79, 159,
	172, 2, 163, 130, 116, 38, 74, 168, 169, 80,
	171, 95, 127, 124, 18, 108, 176, 120, 180, 175,
	165, 182, 166, 133, 186, 64, 49, 46, 123, 189,
	170, 37, 173, 174, 193, 195, 43, 117, 21, 183,
	198, 27, 142, 187, 201, 114, 164, 132, 43, 204,
	179, 93, 26, 207, 166, 210, 132, 212, 9, 130,
	137, 213, 39, 96, 109, 86, 216, 217, 141, 196,
	220, 206, 22, 209, 107, 225, 10, 36, 181, 3,
	192, 194, 154, 215, 35, 1, 218, 219, 0, 221,
	222, 223, 234, 0, 0, 227, 0, 238, 235, 0,
	208, 157, 211, 188, 69, 124, 142, 156, 158, 130,
	130, 0, 69, 0, 124, 70, 55, 0, 200, 56,
	0, 57, 58, 70, 55, 205, 19, 56, 74, 57,
	58, 0, 130, 0, 20, 0, 44, 214, 60, 29,
	112, 191, 30, 34, 33, 69, 91, 0, 61, 62,
	31, 113, 0, 0, 0, 0, 70, 55, 0, 19,
	56, 32, 57, 58, 141, 0, 15, 20, 28, 16,
	29, 24, 0, 30, 34, 33, 0, 25, 0, 0,
	0, 31, 29, 24, 0, 30, 34, 33, 0, 25,
	19, 0, 32, 31, 0, 17, 0, 15, 20, 28,
	16, 0, 19, 69, 32, 82, 34, 33, 79, 15,
	20, 28, 16, 0, 70, 55, 0, 0, 56, 80,
	57, 58, 19, 60, 83, 53, 28, 0, 0, 15,
	20, 28, 44, 61, 62, 0, 54, 55, 0, 0,
	56, 29, 57, 58, 90, 0, 15, 79, 91, 44,
	0, 60, 31, 112, 0, 69, 0, 0, 80, 0,
	89, 61, 62, 92, 113, 0, 70, 55, 0, 0,
	56, 87, 57, 58, 69, 0, 15, 44, 28, 44,
	82, 34, 33, 0, 0, 70, 55, 0, 0, 56,
	0, 57, 58, 103, 0, 15, 177, 19, 44, 83,
	0, 104, 101, 125, 15, 20, 28, 44, 29, 105,
	97, 90, 178, 147, 79, 91, 101, 0, 0, 31,
	0, 0, 60, 0, 53, 80, 98, 147, 0, 0,
	92, 0, 61, 62, 0, 54, 55, 29, 87, 56,
	90, 57, 58, 0, 91, 15, 97, 60, 31, 112,
	0, 0, 101, 103, 0, 0, 0, 61, 62, 92,
	113, 104, 98, 102, 0, 37, 0, 87, 157, 105,
	15, 0, 0, 0, 156, 158,
}

var yyPact = [...]int16{
	302, -1000, 164, 302, -1000, 22, -3, 102, 351, -1000,
	314, 230, -3, 334, 373, 139, 481, -1000, -1000, -1000,
	-1000, 469, 409, 475, -1000, -1000, -1000, -1000, 132, -1000,
	-1000, -1000, -1000, -1000, -1000, 302, 314, -1000, 164, -1000,
	42, 150, 381, -1000, 421, 99, -1000, 145, -15, -1000,
	75, 379, 98, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 22, 450, 271, -1000, -1000,
	-1000, -15, 102, -15, 107, 334, 475, 22, -1000, -1000,
	-1000, -1000, -1000, -1000, 469, 440, 107, 445, -1000, -1000,
	-1000, -1000, -1000, 139, -1000, -1000, 421, -1000, -1000, 6,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 107, -1000,
	379, -15, -1000, -1000, 132, -1000, -1000, 498, -1000, -1000,
	102, -15, -15, 400, -1000, -1000, -1000, -15, -3, 102,
	-1000, 266, -1000, -1000, 329, 334, -1000, 373, 230, 230,
	102, 107, -1000, 98, -1000, -1000, -1000, -1000, -1000, -1000,
	431, 266, -1000, -1000, 231, -1000, -1000, -1000, -1000, -15,
	-3, 94, 84, -15, 102, -15, -15, 230, -15, 83,
	80, 334, -1000, 238, 238, 230, 1, -1000, -1000, 379,
	-1000, 82, 230, -15, -1000, -1000, 78, 62, -15, 230,
	-1000, -1000, -3, 97, -3, 97, 75, -1000, -1000, -1000,
	-15, 230, -1000, -1000, 102, -15, -15, 102, 102, -15,
	102, 102, 102, 60, -15, 53, 102, 44, 40, 36,
	34, 32, 28, 124, -1000, 26, -1000, 16, -1000, -1000,
	-1000, -1000, -1000, -1000, 469, 124, -1000, -1000, 11, -1000,
}

var yyPgo = [...]uint8{
	0, 225, 141, 56, 30, 132, 0, 18, 110, 58,
	34, 2, 224, 222, 3, 219, 217, 75, 198, 216,
	33, 46, 8, 154, 14, 10, 212, 205, 38, 181,
	16, 21, 203, 12, 191, 20, 185, 15, 178, 5,
	192, 178,
}

var yyR1 = [...]int8{
	0, 12, 1, 13, 13, 14, 14, 14, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 15, 15, 18, 9,
	9, 10, 10, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	19, 19, 23, 23, 20, 20, 17, 17, 17, 17,
	17, 17, 4, 4, 4, 4, 4, 22, 22, 24,
	24, 25, 25, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 26, 26, 29,
	29, 29, 29, 29, 28, 28, 30, 30, 30, 30,
	30, 27, 27, 31, 6, 6, 32, 32, 33, 33,
	33, 33, 7, 7, 34, 34, 35, 8, 8, 36,
	36, 37, 21, 21, 11, 11, 11, 11, 11, 11,
	11, 38, 38, 40, 40, 40, 40, 40, 39, 39,
	16, 16, 41, 41,
}

var yyR2 = [...]int8{
	0, 0, 4, 1, 2, 1, 1, 1, 2, 1,
	3, 2, 2, 3, 6, 3, 6, 7, 7, 8,
	8, 8, 8, 9, 9, 5, 1, 2, 1, 1,
	1, 2, 2, 2, 1, 3, 3, 4, 4, 5,
	5, 6, 8, 8, 8, 8, 8, 8, 10, 3,
	1, 2, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 2, 3, 2, 3, 0, 1, 1,
	2, 1, 1, 2, 2, 3, 1, 3, 5, 1,
	2, 3, 3, 5, 2, 2, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 1, 1, 2, 2, 2, 3, 5, 4,
	4, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -15, -3, -7, -10, -9, -6, -18,
	-19, -4, -21, -11, -5, 35, 38, 33, -23, 28,
	36, -38, -26, -8, 9, 15, -40, -29, 37, 8,
	11, 19, 30, 13, 12, -12, -16, 7, -2, -18,
	-10, -9, -6, -8, 38, -7, -6, -7, -17, -6,
	-20, -28, -7, 14, 25, 26, 29, 31, 32, -30,
	12, 22, 23, -3, -23, -7, -6, -20, -17, 14,
	25, -7, -6, -22, -5, -24, -6, -7, -25, 14,
	25, -21, 11, 30, -11, -24, -27, 38, -31, 27,
	11, 15, 30, -34, -35, 12, -32, 5, 21, -39,
	-33, 11, 22, 12, 20, 28, -11, -40, -5, -29,
	-28, -7, 14, 25, -36, -37, 12, -2, -3, 37,
	7, -17, -7, -20, -8, 22, 37, 7, -6, -6,
	-17, -6, -30, -8, -6, -11, -4, -5, -6, -7,
	-6, -5, -25, -6, -11, -11, -31, 22, -35, -33,
	38, -6, -6, -37, -13, -14, 16, 10, 17, -7,
	-6, -6, -6, -7, -9, -6, -10, -6, -7, -7,
	-28, -24, -11, -20, -20, -7, -39, 5, 21, -28,
	-14, -9, -6, -7, 37, 37, -6, -7, -17, -6,
	37, -8, -21, -6, -21, -6, -20, 38, -6, 37,
	-17, -6, 37, 37, -6, -17, -7, -6, -21, -7,
	-6, -21, -6, -6, -17, -7, -6, -6, -7, -7,
	-6, -7, -7, -7, 37, -6, 37, -7, 37, 37,
	37, 37, 37, 37, -22, -24, 37, 37, -11, 37,
}

var yyDef = [...]int16{
	0, -2, 1, 0, 9, 79, 0, 0, 0, 26,
	0, 34, 90, 0, 62, 112, 104, 28, 50, 122,
	123, 0, 0, 76, 52, 53, 131, 87, 117, 133,
	-2, 136, -2, 89, 92, 0, 0, 141, 8, 26,
	11, 0, -2, 80, 104, 12, 32, 0, 54, 31,
	0, 0, 85, -2, -2, 58, 59, 60, 61, 94,
	96, 98, 100, 33, 50, 79, 0, 0, 54, 56,
	57, 0, 0, 0, 65, 0, 0, 79, 69, 71,
	72, 90, 91, 93, 63, 0, 74, 0, 101, 103,
	134, 135, 137, 113, 114, 116, 105, 125, 126, 0,
	106, 138, 110, 108, 109, 111, 124, 131, 73, 87,
	0, 0, 97, 99, 118, 119, 121, 140, 10, 13,
	0, 54, 0, 0, 81, 110, 15, 0, 0, 0,
	55, 75, 95, 82, 84, 35, 36, 62, 0, 0,
	0, 66, 70, 84, 49, 64, 102, 139, 115, 107,
	127, 77, 86, 120, 2, 3, 5, 6, 7, 0,
	0, 0, 37, 0, 0, 29, 30, 0, 0, 38,
	0, 0, 63, 0, 0, 0, 0, 129, 130, 0,
	4, 0, 0, 0, 25, 39, 0, 0, 0, 0,
	40, 83, 0, 0, 0, 0, 0, 128, 78, 14,
	0, 0, 41, 16, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 17, 0, 18, 0, 0, 0, 0,
	0, 0, 0, 67, 21, 19, 22, 20, 42, 43,
	44, 45, 46, 47, 0, 68, 23, 24, 0, 48,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = yyDollar[1].DateTimeTZRanges
		}
	case 2:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = yyDollar[1].DateTimeTZRanges
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = yyDollar[2].DateTimeTZRanges
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = &DateTimeTZRanges{Items: []*DateTimeTZRange{yyDollar[1].DateTimeTZRange}}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = AppendDateTimeTZRanges(yyDollar[1].DateTimeTZRanges, yyDollar[3].DateTimeTZRange)
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewMDsYDates(yyDollar[1].string, yyDollar[2].strings, "")...)
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewDsMYDates(yyDollar[1].strings, yyDollar[2].string, "")...)
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewMDsYDates(yyDollar[1].string, yyDollar[2].strings, yyDollar[3].string)...)
		}
	case 14:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(append(NewMDsYDates(yyDollar[1].string, yyDollar[2].strings, yyDollar[6].string), NewMDsYDates(yyDollar[4].string, yyDollar[5].strings, yyDollar[6].string)...)...)
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewDsMYDates(yyDollar[1].strings, yyDollar[2].string, yyDollar[3].string)...)
		}
	case 16:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(append(NewDsMYDates(yyDollar[1].strings, yyDollar[2].string, yyDollar[6].string), NewDsMYDates(yyDollar[4].strings, yyDollar[5].string, yyDollar[6].string)...)...)
		}
	case 17:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, ""), NewMDYDate(yyDollar[1].string, yyDollar[4].string, "")), NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[5].string, ""), NewMDYDate(yyDollar[1].string, yyDollar[7].string, "")))
		}
	case 18:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[7].string, ""), NewDMYDate(yyDollar[3].string, yyDollar[7].string, "")), NewRangeWithStartEndDates(NewDMYDate(yyDollar[4].string, yyDollar[7].string, ""), NewDMYDate(yyDollar[6].string, yyDollar[7].string, "")))
		}
	case 19:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, ""), NewMDYDate(yyDollar[1].string, yyDollar[4].string, "")), NewRangeWithStartEndDates(NewMDYDate(yyDollar[5].string, yyDollar[6].string, ""), NewMDYDate(yyDollar[5].string, yyDollar[8].string, "")))
		}
	case 20:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, ""), NewDMYDate(yyDollar[3].string, yyDollar[4].string, "")), NewRangeWithStartEndDates(NewDMYDate(yyDollar[5].string, yyDollar[8].string, ""), NewDMYDate(yyDollar[7].string, yyDollar[8].string, "")))
		}
	case 21:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[8].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[8].string)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[5].string, yyDollar[8].string), NewMDYDate(yyDollar[1].string, yyDollar[7].string, yyDollar[8].string)))
		}
	case 22:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[7].string, yyDollar[8].string), NewDMYDate(yyDollar[3].string, yyDollar[7].string, yyDollar[8].string)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[4].string, yyDollar[7].string, yyDollar[8].string), NewDMYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string)))
		}
	case 23:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[9].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[9].string)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[5].string, yyDollar[6].string, yyDollar[9].string), NewMDYDate(yyDollar[5].string, yyDollar[8].string, yyDollar[9].string)))
		}
	case 24:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[9].string), NewDMYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[9].string)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[5].string, yyDollar[8].string, yyDollar[9].string), NewDMYDate(yyDollar[7].string, yyDollar[8].string, yyDollar[9].string)))
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStart(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string)), NewRangeWithStart(NewMDYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[5].string)))
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.strings = []string{yyDollar[1].string}
		}
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.strings = []string{yyDollar[1].string, yyDollar[2].string}
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.strings = append(yyDollar[1].strings, yyDollar[2].string)
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZRange = yyDollar[2].DateTimeTZRange
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZRange = &DateTimeTZRange{Start: yyDollar[1].DateTimeTZ}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(yyDollar[1].DateTimeTZ, NewDateTime(yyDollar[1].DateTimeTZ.Date, yyDollar[3].Time, ""))
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRange = &DateTimeTZRange{Start: yyDollar[1].DateTimeTZ, End: yyDollar[3].DateTimeTZ}
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, ""), NewMDYDate(yyDollar[1].string, yyDollar[4].string, ""))
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, ""), NewDMYDate(yyDollar[3].string, yyDollar[4].string, ""))
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[5].string))
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[5].string), NewDMYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[5].string))
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[6].string), NewMDYDate(yyDollar[4].string, yyDollar[5].string, yyDollar[6].string))
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewMDYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewDMYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewDMYDate(yyDollar[5].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewMDYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewDMYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[8].string), NewDMYDate(yyDollar[5].string, yyDollar[7].string, yyDollar[8].string))
		}
	case 48:
		yyDollar = yyS[yypt-10 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(NewDateTime(NewDMYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[10].string), yyDollar[1].Time, ""), NewDateTime(NewDMYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[10].string), yyDollar[9].Time, ""))
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(NewDateTime(yyDollar[1].Date, yyDollar[2].Time, ""), NewDateTime(yyDollar[1].Date, yyDollar[3].Time, ""))
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeWithDate(yyDollar[1].Date)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTime(yyDollar[1].Date, yyDollar[2].Time, "")
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTime(yyDollar[1].Date, yyDollar[3].Time, "")
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTime(yyDollar[2].Date, yyDollar[1].Time, "")
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTime(yyDollar[3].Date, yyDollar[1].Time, "")
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = yyDollar[2].Date
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = yyDollar[1].Date
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewAmbiguousDate(yyDollar[1].string, yyDollar[3].string, "")
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewDMYDate("", "", yyDollar[1].string)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewDMYDate("", yyDollar[3].string, yyDollar[1].string)
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[5].string, yyDollar[3].string, yyDollar[1].string)
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, "", "")
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, "", yyDollar[2].string)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string)
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Date = NewAmbiguousDate(yyDollar[1].string, yyDollar[3].string, yyDollar[5].string)
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, yyDollar[2].string, "")
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[1].string, yyDollar[2].string, "")
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[3].string, yyDollar[2].string, yyDollar[1].string)
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = yyDollar[2].Time
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, "", "", "")
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = NewTime((mustAtoi(yyDollar[1].string)%12)+12, "", "", "")
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, yyDollar[3].string, "", "")
		}
	case 128:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Time = NewTime((mustAtoi(yyDollar[1].string)%12)+12, yyDollar[3].string, yyDollar[5].string, "")
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, yyDollar[3].string, "", "")
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Time = NewTime((mustAtoi(yyDollar[1].string)%12)+12, yyDollar[3].string, "", "")
		}
	}
	goto yystack /* stack new state and value */
}
