// Code generated by goyacc -l -o datetime_yacc.go -v datetime_yacc.states.txt datetime_yacc.y. DO NOT EDIT.
package parse

import __yyfmt__ "fmt"

import "cloud.google.com/go/civil"

type yySymType struct {
	yys              int
	DateTimeTZRanges *DateTimeTZRanges
	DateTimeTZRange  *DateTimeTZRange
	DateTimeTZ       *DateTimeTZ
	Date             civil.Date
	Time             civil.Time
	string           string
}

const ILLEGAL = 57346
const AM = 57347
const AMP = 57348
const AND = 57349
const AT = 57350
const CALENDAR = 57351
const COLON = 57352
const GOOGLE = 57353
const ICS = 57354
const PM = 57355
const QUO = 57356
const SEMICOLON = 57357
const SUB = 57358
const THROUGH = 57359
const TO = 57360
const T = 57361
const WHEN = 57362
const IDENT = 57363
const MONTH_NAME = 57364
const WEEKDAY_NAME = 57365
const YEAR = 57366
const INT = 57367

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ILLEGAL",
	"AM",
	"AMP",
	"AND",
	"AT",
	"CALENDAR",
	"COLON",
	"GOOGLE",
	"ICS",
	"PM",
	"QUO",
	"SEMICOLON",
	"SUB",
	"THROUGH",
	"TO",
	"T",
	"WHEN",
	"IDENT",
	"MONTH_NAME",
	"WEEKDAY_NAME",
	"YEAR",
	"INT",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 5,
	1, 69,
	9, 69,
	12, 69,
	-2, 58,
}

const yyPrivate = 57344

const yyLast = 150

var yyAct = [...]int8{
	21, 47, 118, 24, 25, 26, 116, 9, 115, 40,
	27, 41, 38, 23, 111, 24, 25, 26, 97, 96,
	39, 22, 90, 89, 20, 50, 13, 11, 49, 103,
	51, 34, 13, 11, 35, 48, 57, 7, 13, 11,
	8, 81, 99, 82, 80, 24, 25, 26, 63, 86,
	93, 94, 87, 41, 79, 78, 71, 76, 92, 69,
	66, 73, 68, 67, 72, 23, 83, 63, 77, 88,
	62, 61, 60, 22, 23, 74, 24, 25, 26, 64,
	42, 98, 22, 43, 31, 4, 56, 32, 54, 53,
	104, 52, 46, 44, 19, 122, 121, 119, 117, 113,
	112, 110, 90, 82, 101, 100, 41, 91, 85, 84,
	65, 45, 120, 114, 102, 95, 55, 24, 25, 26,
	75, 109, 30, 6, 106, 71, 70, 59, 58, 105,
	73, 17, 107, 72, 37, 18, 29, 36, 16, 33,
	3, 12, 108, 28, 15, 14, 2, 10, 5, 1,
}

var yyPact = [...]int16{
	65, -1000, 15, -1000, -1000, 124, -1000, 69, -1, 101,
	128, 106, 62, -1000, -1000, 9, 125, -1000, -1000, -13,
	58, 68, 87, 67, -1000, -1000, -1000, 3, 66, -1000,
	64, 63, 94, -1000, 61, 60, 115, -1000, 47, 45,
	54, -1000, 86, 38, 37, -1000, 112, -1000, -1000, 51,
	50, -1000, 120, 104, -1000, -1000, 29, 43, -1000, -1000,
	30, -1000, 19, 41, 85, -1000, 84, 27, 101, -2,
	83, -1000, -1000, 33, 82, 25, 26, 93, -6, -1000,
	101, 17, -1000, 81, -1000, -1000, 80, 92, 4, 101,
	-1000, -1000, 119, 102, 79, 78, 77, -1000, -11, 101,
	-1000, -1000, 75, 91, -17, -19, -1000, -1000, -1000, -1000,
	-1000, 74, -23, -1000, 73, 90, -1000, -1000, 72, -1000,
	71, -1000, -1000,
}

var yyPgo = [...]uint8{
	0, 149, 148, 123, 7, 147, 1, 146, 145, 144,
	0, 143, 142, 141, 140, 138, 137, 128,
}

var yyR1 = [...]int8{
	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 12, 12, 13,
	13, 6, 6, 6, 6, 6, 6, 6, 9, 9,
	11, 11, 10, 10, 10, 7, 14, 14, 8, 15,
	15, 16, 16, 17, 17,
}

var yyR2 = [...]int8{
	0, 3, 1, 3, 3, 4, 5, 6, 3, 4,
	5, 6, 4, 5, 6, 7, 4, 5, 6, 7,
	7, 7, 8, 8, 8, 8, 9, 9, 5, 1,
	3, 4, 4, 5, 5, 3, 6, 1, 3, 1,
	3, 6, 3, 3, 5, 3, 3, 0, 1, 0,
	1, 1, 2, 2, 3, 5, 4, 4, 0, 1,
	0, 1, 1, 1, 1, 1, 0, 1, 3, 0,
	1, 0, 1, 0, 1,
}

var yyChk = [...]int16{
	-1000, -1, -7, -14, 20, -2, -3, 22, 25, -4,
	-5, 24, -13, 23, -8, -9, -15, 7, 11, 25,
	25, -10, 22, 14, 16, 17, 18, -10, -11, 8,
	16, 22, 25, -3, 22, 25, -16, 9, 25, -10,
	22, 24, 22, 25, 25, 24, 25, -6, -4, 25,
	22, -6, 25, 25, 25, 22, 25, -10, -17, 12,
	25, 24, 25, 22, 25, 24, 22, 25, 25, 22,
	14, 5, 13, 10, 25, 16, -10, 25, 25, 24,
	25, 22, 24, 25, 24, 24, 22, 25, -10, 25,
	24, 24, 25, 25, 25, 22, 25, 24, -10, 25,
	24, 24, 22, 25, -10, 10, 5, 13, -12, 19,
	24, 25, -10, 24, 22, 25, 25, 24, 25, 24,
	22, 24, 24,
}

var yyDef = [...]int8{
	66, -2, 0, 65, 67, -2, 2, 0, 0, 29,
	37, 39, 0, 50, 1, 0, 71, 59, 70, 0,
	0, 0, 0, 0, 62, 63, 64, 0, 0, 61,
	0, 0, 0, 3, 0, 0, 73, 72, 4, 0,
	0, 42, 8, 0, 0, 43, 0, 30, 35, 51,
	0, 38, 51, 40, 45, 46, 0, 0, 68, 74,
	5, 12, 31, 0, 0, 16, 9, 0, 0, 32,
	0, 52, 53, 0, 0, 0, 0, 0, 6, 13,
	0, 0, 33, 0, 28, 17, 10, 0, 0, 0,
	34, 44, 54, 47, 31, 32, 7, 14, 0, 0,
	36, 18, 11, 0, 0, 0, 56, 57, 41, 48,
	15, 20, 0, 19, 21, 0, 55, 24, 22, 25,
	23, 26, 27,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = yyDollar[2].DateTimeTZRanges
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = &DateTimeTZRanges{Items: []*DateTimeTZRange{yyDollar[1].DateTimeTZRange}}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = AppendDateTimeTZRanges(yyDollar[1].DateTimeTZRanges, yyDollar[3].DateTimeTZRange)
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, ""), NewMDYDate(yyDollar[1].string, yyDollar[3].string, ""))
		}
	case 5:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, ""), NewMDYDate(yyDollar[1].string, yyDollar[3].string, ""), NewMDYDate(yyDollar[1].string, yyDollar[4].string, ""))
		}
	case 6:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, ""), NewMDYDate(yyDollar[1].string, yyDollar[3].string, ""), NewMDYDate(yyDollar[1].string, yyDollar[4].string, ""), NewMDYDate(yyDollar[1].string, yyDollar[5].string, ""))
		}
	case 7:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, ""), NewMDYDate(yyDollar[1].string, yyDollar[3].string, ""), NewMDYDate(yyDollar[1].string, yyDollar[4].string, ""), NewMDYDate(yyDollar[1].string, yyDollar[5].string, ""), NewMDYDate(yyDollar[1].string, yyDollar[6].string, ""))
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewDMYDate(yyDollar[1].string, yyDollar[3].string, ""), NewDMYDate(yyDollar[2].string, yyDollar[3].string, ""))
		}
	case 9:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, ""), NewDMYDate(yyDollar[2].string, yyDollar[4].string, ""), NewDMYDate(yyDollar[3].string, yyDollar[4].string, ""))
		}
	case 10:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewDMYDate(yyDollar[1].string, yyDollar[5].string, ""), NewDMYDate(yyDollar[2].string, yyDollar[5].string, ""), NewDMYDate(yyDollar[3].string, yyDollar[5].string, ""), NewDMYDate(yyDollar[4].string, yyDollar[5].string, ""))
		}
	case 11:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewDMYDate(yyDollar[1].string, yyDollar[6].string, ""), NewDMYDate(yyDollar[2].string, yyDollar[6].string, ""), NewDMYDate(yyDollar[3].string, yyDollar[6].string, ""), NewDMYDate(yyDollar[4].string, yyDollar[6].string, ""), NewDMYDate(yyDollar[5].string, yyDollar[6].string, ""))
		}
	case 12:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[4].string), NewMDYDate(yyDollar[1].string, yyDollar[3].string, yyDollar[4].string))
		}
	case 13:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string), NewMDYDate(yyDollar[1].string, yyDollar[3].string, yyDollar[5].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[5].string))
		}
	case 14:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[6].string), NewMDYDate(yyDollar[1].string, yyDollar[3].string, yyDollar[6].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[6].string), NewMDYDate(yyDollar[1].string, yyDollar[5].string, yyDollar[6].string))
		}
	case 15:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[7].string), NewMDYDate(yyDollar[1].string, yyDollar[3].string, yyDollar[7].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[7].string), NewMDYDate(yyDollar[1].string, yyDollar[5].string, yyDollar[7].string), NewMDYDate(yyDollar[1].string, yyDollar[6].string, yyDollar[7].string))
		}
	case 16:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewDMYDate(yyDollar[1].string, yyDollar[3].string, yyDollar[4].string), NewDMYDate(yyDollar[2].string, yyDollar[3].string, yyDollar[4].string))
		}
	case 17:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[5].string), NewDMYDate(yyDollar[2].string, yyDollar[4].string, yyDollar[5].string), NewDMYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[5].string))
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewDMYDate(yyDollar[1].string, yyDollar[5].string, yyDollar[6].string), NewDMYDate(yyDollar[2].string, yyDollar[5].string, yyDollar[6].string), NewDMYDate(yyDollar[3].string, yyDollar[5].string, yyDollar[6].string), NewDMYDate(yyDollar[4].string, yyDollar[5].string, yyDollar[6].string))
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRangesWithStartDates(NewDMYDate(yyDollar[1].string, yyDollar[6].string, yyDollar[7].string), NewDMYDate(yyDollar[2].string, yyDollar[6].string, yyDollar[7].string), NewDMYDate(yyDollar[3].string, yyDollar[6].string, yyDollar[7].string), NewDMYDate(yyDollar[4].string, yyDollar[6].string, yyDollar[7].string), NewDMYDate(yyDollar[5].string, yyDollar[6].string, yyDollar[7].string))
		}
	case 20:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, ""), NewMDYDate(yyDollar[1].string, yyDollar[4].string, "")), NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[5].string, ""), NewMDYDate(yyDollar[1].string, yyDollar[7].string, "")))
		}
	case 21:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[7].string, ""), NewDMYDate(yyDollar[3].string, yyDollar[7].string, "")), NewRangeWithStartEndDates(NewDMYDate(yyDollar[4].string, yyDollar[7].string, ""), NewDMYDate(yyDollar[6].string, yyDollar[7].string, "")))
		}
	case 22:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, ""), NewMDYDate(yyDollar[1].string, yyDollar[4].string, "")), NewRangeWithStartEndDates(NewMDYDate(yyDollar[5].string, yyDollar[6].string, ""), NewMDYDate(yyDollar[5].string, yyDollar[8].string, "")))
		}
	case 23:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, ""), NewDMYDate(yyDollar[3].string, yyDollar[4].string, "")), NewRangeWithStartEndDates(NewDMYDate(yyDollar[5].string, yyDollar[8].string, ""), NewDMYDate(yyDollar[7].string, yyDollar[8].string, "")))
		}
	case 24:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[8].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[8].string)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[5].string, yyDollar[8].string), NewMDYDate(yyDollar[1].string, yyDollar[7].string, yyDollar[8].string)))
		}
	case 25:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[7].string, yyDollar[8].string), NewDMYDate(yyDollar[3].string, yyDollar[7].string, yyDollar[8].string)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[4].string, yyDollar[7].string, yyDollar[8].string), NewDMYDate(yyDollar[6].string, yyDollar[7].string, yyDollar[8].string)))
		}
	case 26:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[9].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[9].string)), NewRangeWithStartEndDates(NewMDYDate(yyDollar[5].string, yyDollar[6].string, yyDollar[9].string), NewMDYDate(yyDollar[5].string, yyDollar[8].string, yyDollar[9].string)))
		}
	case 27:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[9].string), NewDMYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[9].string)), NewRangeWithStartEndDates(NewDMYDate(yyDollar[5].string, yyDollar[8].string, yyDollar[9].string), NewDMYDate(yyDollar[7].string, yyDollar[8].string, yyDollar[9].string)))
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRanges = NewRanges(NewRangeWithStart(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string)), NewRangeWithStart(NewMDYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[5].string)))
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZRange = &DateTimeTZRange{Start: yyDollar[1].DateTimeTZ}
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDateTimes(yyDollar[1].DateTimeTZ, NewDateTime(yyDollar[1].DateTimeTZ.Date, yyDollar[3].Time, ""))
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, ""), NewMDYDate(yyDollar[1].string, yyDollar[4].string, ""))
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, ""), NewDMYDate(yyDollar[3].string, yyDollar[4].string, ""))
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[5].string), NewMDYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[5].string))
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewDMYDate(yyDollar[1].string, yyDollar[4].string, yyDollar[5].string), NewDMYDate(yyDollar[3].string, yyDollar[4].string, yyDollar[5].string))
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZRange = &DateTimeTZRange{Start: yyDollar[1].DateTimeTZ, End: yyDollar[3].DateTimeTZ}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.DateTimeTZRange = NewRangeWithStartEndDates(NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[6].string), NewMDYDate(yyDollar[4].string, yyDollar[5].string, yyDollar[6].string))
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTimeWithDate(yyDollar[1].Date)
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.DateTimeTZ = NewDateTime(yyDollar[1].Date, yyDollar[3].Time, "")
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Date = NewDMYDate("", "", yyDollar[1].string)
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewDMYDate("", yyDollar[3].string, yyDollar[1].string)
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[5].string, yyDollar[3].string, yyDollar[1].string)
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[1].string, yyDollar[2].string, yyDollar[3].string)
		}
	case 44:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Date = NewAmbiguousDate(ambiguousDateMode, yyDollar[1].string, yyDollar[3].string, yyDollar[5].string)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewMDYDate(yyDollar[2].string, yyDollar[3].string, "")
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Date = NewDMYDate(yyDollar[2].string, yyDollar[3].string, "")
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, "", "", "")
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, "", "", "")
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.Time = NewTime((mustAtoi(yyDollar[1].string)%12)+12, "", "", "")
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, yyDollar[3].string, "", "")
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.Time = NewTime((mustAtoi(yyDollar[1].string)%12)+12, yyDollar[3].string, yyDollar[5].string, "")
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Time = NewTime(yyDollar[1].string, yyDollar[3].string, "", "")
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.Time = NewTime((mustAtoi(yyDollar[1].string)%12)+12, yyDollar[3].string, "", "")
		}
	}
	goto yystack /* stack new state and value */
}
